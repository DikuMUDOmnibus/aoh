abjurer.c:    SET_BIT(ch->immune, IMM_SHIELDED);
abjurer.c:  REMOVE_BIT(ch->immune, IMM_SHIELDED);
abjurer.c:        if (ch->mana < mcost)
abjurer.c:        ch->mana -= mcost;
abjurer.c:  if (IS_SET(ch->pcdata->powers[WRAITH_POWERS], WRAITH_DIMEDODGE))
abjurer.c:    REMOVE_BIT(ch->pcdata->powers[WRAITH_POWERS], WRAITH_DIMEDODGE);
abjurer.c:   SET_BIT(ch->pcdata->powers[WRAITH_POWERS], WRAITH_DIMEDODGE);
act_comm.c:    if (ch->pcdata->quest < amount)
act_comm.c:    ch->pcdata->quest -= amount;
act_comm.c:    sprintf(buf, "%s puts %d qps on %s's head, who now have a %d qps bounty.", ch->name, amount, victim->name, victim->pcdata->bounty);
act_comm.c:  if (IS_NPC(ch) || IS_SET(ch->deaf, CHANNEL_NEWBIE))
act_comm.c:  if (RTIMER(ch->in_room, RTIMER_SILENCE) != 0)
act_comm.c:  else if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_comm.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE))
act_comm.c:  if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:  to = ch->in_room->people;
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL &&
act_comm.c:        ch->pcdata->chobj->in_obj != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:      sprintf(name, ch->short_descr);
act_comm.c:      sprintf(name, ch->morph);
act_comm.c:      sprintf(name, ch->name);
act_comm.c:  for (rt = ch->in_room->roomtext; rt != NULL; rt = rt->next)
act_comm.c:        if (!is_in(ch->name, rt->name))
act_comm.c:          vch_next = vch->next;
act_comm.c:          if (vch->in_room == NULL)
act_comm.c:          if (vch->in_room == ch->in_room && vch->pIndexData->vnum == rt->mob)
act_comm.c:          REMOVE_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:          SET_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:          obj = create_object(get_obj_index(rt->power), ch->level);
act_comm.c:            obj_to_room(obj, ch->in_room);
act_comm.c:          char_to_room(mob, ch->in_room);
act_comm.c:          obj_to_room(obj, ch->in_room);
act_comm.c:          for (mob = ch->in_room->people; mob; mob = mob->next_in_room)
act_comm.c:              sprintf(xbuf, rt->output, ch->name);
act_comm.c:  if ((victim = get_char_world(ch, arg)) == NULL || (IS_NPC(victim) && victim->in_room != ch->in_room))
act_comm.c:    if (IS_NPC(victim) || IS_NPC(ch) || strlen(victim->pcdata->marriage) < 2 || str_cmp(ch->name, victim->pcdata->marriage))
act_comm.c:      if (victim->pcdata->ignore[i] == ch->pcdata->playerid)
act_comm.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE))
act_comm.c:  if ((victim = get_char_world(ch, arg)) == NULL || (victim->in_room != ch->in_room))
act_comm.c:  if ((victim = ch->reply) == NULL)
act_comm.c:      if (victim->pcdata->ignore[i] == ch->pcdata->playerid)
act_comm.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE))
act_comm.c:  if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:  to = ch->in_room->people;
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL &&
act_comm.c:        ch->pcdata->chobj->in_obj != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:      sprintf(name, ch->short_descr);
act_comm.c:      sprintf(name, ch->morph);
act_comm.c:      sprintf(name, ch->name);
act_comm.c:    if (ch->short_descr != NULL)
act_comm.c:      strcpy(you, ch->short_descr);
act_comm.c:    if (ch->name != NULL)
act_comm.c:      strcpy(you, ch->name);
act_comm.c:  if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:  to = ch->in_room->people;
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_room != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_room != NULL && ch->in_room == to->in_room)
act_comm.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL &&
act_comm.c:        ch->pcdata->chobj->in_obj != NULL && !IS_NPC(to) && to->pcdata->chobj != NULL && to->pcdata->chobj->in_obj != NULL && ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:      sprintf(name, ch->short_descr);
act_comm.c:      sprintf(name, ch->morph);
act_comm.c:      sprintf(name, ch->name);
act_comm.c:  if (ch->position == POS_FIGHTING)
act_comm.c:  if (ch->position != POS_STANDING)
act_comm.c:    ch->position = POS_STANDING;
act_comm.c:  if (ch->fight_timer > 0)
act_comm.c:  if (ch->in_room != NULL)
act_comm.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ARENA))
act_comm.c:  for (gch = char_list; gch; gch = gch->next)
act_comm.c:    if (gch->desc)
act_comm.c:      if (gch->desc->connected != CON_PLAYING && !(gch->desc->connected >= CON_NOTE_TO && gch->desc->connected <= CON_NOTE_FINISH))
act_comm.c:    if (gch->challenger == ch)
act_comm.c:      gch->challenger = NULL;
act_comm.c:  if (ch->level > 6);           /* do nothing */
act_comm.c:  else if (IS_SET(ch->pcdata->jflags, JFLAG_SETLOGOUT))
act_comm.c:  else if (ch->pcdata->obj_vnum == 0)
act_comm.c:    sprintf(buf, "#R%s #7has fled from #RAge of Heroes#7.#n", ch->pcdata->switchname);
act_comm.c:  if (ch->challenger != NULL)
act_comm.c:    ch->challenger = NULL;
act_comm.c:  if ((mount = ch->mount) != NULL)
act_comm.c:  if (ch->desc && ch->desc->out_compress)
act_comm.c:    compressEnd(ch->desc);      // free up the mccp shit
act_comm.c:  if (ch->pcdata->in_progress)
act_comm.c:    free_note(ch->pcdata->in_progress);
act_comm.c:  d = ch->desc;
act_comm.c:  if (ch->pcdata->obj_vnum != 0)
act_comm.c:  if (ch->in_room != NULL)
act_comm.c:  sprintf(log_buf, "%s has quit.", ch->name);
act_comm.c:  if (ch->pcdata->chobj != NULL)
act_comm.c:    extract_obj(ch->pcdata->chobj);
act_comm.c:  if (ch->level < 2)
act_comm.c:  if (ch->level < 2)
act_comm.c:  if (IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL)
act_comm.c:    act("But you'd rather follow $N!", ch, NULL, ch->master, TO_CHAR);
act_comm.c:    if (ch->master == NULL)
act_comm.c:  if (ch->master != NULL)
act_comm.c:  if (ch->master != NULL)
act_comm.c:  ch->master = master;
act_comm.c:  ch->leader = NULL;
act_comm.c:  if (ch->master == NULL)
act_comm.c:    REMOVE_BIT(ch->affected_by, AFF_CHARM);
act_comm.c:  if (can_see(ch->master, ch))
act_comm.c:    act("$n stops following you.", ch, NULL, ch->master, TO_VICT);
act_comm.c:  act("You stop following $N.", ch, NULL, ch->master, TO_CHAR);
act_comm.c:  ch->master = NULL;
act_comm.c:  ch->leader = NULL;
act_comm.c:  if (ch->master != NULL)
act_comm.c:  ch->leader = NULL;
act_comm.c:    fch_next = fch->next;
act_comm.c:    if (fch->leader == ch)
act_comm.c:      fch->leader = fch;
act_comm.c:    if (fch->master == ch)
act_comm.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ORDER) || IS_SET(ch->in_room->room_flags, ROOM_SAFE))
act_comm.c:  for (och = ch->in_room->people; och != NULL; och = och_next)
act_comm.c:    och_next = och->next_in_room;
act_comm.c:    if ((IS_AFFECTED(och, AFF_CHARM) && och->master == ch && (fAll || och == victim)))
act_comm.c:      ch->wait = victim->wait;
act_comm.c:    leader = (ch->leader != NULL) ? ch->leader : ch;
act_comm.c:    for (gch = char_list; gch != NULL; gch = gch->next)
act_comm.c:          capitalize(PERS(gch, ch)), gch->hit, gch->max_hit, gch->mana, gch->max_mana, gch->move, gch->max_move, gch->exp);
act_comm.c:  if (ch->master != NULL || (ch->leader != NULL && ch->leader != ch))
act_comm.c:  sprintf(buf, "#G%s tells the group #R'#G%s#R'\n\r#n", ch->name, argument);
act_comm.c:  if (ach->leader != NULL)
act_comm.c:    ach = ach->leader;
act_comm.c:  if (bch->leader != NULL)
act_comm.c:    bch = bch->leader;
act_comm.c:  if (IS_SET(ch->in_room->room_flags, ROOM_DARK))
act_comm.c:    REMOVE_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:  SET_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:  in_room = ch->in_room->vnum;
act_comm.c:  in_room = ch->in_room->vnum;
act_comm.c:  in_room = ch->in_room->vnum;
act_comm.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_comm.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_comm.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_comm.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_comm.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_info.c:  value += ch->damroll;
act_info.c:  if (ch->level < LEVEL_AVATAR)
act_info.c:  value += ch->hitroll;
act_info.c:  if (ch->level < LEVEL_AVATAR)
act_info.c:  if (ch->desc == NULL)
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:    if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF1))
act_info.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_BRIEF1))
act_info.c:      if (IS_NPC(ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj != obj)
act_info.c:  if (victim != ch && !IS_NPC(ch) && !IS_HEAD(victim, LOST_HEAD) && number_percent() < ch->pcdata->learned[gsn_peek])
act_info.c:  for (rch = list; rch != NULL; rch = rch->next_in_room)
act_info.c:      if (!IS_NPC(rch) && IS_SET(rch->act, PLR_WIZINVIS) && get_trust(ch) < get_trust(rch))
act_info.c:      if (!IS_NPC(rch) && (IS_SET(rch->act, PLR_WIZINVIS) || IS_ITEMAFF(rch, ITEMA_VANISH)) && !IS_SET(ch->act, PLR_HOLYLIGHT) && !IS_ITEMAFF(ch, ITEMA_VISION))
act_info.c:    else if (room_is_dark(ch->in_room) && IS_AFFECTED(rch, AFF_INFRARED))
act_info.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT))
act_info.c:  if (ch->class == 0)
act_info.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
act_info.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
act_info.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
act_info.c:  if (ch->desc == NULL) // && (wizard = ch->wizard) == NULL)
act_info.c:  if (ch->in_room == NULL)
act_info.c:  if (ch->position < POS_SLEEPING)
act_info.c:  if (ch->position == POS_SLEEPING)
act_info.c:  if (IS_SET(ch->flag2, AFF_TOTALBLIND))
act_info.c:  if (!IS_NPC(ch) && IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS) && !IS_ITEMAFF(ch, ITEMA_VISION) && !IS_IMMORTAL(ch))
act_info.c:      && !IS_SET(ch->act, PLR_HOLYLIGHT)
act_info.c:      && !(ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL) && room_is_dark(ch->in_room))
act_info.c:    show_char_to_char(ch->in_room->people, ch);
act_info.c:    if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:      act("$p", ch, ch->pcdata->chobj->in_obj, NULL, TO_CHAR);
act_info.c:    else if (!IS_SET(ch->act, PLR_MAP))
act_info.c:      if (!IS_NPC(ch) && ch->level > 6)
act_info.c:        sprintf(buf, "%s #0[#7%d#0]#n\n\r", ch->in_room->name, ch->in_room->vnum);
act_info.c:        sprintf(buf, "%s\n\r", ch->in_room->name);
act_info.c:    if (!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOEXIT) && !IS_SET(ch->act, PLR_MAP))
act_info.c:    if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT && !IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:      act("You are inside $p.", ch, ch->pcdata->chobj->in_obj, NULL, TO_CHAR);
act_info.c:      show_list_to_char(ch->pcdata->chobj->in_obj->contains, ch, FALSE, FALSE);
act_info.c:    else if ((!IS_NPC(ch) && !IS_SET(ch->act, PLR_BRIEF1)) && (arg1[0] == '\0' || !str_cmp(arg1, "auto") || !str_cmp(arg1, "scry")))
act_info.c:      if (IS_SET(ch->act, PLR_MAP))
act_info.c:        draw_map(ch, ch->in_room->description);
act_info.c:        send_to_char(ch->in_room->description, ch);
act_info.c:      if (ch->in_room->blood == 1000)
act_info.c:      else if (ch->in_room->blood > 750)
act_info.c:      else if (ch->in_room->blood > 500)
act_info.c:      else if (ch->in_room->blood > 250)
act_info.c:      else if (ch->in_room->blood > 100)
act_info.c:      else if (ch->in_room->blood > 50)
act_info.c:      else if (ch->in_room->blood > 25)
act_info.c:      else if (ch->in_room->blood > 0)
act_info.c:      if (ch->in_room->blood > 0)
act_info.c:    if (IS_SET(ch->in_room->room_flags, ROOM_FLAMING))
act_info.c:    show_list_to_char(ch->in_room->contents, ch, FALSE, FALSE);
act_info.c:      if (ch->in_room == NULL)
act_info.c:      if (ch->in_room->exit[door] == NULL)
act_info.c:      if (IS_SET(ch->in_room->exit[door]->exit_info, EX_PRISMATIC_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_ICE_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_CALTROP_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_FIRE_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_SWORD_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_MUSHROOM_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_IRON_WALL))
act_info.c:      else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_ASH_WALL))
act_info.c:    show_char_to_char(ch->in_room->people, ch);
act_info.c:        location = ch->in_room;
act_info.c:    vch_next = vch->next;
act_info.c:    if (vch->in_room == NULL)
act_info.c:    if (vch->in_room == ch->in_room)
act_info.c:      if (!IS_NPC(vch) && !str_cmp(arg1, vch->morph))
act_info.c:  if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:  for (obj = ch->in_room->contents; obj != NULL; obj = obj->next_content)
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:  pdesc = get_extra_descr(arg1, ch->in_room->extra_descr);
act_info.c:  if ((pexit = ch->in_room->exit[door]) == NULL)
act_info.c:      if ((pexit = ch->in_room->exit[door]) == NULL)
act_info.c:      location = ch->in_room;
act_info.c:      if ((pexit = ch->in_room->exit[door]) == NULL)
act_info.c:      location = ch->in_room;
act_info.c:    if ((pexit = ch->in_room->exit[door]) == NULL)
act_info.c:    location = ch->in_room;
act_info.c:    if ((pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL)
act_info.c:  sprintf(skill, "   Slice   #C: %-4d", ch->wpn[1]);
act_info.c:  sprintf(skill, "     Stab   #C: %-4d", ch->wpn[2]);
act_info.c:  sprintf(skill, "     Slash  #C: %-4d", ch->wpn[3]);
act_info.c:  sprintf(skill, "     Whip   #C: %-4d\n\r", ch->wpn[4]);
act_info.c:  sprintf(skill, "   Claw    #C: %-4d", ch->wpn[5]);
act_info.c:  sprintf(skill, "     Blast  #C: %-4d", ch->wpn[6]);
act_info.c:  sprintf(skill, "     Pound  #C: %-4d", ch->wpn[7]);
act_info.c:  sprintf(skill, "     Crush  #C: %-4d\n\r", ch->wpn[8]);
act_info.c:  sprintf(skill, "   Grep    #C: %-4d", ch->wpn[9]);
act_info.c:  sprintf(skill, "     Bite   #C: %-4d", ch->wpn[10]);
act_info.c:  sprintf(skill, "     Pierce #C: %-4d", ch->wpn[11]);
act_info.c:  sprintf(skill, "     Suck   #C: %-4d\n\r", ch->wpn[12]);
act_info.c:  sprintf(skill, "   Unarmed #C: %-4d\n\r", ch->wpn[0]);
act_info.c:  sprintf(skill, "   Viper   #C: %-4d", ch->stance[1]);
act_info.c:  sprintf(skill, "     Crane   #C: %-4d", ch->stance[2]);
act_info.c:  sprintf(skill, "    Crab   #C: %-4d", ch->stance[3]);
act_info.c:  sprintf(skill, "    Mongoose#C : %-4d\n\r", ch->stance[4]);
act_info.c:  sprintf(skill, "   Bull    #C: %-4d", ch->stance[5]);
act_info.c:  sprintf(skill, "     Mantis  #C: %-4d", ch->stance[6]);
act_info.c:  sprintf(skill, "    Dragon #C: %-4d", ch->stance[7]);
act_info.c:  sprintf(skill, "    Tiger    #C: %-4d\n\r", ch->stance[8]);
act_info.c:  sprintf(skill, "   Monkey  #C: %-4d", ch->stance[9]);
act_info.c:  sprintf(skill, "     Swallow #C: %-4d\n\r", ch->stance[10]);
act_info.c:  sprintf(skill, "   SS1    #C: %-4d", ch->stance[13]);
act_info.c:  sprintf(skill, "   SS2  #C: %-4d", ch->stance[14]);
act_info.c:  sprintf(skill, "   SS3 #C: %-4d", ch->stance[15]); 
act_info.c:  sprintf(skill, "   SS4   #C: %-4d", ch->stance[16]);   
act_info.c:  sprintf(skill, "   SS5    #C: %-4d\n\r", ch->stance[17]);
act_info.c:  sprintf(skill, "   #pPurple#n #C: %-4d", ch->spl[0]);  
act_info.c:  sprintf(skill, "   #lBlue#n #C: %-4d", ch->spl[2]);
act_info.c:  sprintf(skill, "   #rRed#n #C: %-4d", ch->spl[1]);  
act_info.c:  sprintf(skill, "   #gGreen#n #C: %-4d", ch->spl[3]);
act_info.c:  sprintf(skill, "   #yYellow#n #C: %-4d#n\n\r\n", ch->spl[4]);
act_info.c:  sprintf(skill, "   Recall Room #C: %d#n\n\r", ch->home);
act_info.c:  if (IS_SET(ch->act, PLR_RIGHTHAND))
act_info.c:  else if (IS_SET(ch->act, PLR_LEFTHAND))
act_info.c:  sprintf(skill, "   Generation #C: %d#n\n\r", ch->generation);
act_info.c:    if (gch->level < 7)
act_info.c:    if (gch->level < 7)
act_info.c:    if (gch->pkill > 0)
act_info.c:      if (100 * gch->pkill / (gch->pkill + gch->pdeath) < 100 && 100 * gch->pkill / (gch->pkill + gch->pdeath) > 9)
act_info.c:          sprintf(pkratio, "#R(#G0.%-2d#R)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#0(#G0.%-2d#0)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#y(#G0.%-2d#y)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#L(#G0.%-2d#L)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:      else if (100 * gch->pkill / (gch->pkill + gch->pdeath) < 10)
act_info.c:          sprintf(pkratio, "#R(#G0.0%-1d#R)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#0(#G0.0%-1d#0)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#y(#G0.0%-1d#y)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:          sprintf(pkratio, "#L(#G0.0%-1d#L)#n", (100 * gch->pkill / (gch->pkill + gch->pdeath)));
act_info.c:    if ((IS_HEAD(gch, LOST_HEAD) || IS_EXTRA(gch, EXTRA_OSWITCH)) && gch->pcdata->chobj != NULL)
act_info.c:      if (gch->pcdata->chobj->pIndexData->vnum == 12)
act_info.c:      else if (gch->pcdata->chobj->pIndexData->vnum == 30005)
act_info.c:      switch (gch->level)
act_info.c:          else if (gch->prefix != NULL)
act_info.c:            title = gch->prefix;
act_info.c:          if (gch->prefix != NULL)
act_info.c:            title = gch->prefix;
act_info.c:          else if (IS_SET(gch->pcdata->jflags, JFLAG_BULLY))
act_info.c:    if (gch->class > 0)
act_info.c:    if (gch->level > 6)
act_info.c:      sprintf(buf1 + strlen(buf1), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:    else if (gch->level >= 3 && gch->level <= 6)
act_info.c:        sprintf(buf2 + strlen(buf2), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf3 + strlen(buf3), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf4 + strlen(buf4), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf5 + strlen(buf5), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf6 + strlen(buf6), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf7 + strlen(buf7), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf8 + strlen(buf8), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf9 + strlen(buf9), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf10 + strlen(buf10), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf11 + strlen(buf11), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf12 + strlen(buf12), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf13 + strlen(buf13), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf14 + strlen(buf14), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf15 + strlen(buf15), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf16 + strlen(buf16), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:        sprintf(buf17 + strlen(buf17), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:    else if (gch->level < 3)
act_info.c:      sprintf(buf18 + strlen(buf18), " %-16s %-6s %-24s %-12s %s\n\r", title, pkratio, kav, gch->pcdata->switchname, faith);
act_info.c:    if (!IS_NPC(ch) && (obj = ch->pcdata->chobj) == NULL)
act_info.c:        location = ch->in_room;
act_info.c:        for (portal = ch->in_room->contents; portal != NULL; portal = portal_next)
act_info.c:              REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:              SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:              SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:              REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:  show_list_to_char(ch->carrying, ch, TRUE, TRUE);
act_info.c:          && (victim = d->character) != NULL && !IS_NPC(victim) && victim->in_room != NULL && victim->in_room->area == ch->in_room->area && victim->pcdata->chobj == NULL && can_see(ch, victim))
act_info.c:          && victim->in_room->area == ch->in_room->area && !IS_AFFECTED(victim, AFF_HIDE) && !IS_AFFECTED(victim, AFF_SNEAK) && can_see(ch, victim) && is_name(arg, victim->name))
act_info.c:  free_string(ch->prefix);
act_info.c:  ch->prefix = str_dup(buf);
act_info.c:  free_string(ch->pcdata->title);
act_info.c:  ch->pcdata->title = str_dup(buf);
act_info.c:  if (ch->fight_timer > 0)
act_info.c:  if (IS_SET(ch->extra, EXTRA_AFK))
act_info.c:    REMOVE_BIT(ch->extra, EXTRA_AFK);
act_info.c:  if ((ch->in_room == NULL || !IS_SET(ch->in_room->room_flags, ROOM_SAFE)) && ch->level < 6)
act_info.c:  if (!IS_SET(ch->extra, EXTRA_AFK))
act_info.c:    if (IS_SET(ch->pcdata->tempflag, TEMP_ARTIFACT))
act_info.c:    if (ch->master)
act_info.c:    SET_BIT(ch->extra, EXTRA_AFK);
act_info.c:      if (ch->description != NULL)
act_info.c:        strcat(buf, ch->description);
act_info.c:    free_string(ch->description);
act_info.c:    ch->description = str_dup(buf);
act_info.c:  send_to_char(ch->description ? ch->description : "(None).\n\r", ch);
act_info.c:  sprintf(hit_str, "%d", ch->hit);
act_info.c:  COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
act_info.c:  sprintf(mana_str, "%d", ch->mana);
act_info.c:  COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
act_info.c:  sprintf(move_str, "%d", ch->move);
act_info.c:  COL_SCALE(move_str, ch, ch->move, ch->max_move);
act_info.c:  sprintf(exp_str, "%d", ch->exp);
act_info.c:  COL_SCALE(exp_str, ch, ch->exp, 1000);
act_info.c:  sprintf(mhit_str, "%d", ch->max_hit);
act_info.c:  sprintf(mmana_str, "%d", ch->max_mana);
act_info.c:  sprintf(mmove_str, "%d", ch->max_move);
act_info.c:    vch_next = vch->next;
act_info.c:    if (vch->in_room == NULL)
act_info.c:    if (vch->in_room != ch->in_room)
act_info.c:    sprintf(hit_str, "%d", ch->hit);
act_info.c:    COL_SCALE(hit_str, vch, ch->hit, ch->max_hit);
act_info.c:    sprintf(mana_str, "%d", ch->mana);
act_info.c:    COL_SCALE(mana_str, vch, ch->mana, ch->max_mana);
act_info.c:    sprintf(move_str, "%d", ch->move);
act_info.c:    COL_SCALE(move_str, vch, ch->move, ch->max_move);
act_info.c:    sprintf(exp_str, "%d", ch->exp);
act_info.c:    COL_SCALE(exp_str, vch, ch->exp, 1000);
act_info.c:    sprintf(mhit_str, "%d", ch->max_hit);
act_info.c:    sprintf(mmana_str, "%d", ch->max_mana);
act_info.c:    sprintf(mmove_str, "%d", ch->max_move);
act_info.c:      sprintf(buf, "%s reports: %s/%s hp %s/%s mana %s/%s mv %s xp.\n\r", ch->morph, hit_str, mhit_str, mana_str, mmana_str, move_str, mmove_str, exp_str);
act_info.c:      sprintf(buf, "%s reports: %s/%s hp %s/%s mana %s/%s mv %s xp.\n\r", IS_NPC(ch) ? capitalize(ch->short_descr) : ch->name, hit_str, mhit_str, mana_str, mmana_str, move_str, mmove_str, exp_str);
act_info.c:        if (ch->level < skill_table[sn].skill_level)
act_info.c:            sprintf(buf, "#p%18s #7%3d%%  ", skill_table[sn].name, ch->pcdata->learned[sn]);
act_info.c:            sprintf(buf, "#R%18s #7%3d%%  ", skill_table[sn].name, ch->pcdata->learned[sn]);
act_info.c:            sprintf(buf, "#L%18s #7%3d%%  ", skill_table[sn].name, ch->pcdata->learned[sn]);
act_info.c:            sprintf(buf, "#G%18s #7%3d%%  ", skill_table[sn].name, ch->pcdata->learned[sn]);
act_info.c:            sprintf(buf, "#y%18s #7%3d%%  ", skill_table[sn].name, ch->pcdata->learned[sn]);
act_info.c:    sprintf(buf, "You have %d exp left.\n\r", ch->exp);
act_info.c:      if (ch->exp < 5000)
act_info.c:      if ((skill_table[sn].name != NULL) && (ch->level >= skill_table[sn].skill_level) && ch->pcdata->learned[sn] < 100)
act_info.c:        ch->pcdata->learned[sn] = 100;
act_info.c:        ch->exp -= 5000;
act_info.c:    if (ch->exp <= 0)
act_info.c:    if ((sn = skill_lookup(argument)) < 0 || (!IS_NPC(ch) && ch->level < skill_table[sn].skill_level))
act_info.c:    if (ch->pcdata->learned[sn] >= SKILL_ADEPT)
act_info.c:    else if (ch->pcdata->learned[sn] > 0 && ch->exp < 5000)
act_info.c:    else if (ch->pcdata->learned[sn] == 0 && ch->exp < 5000)
act_info.c:      if (ch->pcdata->learned[sn] == 0)
act_info.c:        ch->exp -= 5000;
act_info.c:        ch->pcdata->learned[sn] += 100;
act_info.c:        ch->exp -= (ch->pcdata->learned[sn] / 2);
act_info.c:        ch->pcdata->learned[sn] += int_app[get_curr_int(ch)].learn;
act_info.c:      if (ch->pcdata->learned[sn] < SKILL_ADEPT)
act_info.c:        ch->pcdata->learned[sn] = SKILL_ADEPT;
act_info.c:  if (strcmp(arg1, ch->pcdata->pwd) && strcmp(crypt(arg1, ch->pcdata->pwd), ch->pcdata->pwd))
act_info.c:  pwdnew = crypt(arg2, ch->pcdata->switchname);
act_info.c:  free_string(ch->pcdata->pwd);
act_info.c:  ch->pcdata->pwd = str_dup(pwdnew);
act_info.c:    SET_BIT(ch->extra, EXTRA_NEWPASS);
act_info.c:  if (ch->desc != NULL && ch->desc->connected == CON_PLAYING)
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_CHAT) ? " +CHAT" : " -chat", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_FLAME) ? " +FLAME" : " -flame", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_NEWBIE) ? " +NEWBIE" : " -newbie", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_ROLEPLAY) ? " +ROLEPLAY" : " -roleplay", ch);
act_info.c:      send_to_char(!IS_SET(ch->deaf, CHANNEL_IMMTALK) ? " +IMMTALK" : " -immtalk", ch);
act_info.c:      send_to_char(!IS_SET(ch->deaf, CHANNEL_LOG) ? " +LOG" : " -log", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_MUSIC) ? " +MUSIC" : " -music", ch);
act_info.c:    if (ch->class != 0 || IS_IMMORTAL(ch))
act_info.c:      send_to_char(!IS_SET(ch->deaf, CHANNEL_CLASS) ? " +CLASS" : " -class", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_INFO) ? " +INFO" : " -info", ch);
act_info.c:    send_to_char(!IS_SET(ch->deaf, CHANNEL_TELL) ? " +TELL" : " -tell", ch);
act_info.c:      REMOVE_BIT(ch->deaf, bit);
act_info.c:      SET_BIT(ch->deaf, bit);
act_info.c:    send_to_char(IS_SET(ch->act, PLR_ANSI)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_AUTOEXIT)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_AUTOLOOT)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_AUTOSAC)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF1)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF2)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF3)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF4)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF5)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_BRIEF6)
act_info.c:    send_to_char(IS_SET(ch->act, PLR_MAP)
act_info.c:      SET_BIT(ch->act, bit);
act_info.c:      REMOVE_BIT(ch->act, bit);
act_info.c:  if (IS_SET(ch->act, PLR_ANSI))
act_info.c:  if (IS_SET(ch->act, PLR_AUTOEXIT))
act_info.c:  if (IS_SET(ch->act, PLR_AUTOLOOT))
act_info.c:  if (IS_SET(ch->act, PLR_AUTOSAC))
act_info.c:  if (IS_SET(ch->act, PLR_MAP))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF1))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF2))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF3))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF4))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF5))
act_info.c:  if (IS_SET(ch->act, PLR_BRIEF6))
act_info.c:      SET_BIT(ch->extra, EXTRA_PROMPT);
act_info.c:      REMOVE_BIT(ch->extra, EXTRA_PROMPT);
act_info.c:    free_string(ch->prompt);
act_info.c:    ch->prompt = str_dup("");
act_info.c:  free_string(ch->prompt);
act_info.c:  ch->prompt = str_dup(buf);
act_info.c:    free_string(ch->cprompt);
act_info.c:    ch->cprompt = str_dup("");
act_info.c:  free_string(ch->cprompt);
act_info.c:  ch->cprompt = str_dup(buf);
act_info.c:    if (ch->level > 6)
act_move.c:  in_room = ch->in_room;
act_move.c:  if (door == DIR_NORTH && ((obj = get_obj_list(ch, "walln", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "walls", to_room->contents)) != NULL))
act_move.c:  if (door == DIR_SOUTH && ((obj = get_obj_list(ch, "walls", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "walln", to_room->contents)) != NULL))
act_move.c:  if (door == DIR_EAST && ((obj = get_obj_list(ch, "walle", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "wallw", to_room->contents)) != NULL))
act_move.c:  if (door == DIR_WEST && ((obj = get_obj_list(ch, "wallw", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "walle", to_room->contents)) != NULL))
act_move.c:  if (door == DIR_UP && ((obj = get_obj_list(ch, "wallu", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "walld", to_room->contents)) != NULL))
act_move.c:  if (door == DIR_DOWN && ((obj = get_obj_list(ch, "walld", ch->in_room->contents)) != NULL || (obj = get_obj_list(ch, "wallu", to_room->contents)) != NULL))
act_move.c:  if (IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL && in_room == ch->master->in_room)
act_move.c:  if (IS_NPC(ch) && (mount = ch->mount) != NULL && IS_SET(ch->mounted, IS_MOUNT))
act_move.c:    if (IS_NPC(ch) || ch->trust < MAX_LEVEL)
act_move.c:        for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
act_move.c:    if (ch->move <= 0)
act_move.c:    if (IS_SET(ch->mounted, IS_RIDING) && (ch->move < move || ch->move < 1))
act_move.c:    if (IS_SET(pexit->exit_info, EX_FIRE_WALL) && ch->class == 0)
act_move.c:    else if (IS_SET(pexit->exit_info, EX_FIRE_WALL) && ch->class != 0 && !IS_NPC(ch) && ch->level > 2)
act_move.c:      ch->hit -= dice(6, 50);
act_move.c:    if (IS_SET(pexit->exit_info, EX_SWORD_WALL) && ch->class == 0)
act_move.c:    else if (IS_SET(pexit->exit_info, EX_SWORD_WALL) && ch->class != 0 && !IS_NPC(ch) && ch->level > 2)
act_move.c:      ch->hit -= dice(6, 70);
act_move.c:      ch->hit /= 2;
act_move.c:      ch->move /= 2;
act_move.c:    if (!IS_SET(ch->mounted, IS_RIDING))
act_move.c:      ch->move -= move;
act_move.c:  if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
act_move.c:  else if (ch->in_room->sector_type == SECT_WATER_SWIM)
act_move.c:  else if (IS_SET(ch->polyaff, POLY_SERPENT))
act_move.c:  else if (IS_SET(ch->polyaff, POLY_WOLF))
act_move.c:  else if (IS_SET(ch->polyaff, POLY_FROG))
act_move.c:  else if (IS_SET(ch->polyaff, POLY_FISH))
act_move.c:  else if (ch->hit < (ch->max_hit / 4))
act_move.c:  else if (ch->hit < (ch->max_hit / 3))
act_move.c:  else if (ch->hit < (ch->max_hit / 2))
act_move.c:    if (ch->pcdata->condition[COND_DRUNK] > 10)
act_move.c:  else if (IS_SET(ch->act, ACT_FISH))
act_move.c:  if (!IS_NPC(ch) && ch->stance[0] != -1)
act_move.c:    if (ch->in_room == NULL || victim->in_room == NULL)
act_move.c:    if (ch == victim || ch->in_room != victim->in_room)
act_move.c:    if (!IS_NPC(ch) && !IS_AFFECTED(ch, AFF_SNEAK) && IS_AFFECTED(ch, AFF_POLYMORPH) && (IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS)) && can_see(victim, ch))
act_move.c:      if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED(mount, AFF_FLYING)) || IS_AFFECTED(ch, AFF_FLYING))
act_move.c:        sprintf(poly, "%s flies $T%s", ch->morph, mount2);
act_move.c:      else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
act_move.c:        sprintf(poly, "%s rides $T%s", ch->morph, mount2);
act_move.c:        sprintf(poly, "%s %s $T%s", ch->morph, leave, mount2);
act_move.c:    else if (!IS_AFFECTED(ch, AFF_SNEAK) && (IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS)) && can_see(victim, ch))
act_move.c:      if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED(mount, AFF_FLYING)) || IS_AFFECTED(ch, AFF_FLYING))
act_move.c:      else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
act_move.c:    if (ch->in_room == NULL || victim->in_room == NULL)
act_move.c:    if (ch == victim || ch->in_room != victim->in_room)
act_move.c:    if (!IS_NPC(ch) && !IS_AFFECTED(ch, AFF_SNEAK) && IS_AFFECTED(ch, AFF_POLYMORPH) && (IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS)) && can_see(victim, ch))
act_move.c:      if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED(mount, AFF_FLYING)) || IS_AFFECTED(ch, AFF_FLYING))
act_move.c:        sprintf(poly, "%s flies in from %s%s", ch->morph, buf, mount2);
act_move.c:      else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
act_move.c:        sprintf(poly, "%s rides in from %s%s", ch->morph, buf, mount2);
act_move.c:        sprintf(poly, "%s %s in from %s%s", ch->morph, leave, buf, mount2);
act_move.c:    else if (!IS_AFFECTED(ch, AFF_SNEAK) && can_see(victim, ch) && (IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS)))
act_move.c:      if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING && IS_AFFECTED(mount, AFF_FLYING)) || IS_AFFECTED(ch, AFF_FLYING))
act_move.c:      else if ((mount = ch->mount) != NULL && ch->mounted == IS_RIDING)
act_move.c:    fch_next = fch->next_in_room;
act_move.c:    if ((mount = fch->mount) != NULL && mount == ch && IS_SET(fch->mounted, IS_MOUNT))
act_move.c:      char_to_room(fch, ch->in_room);
act_move.c:    if (fch->master == ch && fch->position == POS_STANDING && fch->in_room != ch->in_room)
act_move.c:    REMOVE_BIT(ch->extra, TIED_UP);
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:    old_room = ch->in_room;
act_move.c:      if ((pexit = ch->in_room->exit[door]) != NULL && IS_SET(pexit->exit_info, EX_ISDOOR) && pexit->keyword != NULL && is_name(arg, pexit->keyword))
act_move.c:  if ((pexit = ch->in_room->exit[door]) == NULL)
act_move.c:  if (ch->in_room != NULL)
act_move.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
act_move.c:  obj = get_obj_list(ch, arg, ch->in_room->contents);
act_move.c:    location = ch->in_room;
act_move.c:      sprintf(poly, "%s steps into $p.", ch->morph);
act_move.c:      sprintf(poly, "%s steps out of $p.", ch->morph);
act_move.c:    for (portal = ch->in_room->contents; portal != NULL; portal = portal_next)
act_move.c:          REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:          SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:    if ((mount = ch->mount) != NULL)
act_move.c:      char_to_room(mount, ch->in_room);
act_move.c:      gch_next = gch->next_in_room;
act_move.c:      if (gch->master == ch && gch->position == POS_STANDING && gch->in_room != ch->in_room)
act_move.c:  inroom = ch->in_room;
act_move.c:  if (number_percent() > (ch->level * 10))
act_move.c:      SET_BIT(ch->affected_by, AFF_FLAMING);
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != NULL && pexit_rev->to_room == ch->in_room)
act_move.c:      for (rch = to_room->people; rch != NULL; rch = rch->next_in_room)
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != 0 && pexit_rev->to_room == ch->in_room)
act_move.c:      for (rch = to_room->people; rch != NULL; rch = rch->next_in_room)
act_move.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != 0 && pexit_rev->to_room == ch->in_room)
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != NULL && pexit_rev->to_room == ch->in_room)
act_move.c:  for (gch = ch->in_room->people; gch; gch = gch->next_in_room)
act_move.c:    if (IS_NPC(gch) && IS_AWAKE(gch) && ch->level + 5 < gch->level)
act_move.c:  if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_pick_lock])
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir[door]]) != NULL && pexit_rev->to_room == ch->in_room)
act_move.c:  switch (ch->position)
act_move.c:      ch->position = POS_STANDING;
act_move.c:      ch->position = POS_STANDING;
act_move.c:      ch->position = POS_STANDING;
act_move.c:  switch (ch->position)
act_move.c:      ch->position = POS_RESTING;
act_move.c:  switch (ch->position)
act_move.c:      ch->position = POS_SITTING;
act_move.c:  switch (ch->position)
act_move.c:      ch->position = POS_SLEEPING;
act_move.c:  if (IS_NPC(ch) || number_percent() < ch->pcdata->learned[gsn_sneak])
act_move.c:    af.duration = ch->level;
act_move.c:    REMOVE_BIT(ch->affected_by, AFF_HIDE);
act_move.c:  if (IS_NPC(ch) || number_percent() < ch->pcdata->learned[gsn_hide])
act_move.c:    SET_BIT(ch->affected_by, AFF_HIDE);
act_move.c:  REMOVE_BIT(ch->affected_by, AFF_HIDE);
act_move.c:  REMOVE_BIT(ch->affected_by, AFF_INVISIBLE);
act_move.c:  REMOVE_BIT(ch->affected_by, AFF_SNEAK);
act_move.c:  if ((location = get_room_index(ch->home)) == NULL)
act_move.c:  if (ch->in_room == location)
act_move.c:  if (IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL) || IS_AFFECTED(ch, AFF_CURSE))
act_move.c:  if (IS_SET(ch->flag2, AFF_TOTALBLIND))
act_move.c:  if ((victim = ch->fighting) != NULL)
act_move.c:  if ((mount = ch->mount) == NULL)
act_move.c:  char_to_room(mount, ch->in_room);
act_move.c:  if (ch->in_room->vnum == ch->home)
act_move.c:  if (IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL) ||
act_move.c:      IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) || IS_SET(ch->in_room->area->areabits, AREA_BIT_NOHOME) || IS_SET(ch->in_room->room_flags, ROOM_SAFE))
act_move.c:  if (ch->in_room->vnum == 3001)
act_move.c:  ch->home = ch->in_room->vnum;
act_move.c:  if (ch->position >= POS_SLEEPING)
act_move.c:  if ((location = get_room_index(ch->home)) == NULL)
act_move.c:  if (ch->in_room != NULL)
act_move.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ARENA))
act_move.c:  if (ch->in_room == location)
act_move.c:  ch->move = 0;
act_move.c:  ch->mana = 0;
act_move.c:  sprintf(buf, "%s has escaped #Gdefenceless#n, easy kill for the quick.", ch->pcdata->switchname);
act_move.c:  if (IS_SET(ch->newbits, NEW_DARKNESS))
act_move.c:    REMOVE_BIT(ch->newbits, NEW_DARKNESS);
act_move.c:    if (ch->in_room != NULL)
act_move.c:      if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
act_move.c:        REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
act_move.c:      REMOVE_BIT(ch->immune, IMM_SLASH);
act_move.c:      REMOVE_BIT(ch->immune, IMM_STAB);
act_move.c:      REMOVE_BIT(ch->immune, IMM_SMASH);
act_move.c:      REMOVE_BIT(ch->immune, IMM_ANIMAL);
act_move.c:      REMOVE_BIT(ch->immune, IMM_MISC);
act_move.c:      REMOVE_BIT(ch->immune, IMM_CHARM);
act_move.c:      REMOVE_BIT(ch->immune, IMM_HEAT);
act_move.c:      REMOVE_BIT(ch->immune, IMM_COLD);
act_move.c:      REMOVE_BIT(ch->immune, IMM_LIGHTNING);
act_move.c:      REMOVE_BIT(ch->immune, IMM_ACID);
act_move.c:      REMOVE_BIT(ch->immune, IMM_COLD);
act_move.c:      REMOVE_BIT(ch->immune, IMM_DRAIN);
act_move.c:      REMOVE_BIT(ch->immune, IMM_HURL);
act_move.c:      REMOVE_BIT(ch->immune, IMM_BACKSTAB);
act_move.c:      REMOVE_BIT(ch->immune, IMM_KICK);
act_move.c:      REMOVE_BIT(ch->immune, IMM_DISARM);
act_move.c:      REMOVE_BIT(ch->immune, IMM_STEAL);
act_move.c:    if (ch->generation < 3)
act_move.c:    if (ch->generation == 3)
act_move.c:    else if (ch->generation == 4)
act_move.c:    else if (ch->generation == 5)
act_move.c:    if (ch->exp < gencost)
act_move.c:    ch->generation--;
act_move.c:    ch->exp -= gencost;
act_move.c:      if (ch->exp >= (ch->practice + 1) * 500)
act_move.c:        ch->practice++;
act_move.c:        ch->exp -= ch->practice * 500;
act_move.c:    sprintf(buf, "You have %d experience points.\n\r", ch->exp);
act_move.c:  primal = (1 + ch->practice) * 500;
act_move.c:  if (!str_cmp(arg1, "avatar") && (ch->level == 2))
act_move.c:    if (ch->max_hit < 2000)
act_move.c:    if (ch->max_hit < 2000)
act_move.c:    ch->level = 3;
act_move.c:      ch->pcdata->safe_counter = 10;
act_move.c:      ch->pcdata->safe_counter = 3;
act_move.c:    if (IS_SET(ch->pcdata->jflags, JFLAG_SETAVATAR))
act_move.c:      sprintf(buf, "%s has become an avatar!", ch->pcdata->switchname);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_SLASH);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_STAB);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_SMASH);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_ANIMAL);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_MISC);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_CHARM);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_HEAT);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_COLD);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_LIGHTNING);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_ACID);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_DRAIN);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_HURL);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_BACKSTAB);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_KICK);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_DISARM);
act_move.c:    if (ch->exp < immcost)
act_move.c:    ch->exp = ch->exp - immcost;
act_move.c:    SET_BIT(ch->immune, IMM_STEAL);
act_move.c:    if (ch->level == 2 && ch->max_hit > 1000)
act_move.c:    if (ch->practice < 999)
act_move.c:      sprintf(buf, "Primal           - %d exp per point of primal energy.\n\r", (1 + ch->practice) * 500);
act_move.c:    if (ch->generation == 3)
act_move.c:    else if (ch->generation == 4)
act_move.c:    else if (ch->generation == 5)
act_move.c:    else if (ch->generation > 5)
act_move.c:  if (cost > ch->exp)
act_move.c:  ch->exp -= cost;
act_move.c:  if (ch->mounted > 0)
act_move.c:  if (!IS_NPC(ch) && ch->stance[0] != -1)
act_move.c:  ch->mounted = IS_RIDING;
act_move.c:  ch->mount = victim;
act_move.c:  if (IS_SET(ch->mounted, IS_RIDING))
act_move.c:    if ((victim = ch->mount) == NULL)
act_move.c:      ch->mounted = 0;
act_move.c:  if (ch->mounted == 0)
act_move.c:  if ((victim = ch->mount) == NULL)
act_move.c:  ch->mounted = IS_ON_FOOT;
act_move.c:  ch->mount = NULL;
act_move.c:      sprintf(buf, "#C%s #ohas been vanquished from the #Rarena#o by #C%s#n", victim->name, ch->name);
act_move.c:        if (victim->in_room != NULL && victim->in_room->area == ch->in_room->area && victim->pcdata->chobj == NULL && victim != ch)
act_move.c:        sprintf(buf, "#C%s #oemerges victorious from the #Rarena#n", ch->name);
act_move.c:        ch->pcdata->awins++;
act_move.c:        ch->fight_timer = 0;
act_move.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_SETTIE))
act_move.c:    sprintf(buf, "#P%s #yhas been tied up by #R%s#n", victim->name, ch->name);
act_move.c:  if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_track])
act_move.c:    if (strlen(ch->hunting) > 1)
act_move.c:      free_string(ch->hunting);
act_move.c:      ch->hunting = str_dup("");
act_move.c:  if (!str_cmp(arg, ch->name))
act_move.c:  free_string(ch->hunting);
act_move.c:  ch->hunting = str_dup(arg);
act_move.c:  in_room = ch->in_room;
act_move.c:  if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_track])
act_move.c:    free_string(ch->hunting);
act_move.c:    ch->hunting = str_dup("");
act_move.c:    direction = ch->in_room->track_dir[0];
act_move.c:    direction = ch->in_room->track_dir[1];
act_move.c:    direction = ch->in_room->track_dir[2];
act_move.c:    direction = ch->in_room->track_dir[3];
act_move.c:    direction = ch->in_room->track_dir[4];
act_move.c:  else if ((victim = get_char_room(ch, ch->hunting)) == NULL)
act_move.c:    free_string(ch->hunting);
act_move.c:    ch->hunting = str_dup("");
act_move.c:  if (strlen(ch->hunting) < 2)
act_move.c:  if ((victim = get_char_room(ch, ch->hunting)) != NULL)
act_move.c:  if (in_room == ch->in_room || victim != NULL)
act_move.c:    free_string(ch->hunting);
act_move.c:    ch->hunting = str_dup("");
act_move.c:    if (ch->in_room->track[loop] != NULL && !str_cmp(ch->in_room->track[loop], ch->name))
act_move.c:      free_string(ch->in_room->track[loop]);
act_move.c:      ch->in_room->track[loop] = str_dup("");
act_move.c:  if (ch->in_room->track[0] != NULL && strlen(ch->in_room->track[0]) < 2)
act_move.c:    free_string(ch->in_room->track[0]);
act_move.c:    ch->in_room->track[0] = str_dup(ch->pcdata->switchname);
act_move.c:    ch->in_room->track_dir[0] = direction;
act_move.c:  else if (ch->in_room->track[1] != NULL && strlen(ch->in_room->track[1]) < 2)
act_move.c:    free_string(ch->in_room->track[1]);
act_move.c:    ch->in_room->track[1] = str_dup(ch->pcdata->switchname);
act_move.c:    ch->in_room->track_dir[1] = direction;
act_move.c:  else if (ch->in_room->track[2] != NULL && strlen(ch->in_room->track[2]) < 2)
act_move.c:    free_string(ch->in_room->track[2]);
act_move.c:    ch->in_room->track[2] = str_dup(ch->pcdata->switchname);
act_move.c:    ch->in_room->track_dir[2] = direction;
act_move.c:  else if (ch->in_room->track[3] != NULL && strlen(ch->in_room->track[3]) < 2)
act_move.c:    free_string(ch->in_room->track[3]);
act_move.c:    ch->in_room->track[3] = str_dup(ch->pcdata->switchname);
act_move.c:    ch->in_room->track_dir[3] = direction;
act_move.c:  else if (ch->in_room->track[4] != NULL && strlen(ch->in_room->track[4]) < 2)
act_move.c:    free_string(ch->in_room->track[4]);
act_move.c:    ch->in_room->track[4] = str_dup(ch->pcdata->switchname);
act_move.c:    ch->in_room->track_dir[4] = direction;
act_move.c:    free_string(ch->in_room->track[0]);
act_move.c:    ch->in_room->track[0] = str_dup(ch->in_room->track[1]);
act_move.c:    ch->in_room->track_dir[0] = ch->in_room->track_dir[1];
act_move.c:    free_string(ch->in_room->track[1]);
act_move.c:    ch->in_room->track[1] = str_dup(ch->in_room->track[2]);
act_move.c:    ch->in_room->track_dir[1] = ch->in_room->track_dir[2];
act_move.c:    free_string(ch->in_room->track[2]);
act_move.c:    ch->in_room->track[2] = str_dup(ch->in_room->track[3]);
act_move.c:    ch->in_room->track_dir[2] = ch->in_room->track_dir[3];
act_move.c:    free_string(ch->in_room->track[3]);
act_move.c:    ch->in_room->track[3] = str_dup(ch->in_room->track[4]);
act_move.c:    ch->in_room->track_dir[3] = ch->in_room->track_dir[4];
act_move.c:    free_string(ch->in_room->track[4]);
act_move.c:    ch->in_room->track[4] = str_dup(ch->name);
act_move.c:    ch->in_room->track_dir[4] = direction;
act_move.c:  if (ch->hunting != NULL)
act_move.c:    strcpy(vict, ch->hunting);
act_move.c:  if (!str_cmp(ch->hunting, vict))
act_move.c:      free_string(ch->hunting);
act_move.c:      ch->hunting = str_dup("");
act_move.c:  if (strlen(ch->in_room->track[direction]) < 2)
act_move.c:  if (!str_cmp(ch->in_room->track[direction], ch->name))
act_move.c:  if (strlen(ch->hunting) > 1 && str_cmp(ch->in_room->track[direction], ch->hunting))
act_move.c:  door = ch->in_room->track_dir[direction];
act_move.c:  sprintf(buf, "You sense the trail of %s leading $T from here.", ch->in_room->track[direction]);
act_obj.c:  if (obj->ownerid == 0 || obj->ownerid != ch->pcdata->playerid)
act_obj.c:      if (gch->desc && gch->desc->connected != CON_PLAYING)
act_obj.c:    chroom = ch->in_room;
act_obj.c:    if (obj->ownerid == 0 || obj->ownerid != ch->pcdata->playerid)
act_obj.c:        if (gch->desc && gch->desc->connected != CON_PLAYING)
act_obj.c:      chroom = ch->in_room;
act_obj.c:  if (ch->carry_number + 1 > can_carry_n(ch))
act_obj.c:  if (ch->carry_weight + get_obj_weight(obj) > can_carry_w(ch))
act_obj.c:      obj = get_obj_list(ch, arg1, ch->in_room->contents);
act_obj.c:      for (obj = ch->in_room->contents; obj != NULL; obj = obj_next)
act_obj.c:    for (obj = ch->carrying; obj != NULL; obj = obj_next)
act_obj.c:    obj_to_room(obj, ch->in_room);
act_obj.c:    for (obj = ch->carrying; obj != NULL; obj = obj_next)
act_obj.c:        obj_to_room(obj, ch->in_room);
act_obj.c:  for (fountain = ch->in_room->contents; fountain != NULL; fountain = fountain->next_content)
act_obj.c:    for (obj = ch->in_room->contents; obj; obj = obj->next_content)
act_obj.c:  if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 50)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 50)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 50)
act_obj.c:      if (!IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 50)
act_obj.c:    if (!IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 50 && obj->item_type != ITEM_TRASH && obj->item_type != ITEM_QUEST && obj->item_type != ITEM_PILL)
act_obj.c:        condition = ch->pcdata->condition[COND_FULL];
act_obj.c:        if (condition == 0 && ch->pcdata->condition[COND_FULL] > 10)
act_obj.c:        else if (ch->pcdata->condition[COND_FULL] > 50)
act_obj.c:      if (ch->position == POS_FIGHTING)
act_obj.c:        ch->pcdata->quest += obj->value[0];
act_obj.c:          if (obj->questowner != NULL && str_cmp(ch->pcdata->switchname, obj->questowner) && strlen(obj->questowner) > 1)
act_obj.c:            obj_to_room(obj, ch->in_room);
act_obj.c:          do_skill(ch, ch->name);
act_obj.c:          if (obj->questowner != NULL && str_cmp(ch->pcdata->switchname, obj->questowner) && strlen(obj->questowner) > 1)
act_obj.c:            obj_to_room(obj, ch->in_room);
act_obj.c:          do_skill(ch, ch->name);
act_obj.c:      if (obj->questowner != NULL && str_cmp(ch->pcdata->switchname, obj->questowner) && strlen(obj->questowner) > 1)
act_obj.c:        obj_to_room(obj, ch->in_room);
act_obj.c:      do_skill(ch, ch->name);
act_obj.c:    for (obj = ch->carrying; obj != NULL; obj = obj_next)
act_obj.c:    for (obj = ch->carrying; obj != NULL; obj = obj_next)
act_obj.c:    next_obj = ch->in_room->contents;
act_obj.c:    for (obj = ch->in_room->contents; next_obj != NULL; obj = next_obj)
act_obj.c:          || (obj->questowner != NULL && strlen(obj->questowner) > 1 && str_cmp(ch->name, obj->questowner)))
act_obj.c:        ch->pcdata->quest += obj->points;
act_obj.c:  obj = get_obj_list(ch, arg, ch->in_room->contents);
act_obj.c:      IS_SET(obj->quest, QUEST_ARTIFACT) || (obj->questowner != NULL && strlen(obj->questowner) > 1 && str_cmp(ch->name, obj->questowner)))
act_obj.c:    ch->pcdata->quest += obj->points;
act_obj.c:  if (ch->position == POS_FIGHTING)
act_obj.c:  if (ch->position == POS_FIGHTING)
act_obj.c:    for (vch = ch->in_room->people; vch; vch = vch_next)
act_obj.c:      vch_next = vch->next_in_room;
act_obj.c:  if ((ch->level + number_range(1, 20) < victim->level)
act_obj.c:      || (!IS_NPC(ch) && !IS_NPC(victim) && ch->level < 3)
act_obj.c:      || (!IS_NPC(victim) && IS_IMMUNE(victim, IMM_STEAL)) || (!IS_NPC(victim) && IS_IMMORTAL(victim)) || (!IS_NPC(ch) && percent > ch->pcdata->learned[gsn_steal]))
act_obj.c:    sprintf(buf, "%s is a bloody thief!", ch->name);
act_obj.c:  if (ch->carry_number + 1 > can_carry_n(ch))
act_obj.c:  if (ch->carry_weight + get_obj_weight(obj) > can_carry_w(ch))
act_obj.c:    if (!IS_SET(ch->newbits, THIRD_HAND))
act_obj.c:    if (!IS_SET(ch->newbits, FOURTH_HAND))
act_wiz.c:  for (gch = char_list; gch != NULL; gch = gch->next)
act_wiz.c:    if (IS_NPC(gch) || gch->desc)
act_wiz.c:    sprintf(buf, "Name: %12s. (Room: %5d)\n\r", gch->name, gch->in_room == NULL ? : gch->in_room->vnum);
act_wiz.c:  if (ch->sex == SEX_MALE)
act_wiz.c:    sprintf(buf, "#C%s #pscreams in agony as the #RP#Ga#RR#Ga#RD#Go#RX#p wrecks his puny mortal body#n", ch->name);
act_wiz.c:    sprintf(buf, "#C%s #pscreams in agony as the #RP#Ga#RR#Ga#RD#Go#RX#p wrecks her puny mortal body#n", ch->name);
act_wiz.c:  ch->hit = -10;
act_wiz.c:  ch->max_move = (ch->max_move * 90) / 100;
act_wiz.c:  ch->max_mana = (ch->max_mana * 90) / 100;
act_wiz.c:  SET_BIT(ch->extra, TIED_UP);
act_wiz.c:  SET_BIT(ch->extra, GAGGED);
act_wiz.c:  SET_BIT(ch->extra, BLINDFOLDED);
act_wiz.c:    free_string(ch->pcdata->bamfin);
act_wiz.c:    ch->pcdata->bamfin = str_dup(argument);
act_wiz.c:    free_string(ch->pcdata->bamfout);
act_wiz.c:    ch->pcdata->bamfout = str_dup(argument);
act_wiz.c:    REMOVE_BIT(ch->immune, IMM_SUMMON);
act_wiz.c:    SET_BIT(ch->immune, IMM_SUMMON);
act_wiz.c:    REMOVE_BIT(ch->immune, IMM_TRANSPORT);
act_wiz.c:    SET_BIT(ch->immune, IMM_TRANSPORT);
act_wiz.c:    if ((d->connected == CON_PLAYING) && IS_JUDGE(ch) && !IS_SET(ch->deaf, CHANNEL_LOG))
act_wiz.c:    if (d->connected == CON_PLAYING && d->character->in_room == ch->in_room)
act_wiz.c:    location = ch->in_room;
act_wiz.c:  original = ch->in_room;
act_wiz.c:  for (wch = char_list; wch != NULL; wch = wch->next)
act_wiz.c:  in_room = ch->in_room;
act_wiz.c:  if (ch->fighting)
act_wiz.c:  if (!IS_SET(ch->act, PLR_WIZINVIS))
act_wiz.c:    act("$n $T", ch, NULL, (ch->pcdata && ch->pcdata->bamfout[0] != '\0') ? ch->pcdata->bamfout : "leaves in a swirling mist.", TO_ROOM);
act_wiz.c:  if (!IS_SET(ch->act, PLR_WIZINVIS))
act_wiz.c:    act("$n $T", ch, NULL, (ch->pcdata && ch->pcdata->bamfin[0] != '\0') ? ch->pcdata->bamfin : "appears in a swirling mist.", TO_ROOM);
act_wiz.c:  if (ch->in_room == in_room)
act_wiz.c:  location = (arg[0] == '\0') ? ch->in_room : find_location(ch, arg);
act_wiz.c:  if (ch->in_room != location && room_is_private(location))
act_wiz.c:  for (rch = location->people; rch; rch = rch->next_in_room)
act_wiz.c:    one_argument(rch->name, buf);
act_wiz.c:  for (gch = char_list; gch != NULL; gch = gch->next)
act_wiz.c:    if (IS_HEAD(gch, LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH))
act_wiz.c:      REMOVE_BIT(gch->loc_hp[0], LOST_HEAD);
act_wiz.c:      REMOVE_BIT(gch->affected_by, AFF_POLYMORPH);
act_wiz.c:      REMOVE_BIT(gch->extra, EXTRA_OSWITCH);
act_wiz.c:      gch->morph = str_dup("");
act_wiz.c:      gch->pcdata->chobj = NULL;
act_wiz.c:      gch->pcdata->obj_vnum = 0;
act_wiz.c:  sprintf(buf, "Shutdown by %s.", ch->name);
act_wiz.c:      if (d->snoop_by == ch->desc)
act_wiz.c:  if (ch->desc != NULL)
act_wiz.c:    for (d = ch->desc->snoop_by; d != NULL; d = d->snoop_by)
act_wiz.c:  victim->desc->snoop_by = ch->desc;
act_wiz.c:  char_to_room(victim, ch->in_room);
act_wiz.c:  if (IS_NPC(ch) || ch->desc == NULL || ch->in_room == NULL)
act_wiz.c:  d = ch->desc;
act_wiz.c:  in_room = ch->in_room;
act_wiz.c:  ch->next = char_list;
act_wiz.c:  if (ch->pload == NULL)
act_wiz.c:  sprintf(arg, ch->pload);
act_wiz.c:  if (!str_cmp(ch->name, arg))
act_wiz.c:  d = ch->desc;
act_wiz.c:  sprintf(buf, "You transform back into %s.\n\r", capitalize(ch->pload));
act_wiz.c:  sprintf(buf, "$n transforms back into %s.", capitalize(ch->pload));
act_wiz.c:  if (ch != NULL && ch->desc != NULL)
act_wiz.c:  if (ch->desc)
act_wiz.c:    ch->desc->character = NULL;
act_wiz.c:    ch->next = char_list;
act_wiz.c:  if (ch->in_room != NULL)
act_wiz.c:    char_to_room(ch, ch->in_room);
act_wiz.c:  free_string(ch->pload);
act_wiz.c:  ch->pload = str_dup("");
act_wiz.c:    obj_to_room(obj, ch->in_room);
act_wiz.c:  obj->questmaker = str_dup(ch->name);
act_wiz.c:    for (victim = ch->in_room->people; victim != NULL; victim = vnext)
act_wiz.c:  oldname = str_dup(ch->pcdata->switchname);
act_wiz.c:  d = ch->desc;
act_wiz.c:  in_room = ch->in_room;
act_wiz.c:  ch->next = char_list;
act_wiz.c:  if (IS_SET(ch->act, PLR_DENY))
act_wiz.c:    REMOVE_BIT(ch->act, PLR_DENY);
act_wiz.c:  d = ch->desc;
act_wiz.c:  in_room = ch->in_room;
act_wiz.c:  ch->next = char_list;
act_wiz.c:  for (rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room)
act_wiz.c:    if (rch->fighting != NULL)
act_wiz.c:    if (value >= ch->level && !IS_NPC(victim))
act_wiz.c:    if (value > ch->pcdata->security || value < 0)
act_wiz.c:      if (ch->pcdata->security != 0)
act_wiz.c:        sprintf(buf, "Valid security is 0-%d.\n\r", ch->pcdata->security);
act_wiz.c:  if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name, obj->questmaker)))
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:      obj->questmaker = str_dup(ch->name);
act_wiz.c:      obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:      obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:      obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name, obj->questmaker)))
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:            wch->pcdata->switchname, wch->level, wch->trust, wch->generation, wch->max_hit, wch->max_mana, wch->max_move, char_hitroll(wch), char_damroll(wch), char_ac(wch), wch->pcdata->quest);
act_wiz.c:    sprintf(buf, "%s force all : %s\n\r", ch->name, argument);
act_wiz.c:      vch_next = vch->next;
act_wiz.c:        if (IS_SET(vch->extra, EXTRA_AFK))
act_wiz.c:          SET_BIT(vch->extra, EXTRA_AFK);
act_wiz.c:    if ((get_trust(victim) >= get_trust(ch)) && (ch->level < MAX_LEVEL))
act_wiz.c:    vch_next = vch->next;
act_wiz.c:  if (IS_SET(ch->act, PLR_WIZINVIS))
act_wiz.c:    REMOVE_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:    SET_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
act_wiz.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:  if (IS_SET(ch->in_room->room_flags, ROOM_SAFE))
act_wiz.c:  if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name, obj->questmaker) || strlen(obj->questmaker) < 2))
act_wiz.c:    if (!can_see_obj(ch, obj) || obj->questowner == NULL || strlen(obj->questowner) < 2 || str_cmp(ch->pcdata->switchname, obj->questowner))
act_wiz.c:  if (ch->exp < 500)
act_wiz.c:    if (obj->ownerid == ch->pcdata->playerid)
act_wiz.c:    if (!str_cmp(ch->pcdata->switchname, obj->questowner))
act_wiz.c:        obj->ownerid = ch->pcdata->playerid;
act_wiz.c:  ch->exp -= 500;
act_wiz.c:  obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:  obj->ownerid = ch->pcdata->playerid;
act_wiz.c:  if (ch->exp < 500)
act_wiz.c:  if (obj->ownerid != ch->pcdata->playerid && ch->level < 7)
act_wiz.c:  if (IS_SET(obj->quest, QUEST_RELIC) && ch->level < 7)
act_wiz.c:  ch->exp -= 500;
act_wiz.c:  obj->questmaker = str_dup(ch->name);
act_wiz.c:  if (IS_NPC(ch) || (ch->pcdata->quest < 1 && !IS_JUDGE(ch)))
act_wiz.c:    else if (value > ch->pcdata->quest && !IS_JUDGE(ch))
act_wiz.c:      sprintf(buf, "You only have %d quest points left to put into tokens.\n\r", ch->pcdata->quest);
act_wiz.c:  ch->pcdata->quest -= value;
act_wiz.c:  if (ch->pcdata->quest < 0)
act_wiz.c:    ch->pcdata->quest = 0;
act_wiz.c:  obj->questmaker = str_dup(ch->name);
act_wiz.c:  if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
act_wiz.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
act_wiz.c:  while (ch->affected)
act_wiz.c:    affect_remove(ch, ch->affected);
act_wiz.c:  if (IS_SET(ch->affected_by, AFF_POLYMORPH))
act_wiz.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:  if (IS_SET(ch->affected_by, AFF_ETHEREAL))
act_wiz.c:    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
act_wiz.c:  ch->affected_by = 0;
act_wiz.c:  ch->armor = 100;
act_wiz.c:  ch->hit = UMAX(1, ch->hit);
act_wiz.c:  ch->mana = UMAX(1, ch->mana);
act_wiz.c:  ch->move = UMAX(1, ch->move);
act_wiz.c:  ch->hitroll = 0;
act_wiz.c:  ch->damroll = 0;
act_wiz.c:  ch->saving_throw = 0;
act_wiz.c:  ch->pcdata->mod_str = 0;
act_wiz.c:  ch->pcdata->mod_int = 0;
act_wiz.c:  ch->pcdata->mod_wis = 0;
act_wiz.c:  ch->pcdata->mod_dex = 0;
act_wiz.c:  ch->pcdata->mod_con = 0;
act_wiz.c:  ch->pcdata->followers = 0;
act_wiz.c:  ch->form = 1048575;
act_wiz.c:  if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name, obj->questmaker) || strlen(obj->questmaker) < 2))
act_wiz.c:    chroom = ch->in_room;
act_wiz.c:  if (IS_NPC(ch) || ch->pcdata->obj_vnum < 1)
act_wiz.c:  if ((pObjIndex = get_obj_index(ch->pcdata->obj_vnum)) == NULL)
act_wiz.c:  if (ch->in_room == NULL || ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
act_wiz.c:    location = ch->in_room;
act_wiz.c:  ch->pcdata->chobj = obj;
act_wiz.c:  SET_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:  SET_BIT(ch->extra, EXTRA_OSWITCH);
act_wiz.c:  free_string(ch->morph);
act_wiz.c:  ch->morph = str_dup(obj->short_descr);
act_wiz.c:  if ((ch->pcdata->pwd != '\0') && (arg1[0] == '\0' || arg2[0] == '\0'))
act_wiz.c:  for (gch = char_list; gch != NULL; gch = gch->next)
act_wiz.c:    if (IS_HEAD(gch, LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH))
act_wiz.c:      REMOVE_BIT(gch->loc_hp[0], LOST_HEAD);
act_wiz.c:      REMOVE_BIT(gch->affected_by, AFF_POLYMORPH);
act_wiz.c:      REMOVE_BIT(gch->extra, EXTRA_OSWITCH);
act_wiz.c:      gch->morph = str_dup("");
act_wiz.c:      gch->pcdata->chobj = NULL;
act_wiz.c:      gch->pcdata->obj_vnum = 0;
act_wiz.c:    if (IS_SET(gch->extra, EXTRA_AFK))
act_wiz.c:      SET_BIT(gch->extra, EXTRA_AFK);
act_wiz.c:    if (gch->desc->out_compress)
act_wiz.c:      if (!compressEnd2(gch->desc))
act_wiz.c:      fprintf(fp, "%d %s %s\n", d->descriptor, och->name, d->host);
act_wiz.c:      if (och->level == 1)
act_wiz.c:        och->level++;
aeromancer.c:	if (ch->move < 1000)
aeromancer.c:        if (ch->fight_timer >0) 
aeromancer.c:       if (!IS_SET(ch->pcdata->powers[ELEMENTAL_FORMS], WATER_FORM))
aeromancer.c:       if ( IS_SET(ch->act, AFF_HIDE) )
aeromancer.c:   	 REMOVE_BIT(ch->act, AFF_HIDE);
aeromancer.c:	 ch->move -= 1000;
aeromancer.c:         SET_BIT(ch->act, AFF_HIDE);
aeromancer.c:    if (IS_SET(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFOLD))
aeromancer.c:      REMOVE_BIT(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFOLD);
aeromancer.c:      SET_BIT(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFOLD);
aeromancer.c:  if (ch->move < 250)
aeromancer.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
aeromancer.c:  if (victim->in_room->vnum == ch->in_room->vnum)
aeromancer.c:  ch->move -= 250;
animal.c:        if (!IS_SET(ch->newbits, NEW_SCLAWS))
animal.c:                SET_BIT(ch->newbits, NEW_SCLAWS);
animal.c:        if (IS_SET(ch->newbits, NEW_SCLAWS))
animal.c:                REMOVE_BIT(ch->newbits, NEW_SCLAWS);
animal.c:	if (IS_SET(ch->pcdata->stats[UNI_AFF], VAM_CLAWS))
animal.c:                REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
animal.c:                SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
animal.c:        if (IS_SET(ch->pcdata->stats[UNI_AFF], VAM_FANGS))
animal.c:                REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
animal.c:                SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
animal.c:        if (IS_SET(ch->newbits, NEW_MONKFLAME))
animal.c:                REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
animal.c:        if (!IS_SET(ch->newbits, NEW_MONKFLAME))
animal.c:                SET_BIT(ch->newbits, NEW_MONKFLAME);
animal.c:        if (!IS_SET(ch->newbits, NEW_REND))
animal.c:                SET_BIT(ch->newbits, NEW_REND);
animal.c:        else if (IS_SET(ch->newbits, NEW_REND))
animal.c:                REMOVE_BIT(ch->newbits, NEW_REND);
animal.c:        if ((victim = ch->fighting) == NULL)
animal.c:                        ch->name, victim->name);
animal.c:        if ((victim = ch->fighting) == NULL)
animal.c:        if (IS_SET(ch->newbits, NEW_QUILLS))
animal.c:                REMOVE_BIT(ch->newbits, NEW_QUILLS);
animal.c:        if (!IS_SET(ch->newbits, NEW_QUILLS))
animal.c:                SET_BIT(ch->newbits, NEW_QUILLS);
animal.c:        if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
arena.c:  if (ch->in_room != NULL)
arena.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
arena.c:  for (vch=char_list;vch!=NULL;vch=vch->next)
arena.c:    if (vch->in_room != NULL)
arena.c:      if (IS_SET (vch->in_room->room_flags, ROOM_ARENA))
arena.c:        REMOVE_BIT(vch->act, PLR_FREEZE);
arena.c:  if (ch->fight_timer > 0)
arena.c:  if (ch->in_room != NULL)
arena.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
arena.c:  sprintf(buf,"%s has joined the arena!",ch->name);
arena.c:  SET_BIT(ch->act, PLR_FREEZE);
arena.c:  if (ch->in_room != NULL)
arena.c:    if (!IS_SET(ch->in_room->room_flags, ROOM_ARENA))
arena.c:  sprintf(buf,"%s resigns from the arena",ch->name);
arena.c:  ch->fight_timer = 0;
arena.c:  ch->pcdata->alosses++;
arena.c:    sprintf(buf,"#C%s #oemerges victorious from the #Rarena#n",gch->name);
arena.c:    gch->pcdata->awins++;
arena.c:    gch->fight_timer = 0;
arena.c:  if (victim == ch->challenger)
arena.c:  if (!str_cmp(arg2, "death")) ch->deathmatch = TRUE;
arena.c:  else if (!str_cmp(arg2, "spar")) ch->deathmatch = FALSE;
arena.c:  if (ch->deathmatch)
arena.c:    if (!str_cmp(ch->pcdata->last_decap[0], victim->name)) canDecap = FALSE;
arena.c:    if (!str_cmp(victim->pcdata->last_decap[0], ch->name)) canKillYou = FALSE;
arena.c:  ch->challenger = victim;
arena.c:  if (ch->deathmatch) sprintf(buf, "You have been challenged to a #Gdeathmatch#n by %s. Type agree %s to start the fight.\n\r", ch->name, ch->name);
arena.c:  else sprintf(buf, "You have been challenged to a #Gspar#n by %s. Type agree %s to start the fight.\n\r", ch->name, ch->name);
arena.c:  if (ch->fight_timer > 0)
arena.c:  if (ch->in_room != NULL)
arena.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ARENA) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
arena.c:    if (!str_cmp(ch->pcdata->last_decap[0], victim->name)) canDecap = FALSE;
arena.c:    if (!str_cmp(victim->pcdata->last_decap[0], ch->name)) canKillYou = FALSE;
arena.c:  do_restore(ch, ch->name);
arena.c:    sprintf(buf, "%s and %s enter #CThe Forbidden Fortress#n to test their skills", ch->name, victim->name);
arena.c:    sprintf(buf, "%s and %s enter #CThe Forbidden Fortress#n to duel for their lives", ch->name, victim->name);
arena.c:  if (ch->pcdata->betting_char > 0)
arena.c:  if (ch->pcdata->quest < amount)
arena.c:  for (vch = char_list; vch; vch = vch->next)
arena.c:    if (vch->hit < vch->max_hit * 0.75)
arena.c:  ch->pcdata->quest -= amount;
arena.c:  ch->pcdata->betting_amount = amount;
arena.c:  ch->pcdata->betting_char = gch->pcdata->playerid;
arena.c:    ch->name, amount, gch->name);
arena.c:  for (gch = char_list; gch; gch = gch->next)
arena.c:    if (payoff && gch->pcdata->betting_char == ch->pcdata->playerid)
arena.c:      sprintf(buf, "Congratulations, you win %d quest points.\n\r", gch->pcdata->betting_amount*2);
arena.c:      gch->pcdata->quest += gch->pcdata->betting_amount*2;
arena.c:        gch->name, gch->pcdata->betting_amount*2, ch->name);
arena.c:    else if (!payoff && gch->pcdata->betting_char == ch->pcdata->playerid)
arena.c:      gch->pcdata->quest += gch->pcdata->betting_amount;
arena.c:    gch->pcdata->betting_amount = 0;
arena.c:    gch->pcdata->betting_char = 0;
board.c:  if (!str_cmp(ch->pcdata->switchname, note->sender))
board.c:  if (is_full_name(ch->pcdata->switchname, note->to_list))
board.c:  last_read = ch->pcdata->last_note[board_number(board)];
board.c:  if (getMight(ch) < 150 && ch->level < 7)
board.c:  if (IS_SET(ch->act, PLR_SILENCE))
board.c:  if (ch->pcdata->board == NULL)
board.c:  if (get_trust(ch) < ch->pcdata->board->write_level)
board.c:  if (ch->position != POS_STANDING)
board.c:  if (ch->pcdata->in_progress && (!ch->pcdata->in_progress->text))
board.c:    free_note(ch->pcdata->in_progress);
board.c:    ch->pcdata->in_progress = NULL;
board.c:  if (!ch->pcdata->in_progress)
board.c:    ch->pcdata->in_progress = new_note();
board.c:    ch->pcdata->in_progress->sender = str_dup(ch->pcdata->switchname);
board.c:    ch->pcdata->in_progress->date = str_dup(strtime);
board.c:  SET_BIT(ch->extra, EXTRA_AFK);
board.c:  if (ch->master)
board.c:          "If you are using tintin, type #verbose to turn off alias expansion!\n\r\n\r", ch->pcdata->in_progress->text ? "continuing" : "posting", ch->pcdata->board->short_name);
board.c:  sprintf(buf, BOLD YELLOW "From" NO_COLOR ":    %s\n\r\n\r", ch->pcdata->switchname);
board.c:  if (!ch->pcdata->in_progress->text) /* Are we continuing an old note or not? */
board.c:    switch (ch->pcdata->board->force_type)
board.c:        sprintf(buf, "If you press Return, default recipient \"" BOLD "%s" NO_COLOR "\" will be chosen.\n\r", ch->pcdata->board->names);
board.c:        sprintf(buf, "The recipient list MUST include \"" BOLD "%s" NO_COLOR "\". If not, it will be added automatically.\n\r", ch->pcdata->board->names);
board.c:        sprintf(buf, "The recipient of this note must NOT include: \"" BOLD "%s" NO_COLOR "\".", ch->pcdata->board->names);
board.c:    ch->desc->connected = CON_NOTE_TO;
board.c:            BOLD YELLOW "Subject" NO_COLOR ": %s\n\r", ch->pcdata->in_progress->to_list, ctime(&ch->pcdata->in_progress->expire), ch->pcdata->in_progress->subject);
board.c:    if (ch->pcdata->in_progress != NULL)
board.c:      send_to_char(ch->pcdata->in_progress->text, ch);
board.c:    ch->desc->connected = CON_NOTE_TEXT;
board.c:  time_t *last_note = &ch->pcdata->last_note[board_number(ch->pcdata->board)];
board.c:    for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:    if (ch->pcdata->board == NULL)
board.c:    if (ch->pcdata->board->note_first == NULL)
board.c:    for (p = ch->pcdata->board->note_first; p; p = p->next, count++)
board.c:      sprintf(buf, "Changed to next board, %s.\n\r", ch->pcdata->board->short_name);
board.c:  p = find_note(ch, ch->pcdata->board, atoi(argument));
board.c:  if (str_cmp(ch->pcdata->switchname, p->sender) && ch->trust < MAX_LEVEL)
board.c:  unlink_note(ch->pcdata->board, p);
board.c:  save_board(ch->pcdata->board);  /* save the board */
board.c:    for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:  last_note = ch->pcdata->last_note[board_number(ch->pcdata->board)];
board.c:  for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:  for (p = ch->pcdata->board->note_first; p && p->next; p = p->next);
board.c:    ch->pcdata->last_note[board_number(ch->pcdata->board)] = p->date_stamp;
board.c:    if (ch->pcdata->board != NULL)
board.c:      sprintf(buf, "\n\rYou current board is #9%s#n.\n\r", ch->pcdata->board->short_name);
board.c:      if (ch->pcdata->board->read_level > get_trust(ch))
board.c:      else if (ch->pcdata->board->write_level > get_trust(ch))
board.c:      ch->pcdata->board = &boards[i];
board.c:  ch->pcdata->board = &boards[i];
board.c:  int i = board_number(ch->pcdata->board) + 1;
board.c:    ch->pcdata->board = &boards[i];
board.c:  if (!ch->pcdata->in_progress)
board.c:  switch (ch->pcdata->board->force_type)
board.c:        ch->pcdata->in_progress->to_list = str_dup(ch->pcdata->board->names);
board.c:        sprintf(buf, "Assumed default recipient: " BOLD "%s" NO_COLOR "\n\r", ch->pcdata->board->names);
board.c:        ch->pcdata->in_progress->to_list = str_dup(buf);
board.c:      if (!is_full_name(ch->pcdata->board->names, buf))
board.c:        strcat(buf, ch->pcdata->board->names);
board.c:        ch->pcdata->in_progress->to_list = str_dup(buf);
board.c:                BOLD YELLOW "New To" NO_COLOR " :  %s\n\r", ch->pcdata->board->names, ch->pcdata->in_progress->to_list);
board.c:        ch->pcdata->in_progress->to_list = str_dup(buf);
board.c:      if (is_full_name(ch->pcdata->board->names, buf))
board.c:        sprintf(buf, "You are not allowed to send notes to %s on this board. Try again.\n\r" BOLD YELLOW "To" NO_COLOR ":      ", ch->pcdata->board->names);
board.c:        ch->pcdata->in_progress->to_list = str_dup(buf);
board.c:  if (!ch->pcdata->in_progress)
board.c:    ch->pcdata->in_progress->subject = str_dup(buf);
board.c:              "Press Enter for default value for this board, " BOLD "%d" NO_COLOR " days.\n\r" BOLD YELLOW "Expire" NO_COLOR ":  ", ch->pcdata->board->purge_days);
board.c:      ch->pcdata->in_progress->expire = current_time + ch->pcdata->board->purge_days * 24L * 3600L;
board.c:      sprintf(buf, "This note will expire %s\r", ctime(&ch->pcdata->in_progress->expire));
board.c:  if (!ch->pcdata->in_progress)
board.c:    days = ch->pcdata->board->purge_days;
board.c:  ch->pcdata->in_progress->expire = expire;
board.c:  if (!ch->pcdata->in_progress)
board.c:  if (ch->pcdata->in_progress->text != NULL)
board.c:    strcpy(letter, ch->pcdata->in_progress->text);
board.c:    free_string(ch->pcdata->in_progress->text);
board.c:    ch->pcdata->in_progress->text = NULL; /* be sure we don't free it twice */
board.c:    free_note(ch->pcdata->in_progress);
board.c:    ch->pcdata->in_progress = NULL; /* important */
board.c:  ch->pcdata->in_progress->text = str_dup(letter);
board.c:  if (!ch->pcdata->in_progress)
board.c:      if (ch->pcdata->in_progress->text)
board.c:        write_to_buffer(d, ch->pcdata->in_progress->text, 0);
board.c:      if (board_number(ch->pcdata->board) < 4 && is_full_name("all", ch->pcdata->in_progress->to_list))
board.c:        sprintf(buf, "A new note has been posted by %s on board %d", ch->name, board_number(ch->pcdata->board) + 1);
board.c:      finish_note(ch->pcdata->board, ch->pcdata->in_progress);
board.c:      ch->pcdata->in_progress = NULL;
board.c:      free_note(ch->pcdata->in_progress);
board.c:      ch->pcdata->in_progress = NULL;
board.c:    REMOVE_BIT(ch->extra, EXTRA_AFK);
build.c:    if ( (d = ch->desc) == NULL )
build.c:   if ( ch->substate <= SUB_PAUSE )
build.c:      sprintf(buf,"Edit_buffer: illegal ch->substate (%d)", ch->substate);
build.c:   if ( !ch->editor )
build.c:   edit = ch->editor;
build.c:   if ( ch->substate == SUB_MPROG_EDIT || ch->substate == SUB_HELP_EDIT )
build.c:	    int substate = ch->substate;
build.c:	    ch->substate = SUB_RESTRICTED;
build.c:	    ch->substate = substate;
build.c:            if ( !ch->last_cmd )
build.c:            (*ch->last_cmd) ( ch, "" );
build.c:	if ( !ch->desc )
build.c:	if ( ch->substate == SUB_RESTRICTED )
build.c:	   bug( "NOT GOOD: start_editing: ch->substate == SUB_RESTRICTED", 0 );
build.c:	if ( ch->editor )
build.c:	ch->editor = edit;
build.c:	ch->desc->connected = CON_EDITING;
build.c:   if ( !ch->editor )
build.c:   for ( x = 0; x < ch->editor->numlines; x++ )
build.c:      strcpy( tmp, ch->editor->line[x] );
build.c:    DISPOSE( ch->editor );
build.c:    ch->editor = NULL;
build.c:    ch->dest_buf  = NULL;
build.c:    ch->substate  = SUB_NONE;
build.c:    if ( !ch->desc )
build.c:    ch->desc->connected = CON_PLAYING;
build.c:          sprintf(buf, "Do_help: %s tried '%s'", ch->name, argument);
build.c:    if ( !ch->desc )
build.c:    switch( ch->substate )
build.c:	  if ( (pHelp = ch->dest_buf) == NULL )
build.c:		bug( "hedit: sub_help_edit: NULL ch->dest_buf", 0 );
build.c:    ch->substate = SUB_HELP_EDIT;
build.c:    ch->dest_buf = pHelp;
chaos.c:        if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
chaos.c:        if (ch->move < 1000)
chaos.c:        ch->move -= 1000;
chaos.c:        level = ch->spl[RED_MAGIC] / 4;
chaos.c:        if (ch->mana < 1500)
chaos.c:        if (ch->in_room != NULL)
chaos.c:                if (IS_SET(ch->in_room->room_flags, ROOM_SAFE))
chaos.c:        if (arg[0] == '\0' && ch->fighting != NULL)
chaos.c:                victim = ch->fighting;
chaos.c:        ch->mana -= 1500;
chaos.c:                SET_BIT(ch->immune, IMM_SHIELD2);
chaos.c:        REMOVE_BIT(ch->immune, IMM_SHIELD2);
chaos.c:        if (ch->mana < 5000)
chaos.c:        ch->mana -= 5000;
combat.c:	if (IS_SET(ch->newbits, NEW_FIGHTDANCE)) {
combat.c:	REMOVE_BIT(ch->newbits, NEW_FIGHTDANCE);
combat.c:	SET_BIT(ch->newbits, NEW_FIGHTDANCE);
combat.c:                        ch->pcdata->stats[DRACONIAN_SPIKES]);
combat.c:                if (ch->fighting == NULL)
combat.c:                if (ch->pcdata->stats[DRACONIAN_SPIKES] < 1)
combat.c:                victim = ch->fighting;
combat.c:                dam = number_range(ch->pcdata->stats[DRACONIAN_SPIKES] * 20,
combat.c:                                   ch->pcdata->stats[DRACONIAN_SPIKES] * 40);
combat.c:                ch->pcdata->stats[DRACONIAN_SPIKES] = 0;
combat.c:                if (ch->position <= POS_FIGHTING)
combat.c:                if (ch->fight_timer > 0)
combat.c:                if (ch->pcdata->stats[DRACONIAN_SPIKES] >= 200)
combat.c:                                if (ch->exp >= 10000
combat.c:                                    && ch->pcdata->stats[DRACONIAN_SPIKES] <
combat.c:                                        ch->exp -= 10000;
combat.c:                                        ch->pcdata->stats[DRACONIAN_SPIKES]++;
combat.c:  if (ch->fighting == NULL || IS_NPC ((victim = ch->fighting)))
combat.c:  ch->hit -= damage;
combat.c:	   ch->pcdata->switchname, damage2);
combat.c:  oldl = ch->level;
combat.c:  ch->level = 12;
combat.c:  ch->level = oldl;
combat.c:  level = ch->spl[RED_MAGIC]/4;
combat.c:  if (ch->mana < 1500)
combat.c:  if (arg[0] == '\0' && ch->fighting != NULL) victim = ch->fighting;
combat.c:  ch->mana -= 1500;
combat.c:    if (!(arg2[0] == '\0') || ch->fighting != NULL)
combat.c:      if (arg2[0] == '\0') victim = ch->fighting;
combat.c:        if (ch->in_room != NULL)
combat.c:                if (IS_SET(ch->in_room->room_flags, ROOM_SAFE))
combat.c:        if (ch->position == POS_FIGHTING)
combat.c:        if (ch->move < 500)
combat.c:        if (victim->in_room == ch->in_room)
combat.c:                ch->move -= 500;
combat.c:        if (ch->move < 500)
combat.c:        if (ch->fight_timer > 0)
combat.c:        if (IS_SET(ch->act, AFF_HIDE))
combat.c:                REMOVE_BIT(ch->act, AFF_HIDE);
combat.c:                ch->move -= 500;
combat.c:                SET_BIT(ch->act, AFF_HIDE);
combat.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
combat.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
combat.c:                ch->hit += dam;
combat.c:                if (ch->hit >= ch->max_hit + 500)
combat.c:                        ch->hit = ch->max_hit + 500;
combat.c:                        ch->name, dam);
combat.c:        if (ch->in_room->sector_type == SECT_AIR)
combat.c:        if (!TIME_UP(ch, TIMER_ENTOMB) && ch->level < 12)
combat.c:        if ((objc = get_obj_list(ch, "walln", ch->in_room->contents)) != NULL)
combat.c:                obj_to_room(obj, ch->in_room);
combat.c:        if ((objc = get_obj_list(ch, "walls", ch->in_room->contents)) != NULL)
combat.c:                obj_to_room(obj, ch->in_room);
combat.c:        if ((objc = get_obj_list(ch, "walle", ch->in_room->contents)) != NULL)
combat.c:                obj_to_room(obj, ch->in_room);
combat.c:        if ((objc = get_obj_list(ch, "wallw", ch->in_room->contents)) != NULL)
combat.c:                obj_to_room(obj, ch->in_room);
combat.c:        ch->hit += ch->max_hit * 0.1;
combat.c:        if (ch->hit > ch->max_hit)
combat.c:                ch->hit = ch->max_hit;
combat.c:        if (ch->move < 1000)
combat.c:        if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
combat.c:        if (!IS_NPC(victim) && ch->move < victim->max_move)
combat.c:        if (victim->in_room == ch->in_room)
combat.c:        ch->move -= 1000;
combat.c:  if ( ch->level < skill_table[gsn_berserk].skill_level)
combat.c:  if ( number_percent( ) > ch->pcdata->learned[gsn_berserk] )
combat.c:                vch_next = vch->next;
combat.c:                if (vch->in_room == NULL)
combat.c:                if (!IS_NPC(vch) && vch->pcdata->chobj != NULL)
combat.c://                        if (vch->in_room == ch->in_room)
combat.c:                        if (vch->in_room->area == ch->in_room->area)
combat.c:                if (vch->in_room == ch->in_room && can_see(ch, vch))
combat.c:                        if (vch == NULL || vch->position <= POS_STUNNED)
comm.c:	vch_next = vch->next;
comm.c:    sprintf( log_buf, "Closing link to %s.", ch->name );
comm.c:      if (IS_SET(ch->extra, EXTRA_AFK)) REMOVE_BIT(ch->extra,EXTRA_AFK);
comm.c:      ch->desc = NULL;
comm.c:      ch->desc = NULL;
comm.c:  for (gch = char_list; gch != NULL; gch = gch->next)
comm.c:    if (IS_HEAD(gch,LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH))
comm.c:      REMOVE_BIT(gch->loc_hp[0], LOST_HEAD);
comm.c:      REMOVE_BIT(gch->affected_by, AFF_POLYMORPH);
comm.c:      REMOVE_BIT(gch->extra, EXTRA_OSWITCH);
comm.c:      gch->morph = str_dup("");
comm.c:      gch->pcdata->chobj = NULL;
comm.c:      gch->pcdata->obj_vnum = 0;
comm.c:    gch->hit = gch->max_hit;
comm.c:    gch->position = POS_STANDING;
comm.c:             fprintf (fp, "%d %s %s\n", d->descriptor, och->name, d->host);
comm.c:        if (IS_SET(ch->act, PLR_BRIEF5))
comm.c:          if (ch->amount_attacks_dealt > 0)
comm.c:              ch->amount_attacks_dealt, ch->amount_damage_dealt,
comm.c:              ch->amount_damage_dealt/ch->amount_attacks_dealt);
comm.c:          if (ch->amount_attacks_recieved > 0)
comm.c:              ch->amount_attacks_recieved, ch->amount_damage_recieved,
comm.c:              ch->amount_damage_recieved/ch->amount_attacks_recieved);
comm.c:          ch->amount_damage_dealt = 0;   
comm.c:          ch->amount_damage_recieved = 0;
comm.c:          ch->amount_attacks_dealt = 0;   
comm.c:          ch->amount_attacks_recieved = 0;
comm.c:        if (!IS_NPC(ch) && IS_SET(ch->pcdata->tempflag, TEMP_VT100))
comm.c:          sprintf(buf, "%s\e[%d;1H", VT_SAVECURSOR, ch->pcdata->vt100_size);
comm.c:	if (IS_SET(ch->act, PLR_PROMPT) && IS_EXTRA(ch, EXTRA_PROMPT))
comm.c:	else if ( IS_SET(ch->act, PLR_PROMPT))
comm.c:		sprintf(exp_str, "%d", ch->exp);
comm.c:		COL_SCALE(exp_str, ch, ch->exp, 1000);
comm.c:	    else if (ch->position == POS_FIGHTING)
comm.c:	        victim = ch->fighting;
comm.c:		sprintf(hit_str, "%d", ch->hit);
comm.c:		COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
comm.c:		sprintf(mana_str, "%d", ch->mana);
comm.c:		COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
comm.c:		sprintf(move_str, "%d", ch->move);
comm.c:		COL_SCALE(move_str, ch, ch->move, ch->max_move);
comm.c:                  cond, hit_str, mana_str, move_str, ch->fight_timer);
comm.c:		sprintf(hit_str, "%d", ch->hit);
comm.c:		COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
comm.c:		sprintf(mana_str, "%d", ch->mana);
comm.c:		COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
comm.c:		sprintf(move_str, "%d", ch->move);
comm.c:		COL_SCALE(move_str, ch, ch->move, ch->max_move);
comm.c:		sprintf(exp_str, "%d", ch->exp);
comm.c:		COL_SCALE(exp_str, ch, ch->exp, 1000);
comm.c:                  exp_str, hit_str, mana_str, move_str, ch->fight_timer );
comm.c:        if (!IS_NPC(ch) && IS_SET(ch->pcdata->tempflag, TEMP_VT100))
comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
comm.c:	if ( IS_SET(ch->act, PLR_DENY))
comm.c:            if (ch->pcdata->denied > current_time)
comm.c:              sprintf( log_buf, "Denying access to %s@%s.", argument, ch->lasthost );
comm.c:	    strcmp( argument, ch->pcdata->pwd ) &&
comm.c:	    strcmp( crypt ( argument, ch->pcdata->pwd ),ch->pcdata->pwd )))
comm.c:	    strcmp( crypt ( argument, ch->pcdata->pwd ), ch->pcdata->pwd )))
comm.c:	if (ch->level > 1)
comm.c:	    sprintf(kav,ch->pcdata->switchname);
comm.c:            if (IS_SET(ch->act, PLR_DENY))
comm.c:              if (ch->pcdata->denied < current_time)
comm.c:                REMOVE_BIT(ch->act, PLR_DENY);
comm.c:                sprintf(log_buf, "Removing deny flag on %s.", ch->name);
comm.c:	if (ch->lasthost != NULL) free_string(ch->lasthost);
comm.c:	if (ch->desc != NULL && ch->desc->host != NULL)
comm.c:        ch->lasthost = str_dup(ch->desc->host);
comm.c:	    ch->lasthost = str_dup("(unknown)");
comm.c:	free_string(ch->lasttime);
comm.c:	ch->lasttime = str_dup( strtime );
comm.c:	sprintf( log_buf, "%s@%s has connected.",ch->name, ch->lasthost );
comm.c:	if (ch->level < 4 && ch->trust < 4)
comm.c:	ch->trust = 0;
comm.c:	if ( ch->level > 3 && ch->trust == 0)
comm.c:	    ch->level = 3;
comm.c:	    if ( ch->level > MAX_LEVEL )
comm.c:		ch->level = MAX_LEVEL;
comm.c:	    if ( ch->trust > MAX_LEVEL)
comm.c:		ch->trust = MAX_LEVEL;
comm.c:	ch->next	= char_list;
comm.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
comm.c:	if ( ch->level == 0 )
comm.c:            ch->pcdata->awins        = 0; /* arena wins           */
comm.c:            ch->pcdata->alosses      = 0; /* arena losses         */
comm.c:		ch->pcdata->board = &boards[0];
comm.c:	    ch->challenger = NULL;
comm.c:	    ch->level	= 1;
comm.c:	    ch->exp	= 0;
comm.c:	    ch->hit	= ch->max_hit;
comm.c:	    ch->mana	= ch->max_mana;
comm.c:	    ch->move	= ch->max_move;
comm.c:            ch->special = 0;
comm.c:	    set_switchname(ch, ch->name);
comm.c:	else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
comm.c:	    if (ch->in_room != NULL) char_to_room( ch, ch->in_room );
comm.c:	else if ( ch->in_room != NULL )
comm.c:	    char_to_room( ch, ch->in_room );
comm.c:        ch->pcdata->time_tick = 0; // resets on a _true_ login
comm.c:        ch->pcdata->safe_counter = 5; // a few good ticks.
comm.c:        if (ch->level > 6) ; /* no info */
comm.c:        else if (IS_SET(ch->pcdata->jflags, JFLAG_SETLOGIN)) login_message(ch);
comm.c:  	  if (!ragnarok) sprintf(buf,"#g%s #7enters #RAge of Heroes#n", ch->name );
comm.c:          else sprintf(buf,"#g%s #7enters #RAge of Heroes #y(#0Ragnarok#y).#n", ch->name );
comm.c:	ch->fight_timer = 0;
comm.c:       for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
comm.c:		ch->name, echo_off_str );
comm.c:	pwdnew = crypt ( argument, ch->name );
comm.c:	free_string( ch->pcdata->pwd );
comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
comm.c:  if ( strcmp( crypt ( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
comm.c:        ch->race = race;
comm.c:	    ch->perm_stat[i] = pc_race_table[race].stats[i];
comm.c://	ch->affected_by = ch->affected_by|race_table[race].aff;
comm.c://	ch->imm_flags	= ch->imm_flags|race_table[race].imm;
comm.c://	ch->res_flags	= ch->res_flags|race_table[race].res;
comm.c://	ch->vuln_flags	= ch->vuln_flags|race_table[race].vuln;
comm.c://	ch->form	= race_table[race].form;
comm.c://	ch->parts	= race_table[race].parts;
comm.c://	ch->pcdata->points = pc_race_table[race].points;
comm.c:	ch->size = pc_race_table[race].size;
comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
comm.c:	case 'y': case 'Y': SET_BIT(ch->act,PLR_ANSI);    break;
comm.c:	ch->pcdata->perm_str=number_range(10,16);
comm.c:        ch->pcdata->perm_int=number_range(10,16);
comm.c:        ch->pcdata->perm_wis=number_range(10,16);
comm.c:        ch->pcdata->perm_dex=number_range(10,16);
comm.c:	ch->pcdata->perm_con=number_range(10,16);
comm.c:	ch->class = 0;
comm.c:	sprintf( log_buf, "%s@%s new player.",ch->name, d->host );
comm.c:	ch->next	= char_list;
comm.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
comm.c:	if ( ch->level == 0 )
comm.c:            ch->pcdata->awins        = 0; /* arena wins           */
comm.c:            ch->pcdata->alosses      = 0; /* arena losses         */
comm.c:		ch->pcdata->board = &boards[0];
comm.c:	    ch->challenger = NULL;
comm.c:	    ch->level	= 3;
comm.c:            ch->generation = 6;
comm.c:            ch->stance[19] = -1;
comm.c:            ch->stance[20] = -1;
comm.c:            ch->stance[21] = -1;
comm.c:            ch->stance[22] = -1;
comm.c:            ch->stance[23] = -1;
comm.c:	    ch->exp	= 0;
comm.c:	    ch->hit	= ch->max_hit;
comm.c:	    ch->mana	= ch->max_mana;
comm.c:	    ch->move	= ch->max_move;
comm.c:            ch->special = 0;
comm.c:	    set_switchname(ch, ch->name);
comm.c:  //                          ch->pcdata->buffer = new_buf();
comm.c:    //                        clear_buf(ch->pcdata->buffer);}
comm.c:	else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
comm.c:	    if (ch->in_room != NULL) char_to_room( ch, ch->in_room );
comm.c:	else if ( ch->in_room != NULL )
comm.c:	    char_to_room( ch, ch->in_room );
comm.c:	sprintf(buf,"#7A #Rnew player#7 named #g%s #7enters #RAge of Heroes.#n", ch->name );
comm.c:	ch->fight_timer = 0;
comm.c:        ch->pcdata->safe_counter = 0;
comm.c:        ch->pcdata->revision = CURRENT_REVISION;
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	if ( !IS_NPC(ch) && ( !fConn || ch->desc == NULL )
comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:                if (ch->desc != NULL)
comm.c:                  close_socket2(ch->desc, TRUE);
comm.c:		ch->desc	 = d;
comm.c:		ch->timer	 = 0;
comm.c:	    	if (IS_NPC(ch) || ch->pcdata->obj_vnum == 0)
comm.c:		sprintf( log_buf, "%s@%s reconnected.",ch->name, ch->lasthost );
comm.c: 		if (ch->pcdata->in_progress)
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	&& ( !fConn || ch->desc == NULL )
comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:		ch->desc	 = d;
comm.c:		ch->timer	 = 0;
comm.c:		sprintf( log_buf, "%s@%s kicking off old link.", ch->name, ch->lasthost );
comm.c:    ||   ch->desc == NULL
comm.c:    ||   (ch->desc->connected != CON_PLAYING && ch->desc->connected != CON_EDITING)
comm.c:    ||   ch->was_in_room == NULL 
comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
comm.c:    ch->timer = 0;
comm.c:    char_to_room( ch, ch->was_in_room );
comm.c:    ch->was_in_room	= NULL;
comm.c:    if ( txt != NULL && ch->desc != NULL )
comm.c:	write_to_buffer( ch->desc, txt, strlen(txt) );
comm.c:  if (txt != NULL && ch->desc != NULL)
comm.c:    write_to_buffer( ch->desc, txt, 0);
comm.c:	if ( ch == NULL || ch->in_room == NULL)
comm.c:    to = ch->in_room->people;
comm.c:	if ( vch == NULL || vch->in_room == NULL)
comm.c:	to = vch->in_room->people;
comm.c:		if (to->in_room == ch->in_room && 
comm.c:    	if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_room != NULL &&
comm.c:	    	ch->in_room == to->in_room)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_obj != NULL &&
comm.c:	    	ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
comm.c:	    if (to->in_room != ch->in_room && familiar != NULL &&
comm.c:		familiar->in_room == ch->in_room)
comm.c:    if ( ch == NULL || ch->in_room == NULL) return;
comm.c:    to = ch->in_room->people;
comm.c:        if ( vch == NULL || vch->in_room == NULL) return;
comm.c:        to = vch->in_room->people;
comm.c:                if (to->in_room == ch->in_room &&
comm.c:        if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
comm.c:            if (!IS_NPC(ch) && ch->pcdata->chobj != NULL &&
comm.c:                ch->pcdata->chobj->in_room != NULL &&
comm.c:                ch->in_room == to->in_room)
comm.c:            if (!IS_NPC(ch) && ch->pcdata->chobj != NULL &&
comm.c:                ch->pcdata->chobj->in_obj != NULL &&
comm.c:                ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
comm.c:            if (to->in_room != ch->in_room && familiar != NULL &&
comm.c:                familiar->in_room == ch->in_room)
comm.c:  if (ch->pcdata == NULL )
comm.c:  if ( ch->position == POS_FIGHTING && ch->cprompt[0] == '\0' )
comm.c:    if ( ch->prompt[0] == '\0' )
comm.c:  else if ( ch->position != POS_FIGHTING && ch->prompt[0] == '\0' )
comm.c:  if ( ch->position == POS_FIGHTING && is_fighting )
comm.c:        sprintf( buf2, "%d", ch->hit );
comm.c:        COL_SCALE(buf2, ch, ch->hit, ch->max_hit);
comm.c:        sprintf( buf2, "%d", ch->max_hit );
comm.c:        sprintf( buf2, "%d", ch->mana                              );
comm.c:        COL_SCALE(buf2, ch, ch->mana, ch->max_mana);
comm.c:        sprintf( buf2, "%d", ch->max_mana                          );
comm.c:        sprintf( buf2, "%d", ch->move                              ); 
comm.c:        COL_SCALE(buf2, ch, ch->move, ch->max_move);
comm.c:        sprintf( buf2, "%d", ch->max_move                          );
comm.c:        sprintf( buf2, "%d", ch->exp                               );
comm.c:        COL_SCALE(buf2, ch, ch->exp, 1000);
comm.c:        sprintf( buf2, "%d", ch->pcdata->quest                     );
comm.c:        if ( ( victim = ch->fighting ) == NULL )
comm.c:        if ( ( victim = ch->fighting ) == NULL )
comm.c:         if ( ( victim = ch->fighting ) == NULL )
comm.c:         if ( ( victim = ch->fighting ) == NULL )
comm.c:         sprintf(buf2, "%d", ch->fight_timer			  );
comm.c:         if (!ch->fighting) sprintf(buf2, "N/A");
comm.c:           if (ch->fighting->max_hit != 0)
comm.c:             CHAR_DATA *och = ch->fighting;
comm.c:               if (och->hit > (och->max_hit * k / 10))
comm.c:         if (!ch->fighting) sprintf(buf2, "N/A");
comm.c:           if ((ch->fighting->hit*100/ch->fighting->max_hit) < 25)
comm.c:           else if ((ch->fighting->hit*100/ch->fighting->max_hit) < 50)
comm.c:           else if ((ch->fighting->hit*100/ch->fighting->max_hit) < 75)
comm.c:           else if ((ch->fighting->hit*100/ch->fighting->max_hit) < 100)
comm.c:           if (ch->fighting->max_hit != 0)
comm.c:             CHAR_DATA *och = ch->fighting;
comm.c:               if (och->hit > (och->max_hit * k / 10))
const.c:             (!str_prefix(slay_table[i].owner,ch->name)  &&
const.c:              !str_prefix(slay_table[i].owner, ch->name) )
db.c:  ch->name = &str_empty[0];
db.c:  ch->short_descr = &str_empty[0];
db.c:  ch->long_descr = &str_empty[0];
db.c:  ch->description = &str_empty[0];
db.c:  ch->morph = &str_empty[0];
db.c:  ch->createtime = &str_empty[0];
db.c:  ch->lasthost = &str_empty[0];
db.c:  ch->lasttime = &str_empty[0];
db.c:  ch->pload = &str_empty[0];
db.c:  ch->prompt = &str_empty[0];
db.c:  ch->cprompt = &str_empty[0];
db.c:  ch->hunting = &str_empty[0];
db.c:  ch->tracking = FALSE;
db.c:  ch->logon = current_time;
db.c:  ch->armor = 100;
db.c:  ch->position = POS_STANDING;
db.c:  ch->practice = 0;
db.c:  ch->hit = 1000;
db.c:  ch->max_hit = 1000;
db.c:  ch->mana = 1500;
db.c:  ch->max_mana = 1500;
db.c:  ch->move = 1500;
db.c:  ch->max_move = 1500;
db.c:  ch->master = NULL;
db.c:  ch->leader = NULL;
db.c:  ch->fighting = NULL;
db.c:  ch->mount = NULL;
db.c:  ch->damcap[0] = 1000;
db.c:  ch->damcap[1] = 0;
db.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
db.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
db.c:  free_string(ch->name);
db.c:  free_string(ch->short_descr);
db.c:  free_string(ch->long_descr);
db.c:  free_string(ch->description);
db.c:  free_string(ch->morph);
db.c:  free_string(ch->createtime);
db.c:  free_string(ch->lasttime);
db.c:  free_string(ch->lasthost);
db.c:  free_string(ch->pload);
db.c:  free_string(ch->prompt);
db.c:  free_string(ch->cprompt);
db.c:  free_string(ch->hunting);
db.c:  if (ch->pcdata != NULL)
db.c:    for (ali = ch->pcdata->alias; ali; ali = ali_next)
db.c:    for (quest = ch->pcdata->quests; quest; quest = quest_next)
db.c:    free_string(ch->pcdata->retaliation);
db.c:    free_string(ch->pcdata->switchname);
db.c:    free_string(ch->pcdata->last_decap[0]);
db.c:    free_string(ch->pcdata->last_decap[1]);
db.c:    free_string(ch->pcdata->logoutmessage);
db.c:    free_string(ch->pcdata->avatarmessage);
db.c:    free_string(ch->pcdata->loginmessage);
db.c:    free_string(ch->pcdata->decapmessage);
db.c:    free_string(ch->pcdata->tiemessage);
db.c:    free_string(ch->pcdata->last_global);
db.c:    free_string(ch->pcdata->pwd);
db.c:    free_string(ch->pcdata->bamfin);
db.c:    free_string(ch->pcdata->bamfout);
db.c:    free_string(ch->pcdata->title);
db.c:    free_string(ch->pcdata->conception);
db.c:    free_string(ch->pcdata->parents);
db.c:    free_string(ch->pcdata->cparents);
db.c:    free_string(ch->pcdata->marriage);
db.c:    ch->pcdata->next = pcdata_free;
db.c:    pcdata_free = ch->pcdata;
db.c:  ch->next = char_free;
db.c:    fprintf(fp, "[%5d] %s: %s\n", ch->in_room ? ch->in_room->vnum : 0, ch->name, str);
desc_map.c:  if (ch->level > 6)
desc_map.c:      ch->in_room->name, ch->in_room->vnum);
desc_map.c:    sprintf( buf, "#0+-----------+#n %s\n\r", ch->in_room->name);
desc_map.c:    if (y == 0 && IS_SET(ch->act, PLR_AUTOEXIT))  // the autoexits
desc_map.c:  map[x][y].vnum = ch->in_room->vnum;
desc_map.c:  map_exits( ch, ch->in_room, x, y, 0 );
diviner.c:    chroom = ch->in_room;
diviner.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
diviner.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
diviner.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
diviner.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
diviner.c:    if (!IS_NPC(victim)) ch->fight_timer += 5;
diviner.c:	spell_identify( skill_lookup( "identify" ), ch->level, ch, obj );
enchanter.c:	if ( ch->practice < 1500)
enchanter.c:		 ch->practice -= 1500;
enchanter.c:	if ( ch->practice < 1500)
enchanter.c:                ch->practice -= 1500;
enchanter.c:        obj->value[1] += 10 - ch->generation;
enchanter.c:        obj->value[2] += 10 - ch->generation;
enhancement.c:	if (IS_SET(ch->newbits, NEW_DARKTENDRILS)) {
enhancement.c:	REMOVE_BIT(ch->newbits, NEW_DARKTENDRILS);
enhancement.c:	SET_BIT(ch->newbits, NEW_DARKTENDRILS);
enhancement.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
enhancement.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
enhancement.c:    if (IS_SET(ch->newbits, THIRD_HAND) && IS_SET(ch->newbits, FOURTH_HAND))
enhancement.c:    if (!IS_SET(ch->newbits, FOURTH_HAND))
enhancement.c:	SET_BIT(ch->newbits, FOURTH_HAND);
enhancement.c:	SET_TIMER(ch, TIMER_FOURTH_ARM_GOING, dice(ch->generation, 6) );
enhancement.c:    if (!IS_SET(ch->newbits, THIRD_HAND))
enhancement.c:	SET_BIT(ch->newbits, THIRD_HAND);
enhancement.c:	SET_TIMER(ch, TIMER_THIRD_ARM_GOING, dice(ch->generation, 6) );
fight.c:  for (ch = char_list; ch != NULL; ch = ch->next)
fight.c:    ch_next = ch->next;
fight.c:      if (ch->fight_timer > 0) ch->fight_timer--;
fight.c:    if ((victim = ch->fighting) == NULL || ch->in_room == NULL)
fight.c:      if (ch->fight_timer < 9) ch->fight_timer = 10;
fight.c:      else if (ch->fight_timer < 25) ch->fight_timer += 3;
fight.c:    if (IS_AWAKE(ch) && IS_AWAKE(victim) && ch->in_room == victim->in_room)
fight.c:    if ((victim = ch->fighting) == NULL)
fight.c:    for (rch = ch->in_room->people; rch != NULL; rch = rch_next)
fight.c:      rch_next = rch->next_in_room;
fight.c:      if (IS_AWAKE(rch) && rch->fighting == NULL)
fight.c:        if ((mount = rch->mount) != NULL)
fight.c:          if (rch->pIndexData == ch->pIndexData || number_bits(3) == 0)
fight.c:            for (vch = ch->in_room->people; vch; vch = vch->next)
fight.c:  if (ch->position < POS_SLEEPING)
fight.c:  if (!IS_NPC(ch) && ch->stance[0] > 0 && number_percent() == 5)
fight.c:    int stance = ch->stance[0];
fight.c:    if (ch->stance[stance] >= 200)
fight.c:    if (IS_NPC(ch) && ch->spec_fun)
fight.c:      (*ch->spec_fun) (ch, "midround");
fight.c:  if (ch->fighting != victim || dt == gsn_backstab || dt == gsn_garotte || dt == gsn_headbutt || dt == gsn_circle)
fight.c:      chance = (ch->wpn[tempnum]) * 0.5;
fight.c:      chance = (ch->wpn[0]) * 0.5;
fight.c:    if (ch->fighting != victim)
fight.c:  if (IS_ITEMAFF(victim, ITEMA_CHAOSSHIELD) && ch->position == POS_FIGHTING)
fight.c:    if (ch->level >= 50)
fight.c:    if (ch->level >= 100)
fight.c:    if (ch->level >= 500)
fight.c:    if (ch->level >= 1000)
fight.c:    if (ch->level >= 1500)
fight.c:    if (ch->level >= 2000)
fight.c:    if (ch->pIndexData->extra_attack > 20)
fight.c:      count += ch->pIndexData->extra_attack;
fight.c:    if (IS_STANCE(ch, STANCE_VIPER) && number_percent() < ch->stance[STANCE_VIPER] * 0.5)
fight.c:    else if (IS_STANCE(ch, STANCE_MANTIS) && number_percent() < ch->stance[STANCE_MANTIS] * 0.5)
fight.c:    else if (IS_STANCE(ch, STANCE_TIGER) && number_percent() < ch->stance[STANCE_TIGER] * 0.5)
fight.c:    else if (IS_STANCE(ch, STANCE_WOLF) && number_percent() < ch->stance[STANCE_WOLF] * 0.5)
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_SPEED) && number_percent() < ch->stance[(ch->stance[0])] * 0.5)
fight.c:    if (IS_STANCE(ch, STANCE_VIPER) && number_percent() < ch->stance[STANCE_VIPER] * 0.5)
fight.c:    else if (IS_STANCE(ch, STANCE_MANTIS) && number_percent() < ch->stance[STANCE_MANTIS] * 0.5)
fight.c:    else if (IS_STANCE(ch, STANCE_TIGER) && number_percent() < ch->stance[STANCE_TIGER] * 0.5)
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_SPEED) && number_percent() < ch->stance[(ch->stance[0])] * 0.5)
fight.c:  if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
fight.c:    if (IS_AFFECTED(ch, AFF_PEACE) && ch->fighting != NULL)
fight.c:      REMOVE_BIT(ch->affected_by, AFF_PEACE);
fight.c:    if (IS_SET(ch->act, PLR_RIGHTHAND))
fight.c:    else if (IS_SET(ch->act, PLR_LEFTHAND))
fight.c:      dt += ch->pIndexData->natural_attack;
fight.c:  if (ch->wpn[dt - 1000] > 5)
fight.c:    level = (ch->wpn[dt - 1000] / 5);
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_3))
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_2))
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_1))
fight.c:    dam = number_range(ch->level / 2, ch->level * 3 / 2);
fight.c:    dam = dam + (dam * (UMIN(350, (ch->wpn[dt - 1000] + 1)) / 60));
fight.c:    if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_3) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 1.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_2) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 1.0 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_1) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 0.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_3) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 0.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_2) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 0.3 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_1) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 0.1 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  if (IS_NPC(ch) && ch->pIndexData->dam_modifier > 3)
fight.c:  else if (IS_NPC(ch) && ch->pIndexData->dam_modifier > 0)
fight.c:    dam *= ch->pIndexData->dam_modifier;
fight.c:  if (dam > ch->damcap[DAM_CAP])
fight.c:    dam = number_range((ch->damcap[DAM_CAP] - 200), (ch->damcap[DAM_CAP] + 100));
fight.c:  else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_BYPASS))
fight.c:    if (ch->generation == 1)
fight.c:    if (ch->generation == 2)
fight.c:    if (ch->generation == 3)
fight.c:    if (ch->generation == 4)
fight.c:    if (ch->generation == 5)
fight.c:    if (ch->stance[0] == STANCE_BULL)
fight.c:    else if (ch->stance[0] == STANCE_DRAGON)
fight.c:    else if (ch->stance[0] == STANCE_WOLF)
fight.c:    else if (ch->stance[0] == STANCE_TIGER)
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMCAP_3))
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMCAP_2))
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMCAP_1))
fight.c:  if (!IS_NPC(victim) && ch->stance[0] != STANCE_MONKEY)
fight.c:    if (IS_NPC(ch) || ch->stance[0] != STANCE_MONKEY)
fight.c:  if (ch->level >= LEVEL_BUILDER)
fight.c:  ch->damcap[DAM_CAP] = max_dam;
fight.c:  ch->damcap[DAM_CHANGE] = 0;
fight.c:  if (ch->damcap[DAM_CHANGE] == 1)
fight.c:  if (dam > ch->damcap[0])
fight.c:    dam = ch->damcap[0];
fight.c:      if (ch->fighting == NULL)
fight.c:      if (IS_NPC(ch) && IS_NPC(victim) && IS_AFFECTED(victim, AFF_CHARM) && victim->master != NULL && victim->master->in_room == ch->in_room && number_bits(3) == 0)
fight.c:      REMOVE_BIT(ch->affected_by, AFF_HIDE);
fight.c:      if (IS_NPC(ch) && number_percent() < ch->level * 0.5)
fight.c:      if (IS_NPC(ch) && number_percent() < ch->level * 0.5)
fight.c:    if (!IS_NPC(ch) && IS_SET(ch->act, PLR_BRIEF5))
fight.c:      ch->amount_damage_dealt += dam;
fight.c:      ch->amount_attacks_dealt++;
fight.c:      for (quest = ch->pcdata->quests; quest && !found; quest = quest->next)
fight.c:      ch->mkill += 1;
fight.c:      if (ch->level == 1 && ch->mkill > 4)
fight.c:        ch->level = 2;
fight.c:      ch->pcdata->quest += victim->pcdata->bounty;
fight.c:    if (IS_SET(ch->act, PLR_AUTOLOOT))
fight.c:      if (IS_SET(ch->act, PLR_AUTOSAC))
fight.c:  if (!ch->in_room)
fight.c:    if (ch->pcdata->safe_counter > 0)
fight.c:    if (IS_AFFECTED(ch, AFF_PEACE) && ch->fighting != NULL)
fight.c:      REMOVE_BIT(ch->affected_by, AFF_PEACE);
fight.c:  if (IS_SET(ch->in_room->room_flags, ROOM_SAFE) && !ragnarok)
fight.c:      chance -= (ch->wpn[dt - 1000] * 0.1);
fight.c:      chance -= (ch->level * 0.2);
fight.c:      chance -= (ch->wpn[0] * 0.1);
fight.c:      chance -= (ch->level * 0.2);
fight.c:    if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:  if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:    chance -= (ch->wpn[dt - 1000] * 0.1);
fight.c:    chance -= (ch->level * 0.2);
fight.c:  if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:  if (ch->fighting != NULL)
fight.c:  ch->fighting = victim;
fight.c:  ch->position = POS_FIGHTING;
fight.c:  ch->damcap[DAM_CHANGE] = 1;
fight.c:  for (fch = char_list; fch != NULL; fch = fch->next)
fight.c:    if (fch == ch || (fBoth && fch->fighting == ch))
fight.c:      fch->fighting = NULL;
fight.c:      fch->position = POS_STANDING;
fight.c:  if (ch->in_room == NULL)
fight.c:    name = ch->short_descr;
fight.c:    corpse->value[2] = ch->pIndexData->vnum;
fight.c:    name = ch->name;
fight.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
fight.c:  obj_to_room(corpse, ch->in_room);
fight.c:  if (ch->in_room == NULL)
fight.c:    name = IS_NPC(ch) ? ch->short_descr : ch->name;
fight.c:      obj->value[1] = ch->pIndexData->vnum;
fight.c:      ch->pcdata->chobj = obj;
fight.c:      if (ch->pcdata->chobj != NULL)
fight.c:        ch->pcdata->chobj->chobj = NULL;
fight.c:      ch->pcdata->chobj = obj;
fight.c:    obj_to_room(obj, ch->in_room);
fight.c:  if ((IS_NPC(ch) && (mount = ch->mount) == NULL) || victim == ch)
fight.c:  for (gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room)
fight.c:  lch = (ch->leader != NULL) ? ch->leader : ch;
fight.c:  for (gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room)
fight.c:    if (gch != NULL && gch->desc != NULL)
fight.c:      if (gch->desc->out_compress)
fight.c:    if (!IS_NPC(gch) && gch->pcdata->time_tick > 49)
fight.c:      xp_modifier += gch->pcdata->time_tick / 5;
fight.c:    if (!IS_NPC(gch) && IS_SET(gch->pcdata->tempflag, TEMP_EDGE))
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4))
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4))
fight.c:    if ((get_age(gch) - 17) > 2 && ch->level < 3)
fight.c:    if (gch->exp > 2000000000)
fight.c:    if ((get_age(gch) - 17) >= 2 && !IS_SET(gch->pcdata->jflags, JFLAG_POLICY))
fight.c:   gch->pcgold += gold;
fight.c:   gch->pcsilver += silver;
fight.c:   gch->pccopper += copper;
fight.c:    ch->pcgold += gold;
fight.c:    ch->pcsilver += silver;
fight.c:    ch->pccopper += copper;
fight.c:    if ((mount = gch->mount) != NULL)
fight.c:    gch->pcdata->score[SCORE_TOTAL_LEVEL] += victim->level;
fight.c:    if (victim->level > gch->pcdata->score[SCORE_HIGH_LEVEL])
fight.c:      gch->pcdata->score[SCORE_HIGH_LEVEL] += victim->level;
fight.c:    gch->pcdata->score[SCORE_TOTAL_XP] += xp;
fight.c:    if (xp > gch->pcdata->score[SCORE_HIGH_XP])
fight.c:      gch->pcdata->score[SCORE_HIGH_XP] += xp;
fight.c:   gch->pcgold += gold;
fight.c:   gch->pcsilver += silver;
fight.c:   gch->pccopper += copper;
fight.c:    if (!IS_SET(ch->act, PLR_BRIEF5))
fight.c:      if (!(IS_SET(ch->act, PLR_BRIEF2) && (dam == 0 || dt == skill_lookup("lightning bolt") ||
fight.c:  if (IS_NPC(ch) && ch->desc == NULL)
fight.c:  if (IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim)
fight.c:  if (ch->position == POS_FIGHTING)
fight.c:    ch->fight_timer += 3;
fight.c:  else if (!IS_AWAKE(victim) || IS_NPC(ch) || number_percent() < ch->pcdata->learned[gsn_backstab])
fight.c:  if ((victim = ch->fighting) == NULL)
fight.c:    if (ch->position == POS_FIGHTING)
fight.c:      ch->position = POS_STANDING;
fight.c:  if (ch->move <= 0)
fight.c:  if (IS_SET(ch->flag2, AFF_TOTALBLIND))
fight.c:  was_in = ch->in_room;
fight.c:    if ((now_in = ch->in_room) == was_in)
fight.c:    ch->in_room = was_in;
fight.c:    ch->in_room = now_in;
fight.c:  if (ch->fighting == victim)
fight.c:  if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_rescue])
fight.c:  if (!IS_NPC(ch) && ch->level < skill_table[gsn_kick].skill_level)
fight.c:  if ((victim = ch->fighting) == NULL)
fight.c:  if ((IS_NPC(ch) && ch->level < 1800))
fight.c:  if ((IS_NPC(ch)) || number_percent() < ch->pcdata->learned[gsn_kick])
fight.c:    dam = dam + (dam * ((ch->wpn[0] + 1) / 100));
fight.c:    stance = ch->stance[0];
fight.c:      dam *= (ch->stance[STANCE_MONKEY] + 1) / 200;
fight.c:    else if (IS_STANCE(ch, STANCE_BULL) && ch->stance[STANCE_BULL] > 100)
fight.c:      dam += dam * (ch->stance[STANCE_BULL] / 100);
fight.c:    else if (IS_STANCE(ch, STANCE_DRAGON) && ch->stance[STANCE_DRAGON] > 100)
fight.c:      dam += dam * (ch->stance[STANCE_DRAGON] / 100);
fight.c:    else if (IS_STANCE(ch, STANCE_WOLF) && ch->stance[STANCE_WOLF] > 100)
fight.c:      dam += dam * (ch->stance[STANCE_WOLF] / 100);
fight.c:    else if (IS_STANCE(ch, STANCE_TIGER) && ch->stance[STANCE_TIGER] > 100)
fight.c:      dam += dam * (ch->stance[STANCE_TIGER] / 100);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_3) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 3 * (ch->stance[(ch->stance[0])] / 100);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_2) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * 2 * (ch->stance[(ch->stance[0])] / 100);
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0] + 6)], STANCEPOWER_DAMAGE_1) && ch->stance[(ch->stance[0])] > 100)
fight.c:      dam += dam * (ch->stance[(ch->stance[0])] / 100);
fight.c:    else if (ch->stance[0] > 0 && ch->stance[stance] < 100)
fight.c:  if (ch->level < skill_table[gsn_punch].skill_level)
fight.c:  if (IS_NPC(ch) || number_percent() < ch->pcdata->learned[gsn_punch])
fight.c:    dam = dam + (dam * (ch->wpn[0] / 100));
fight.c:  if (ch->level < skill_table[gsn_berserk].skill_level)
fight.c:  if (number_percent() > ch->pcdata->learned[gsn_berserk])
fight.c:    vch_next = vch->next;
fight.c:    if (vch->in_room == NULL)
fight.c:    if (vch->in_room == ch->in_room)
fight.c:      if ((mount = ch->mount) != NULL)
fight.c:  if (ch->level < skill_table[gsn_berserk].skill_level)
fight.c:  if (number_percent() > ch->pcdata->learned[gsn_berserk])
fight.c:    vch_next = vch->next;
fight.c:    if (vch->in_room == NULL)
fight.c:    if (!IS_NPC(vch) && vch->pcdata->chobj != NULL)
fight.c:    if (vch->in_room == ch->in_room)
fight.c:      if ((mount = ch->mount) != NULL)
fight.c:  if (!IS_NPC(ch) && ch->pcdata->learned[gsn_hurl] < 1)
fight.c:  if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_hurl])
fight.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
fight.c:    dam = number_range(ch->level, (ch->level * 4));
fight.c:      ch->mkill = ch->mkill + 1;
fight.c:    dam = number_range(ch->level, (ch->level * 4));
fight.c:      ch->mkill = ch->mkill + 1;
fight.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir]) != NULL && pexit_rev->to_room == ch->in_room && pexit_rev->keyword != NULL)
fight.c:      dam = number_range(ch->level, (ch->level * 6));
fight.c:        ch->mkill = ch->mkill + 1;
fight.c:    dam = number_range(ch->level, (ch->level * 2));
fight.c:      ch->mkill = ch->mkill + 1;
fight.c:  if (!IS_NPC(ch) && ch->level < skill_table[gsn_disarm].skill_level)
fight.c:  if ((victim = ch->fighting) == NULL)
fight.c:  percent = number_percent() + victim->level - ch->level;
fight.c:  else if (IS_NPC(ch) || percent < ch->pcdata->learned[gsn_disarm] * 2 / 3)
fight.c:  if (ch->in_room != NULL)
fight.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ARENA))
fight.c:    ch->fight_timer = 0;
fight.c:  if (!str_cmp(ch->pcdata->last_decap[0], victim->name) && str_cmp(ch->pcdata->retaliation, victim->name))
fight.c:  if (ch->level > 6 && can_decap == FALSE)
fight.c:    ch->pcdata->mean_paradox_counter++;
fight.c:    ch->pcdata->bounty += number_range(60, 120);
fight.c:    sprintf(buf, "#P%s #owas torn to pieces by #R%s #c(#0Paradox Counter#c)#n", victim->name, ch->name);
fight.c:    if (ch->pcdata->mean_paradox_counter > 2)
fight.c:      ch->pcdata->mean_paradox_counter = 0;
fight.c:    ch->pcdata->quest += victim->pcdata->bounty;
fight.c:    for (quest = ch->pcdata->quests; quest && !found; quest = quest->next)
fight.c:  ch->exp += victim->exp / 2;
fight.c:  ch->hit += victim->max_hit * 0.1;
fight.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
fight.c:  free_string(ch->pcdata->last_decap[1]);
fight.c:  ch->pcdata->last_decap[1] = str_dup(ch->pcdata->last_decap[0]);
fight.c:  free_string(ch->pcdata->last_decap[0]);
fight.c:  ch->pcdata->last_decap[0] = str_dup(victim->name);
fight.c:  victim->pcdata->retaliation = str_dup(ch->name);
fight.c:  if (!str_cmp(ch->pcdata->retaliation, victim->name))
fight.c:    free_string(ch->pcdata->retaliation);
fight.c:    ch->pcdata->retaliation = str_dup("Noone");
fight.c:    ch->fight_timer += 10;
fight.c:  if (ch->pcdata->mean_paradox_counter > 0)
fight.c:    ch->pcdata->mean_paradox_counter--;
fight.c:  ch->pkill = ch->pkill + 1;
fight.c:  sprintf(log_buf, "%s decapitated by %s at %d.", victim->pcdata->switchname, ch->pcdata->switchname, victim->in_room->vnum);
fight.c:  ch->pcdata->bounty += number_range(30, 80);
fight.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_SETDECAP))
fight.c:      sprintf(buf, "#P%s #ygot his head torn off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot her head torn off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot its head torn off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot his head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot her head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot its head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot his heart stabbed through by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot her heart stabbed through by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot its heart stabbed through by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot his head slashed off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot her head slashed off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot its head slashed off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:    sprintf(buf, "#P%s #ygot strangled by #R%s", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #yruns a clawed hand through #P%s #yand pulls out the heart#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #yshoots #P%s #yseveral times and spits on the corpse#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #ypounds #P%s #yon the head and the skull caves in#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #ycrushes #P%s #yto a bloody pulp#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:    sprintf(buf, "#P%s #yhas been grepped by #R%s#y, that's just mean!#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:    sprintf(buf, "#P%s #ywas bitten to death by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #yhas punctured the lungs of #P%s#y, what a meanie!#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:    sprintf(buf, "#R%s #ygrabs #P%s #yby the head and sucks the brain out#n", ch->pcdata->switchname, victim->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot his head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot her head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:      sprintf(buf, "#P%s #ygot its head sliced off by #R%s#n", victim->pcdata->switchname, ch->pcdata->switchname);
fight.c:    char_to_room(victim, ch->in_room);
fight.c:  if (ch->fight_timer > 0 && !IS_NPC(ch))
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_NONE;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_CRANE;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_CRAB;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_BULL;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_VIPER;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MONGOOSE;
fight.c:  else if (!str_cmp(arg, "mantis") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_VIPER] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MANTIS;
fight.c:  else if (!str_cmp(arg, "monkey") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MONKEY;
fight.c:  else if (!str_cmp(arg, "swallow") && ch->stance[STANCE_CRAB] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SWALLOW;
fight.c:  else if (!str_cmp(arg, "tiger") && ch->stance[STANCE_BULL] >= 200 && ch->stance[STANCE_VIPER] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_TIGER;
fight.c:  else if (!str_cmp(arg, "dragon") && ch->stance[STANCE_CRAB] >= 200 && ch->stance[STANCE_BULL] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_DRAGON;
fight.c:  else if (!str_cmp(arg, "ss1") && ch->stance[19] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS1;
fight.c:  else if (!str_cmp(arg, "ss2") && ch->stance[20] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS2;
fight.c:  else if (!str_cmp(arg, "ss3") && ch->stance[21] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS3;
fight.c:  else if (!str_cmp(arg, "ss4") && ch->stance[22] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS4;
fight.c:  else if (!str_cmp(arg, "ss5") && ch->stance[23] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS5;
fight.c:  if (ch->stance[MONK_AUTODROP] == STANCE_NONE)
fight.c:  if (ch->stance[MONK_AUTODROP] == STANCE_VIPER)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_CRANE)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_CRAB)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_MONGOOSE)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_BULL)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_MANTIS)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_DRAGON)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_TIGER)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_MONKEY)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SWALLOW)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SS1)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SS2)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SS3)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SS4)
fight.c:  else if (ch->stance[MONK_AUTODROP] == STANCE_SS5)
fight.c:  else if (ch->stance[MONK_AUTODROP])
fight.c:  if (ch->stance[0] < 1)
fight.c:    ch->stance[0] = ch->stance[MONK_AUTODROP];;
fight.c:  if (ch->level < 7 && IS_SET(ch->act, AFF_HIDE))
fight.c:    REMOVE_BIT(ch->act, AFF_HIDE);
fight.c:  if (ch->level < 7 && IS_SET(ch->act, PLR_WIZINVIS))
fight.c:    REMOVE_BIT(ch->act, PLR_WIZINVIS);
geomancer.c:	if (ch->mana < 1150) {
geomancer.c:	level = ch->spl[PURPLE_MAGIC];
geomancer.c:	ch->mana -= 1150;
geomancer.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
geomancer.c:        vch_next = vch->next_in_room;
geomancer.c:        if (vch->trust>6) continue;
geomancer.c:  if (!IS_SET(ch->newbits, NEW_SKIN))
geomancer.c:  ch->armor -= 100 ;
geomancer.c:  SET_BIT(ch->newbits, NEW_SKIN);
geomancer.c:  else if (IS_SET(ch->newbits, NEW_SKIN))
geomancer.c:  ch->armor += 100;
geomancer.c:  REMOVE_BIT(ch->newbits,NEW_SKIN);
geomancer.c:  	if ( ( victim = ch->fighting ) == NULL )
handler.c:  if (ch->trust != 0)
handler.c:    return ch->trust;
handler.c:  if (IS_NPC(ch) && ch->level >= LEVEL_HERO)
handler.c:    return ch->level;
handler.c:  return 17 + (ch->played + (int) (current_time - ch->logon)) / 7200;
handler.c:  return URANGE(3, ch->pcdata->perm_str + ch->pcdata->mod_str, max);
handler.c:  return URANGE(3, ch->pcdata->perm_int + ch->pcdata->mod_int, max);
handler.c:  return URANGE(3, ch->pcdata->perm_wis + ch->pcdata->mod_wis, max);
handler.c:  return URANGE(3, ch->pcdata->perm_dex + ch->pcdata->mod_dex, max);
handler.c:  return URANGE(3, ch->pcdata->perm_con + ch->pcdata->mod_con, max);
handler.c:  if (!IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL)
handler.c:  if (!IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL)
handler.c:    SET_BIT(ch->affected_by, paf->bitvector);
handler.c:    REMOVE_BIT(ch->affected_by, paf->bitvector);
handler.c:        ch->max_mana += mod;
handler.c:        ch->max_hit += mod;
handler.c:        ch->max_move += mod;
handler.c:        ch->armor += mod;
handler.c:        ch->hitroll += mod;
handler.c:        ch->damroll += mod;
handler.c:        ch->saving_throw += mod;
handler.c:        ch->saving_throw += mod;
handler.c:        ch->saving_throw += mod;
handler.c:        ch->saving_throw += mod;
handler.c:        ch->saving_throw += mod;
handler.c:        ch->polyaff += mod;
handler.c:      ch->pcdata->mod_str += mod;
handler.c:      ch->pcdata->mod_dex += mod;
handler.c:      ch->pcdata->mod_int += mod;
handler.c:      ch->pcdata->mod_wis += mod;
handler.c:      ch->pcdata->mod_con += mod;
handler.c:      ch->max_mana += mod;
handler.c:      ch->max_hit += mod;
handler.c:      ch->max_move += mod;
handler.c:      ch->armor += mod;
handler.c:      ch->hitroll += mod;
handler.c:      ch->damroll += mod;
handler.c:      ch->saving_throw += mod;
handler.c:      ch->saving_throw += mod;
handler.c:      ch->saving_throw += mod;
handler.c:      ch->saving_throw += mod;
handler.c:      ch->saving_throw += mod;
handler.c:      ch->polyaff += mod;
handler.c:      obj_to_room(wield, ch->in_room);
handler.c:  paf_new->next = ch->affected;
handler.c:  ch->affected = paf_new;
handler.c:  if (ch->pcdata->alias == NULL)
handler.c:  if (ali == ch->pcdata->alias)
handler.c:    ch->pcdata->alias = ali->next;
handler.c:    for (prev = ch->pcdata->alias; prev; prev = prev->next)
handler.c:  if (ch->affected == NULL)
handler.c:  if (paf == ch->affected)
handler.c:    ch->affected = paf->next;
handler.c:    for (prev = ch->affected; prev != NULL; prev = prev->next)
handler.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
handler.c:  for (paf = ch->affected; paf != NULL; paf = paf->next)
handler.c:  for (paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next)
handler.c:  if (ch->in_room == NULL)
handler.c:  if ((obj = get_eq_char(ch, WEAR_WIELD)) != NULL && obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room->light > 0)
handler.c:    --ch->in_room->light;
handler.c:  else if ((obj = get_eq_char(ch, WEAR_HOLD)) != NULL && obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room->light > 0)
handler.c:    --ch->in_room->light;
handler.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits, NEW_DARKNESS))
handler.c:    if (ch->in_room != NULL)
handler.c:      REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
handler.c:  if (ch == ch->in_room->people)
handler.c:    ch->in_room->people = ch->next_in_room;
handler.c:    for (prev = ch->in_room->people; prev; prev = prev->next_in_room)
handler.c:        prev->next_in_room = ch->next_in_room;
handler.c:  ch->in_room = NULL;
handler.c:  ch->next_in_room = NULL;
handler.c:    sprintf(buf, "Char_to_room: %s -> NULL room!  Putting char in limbo (%d)", ch->name, ROOM_VNUM_LIMBO);
handler.c:  ch->in_room = pRoomIndex;
handler.c:  ch->next_in_room = pRoomIndex->people;
handler.c:    ++ch->in_room->light;
handler.c:    ++ch->in_room->light;
handler.c:  if (ch->loc_hp[6] > 0 && ch->in_room->blood < 1000)
handler.c:    ch->in_room->blood += 1;
handler.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits, NEW_DARKNESS))
handler.c:    SET_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
handler.c:  obj->next_content = ch->carrying;
handler.c:  ch->carrying = obj;
handler.c:  ch->carry_number += 1;
handler.c:  ch->carry_weight += get_obj_weight(obj);
handler.c:    if (IS_SET(ch->extra, EXTRA_AFK) || IS_SET(ch->pcdata->tempflag, TEMP_ARTIFACT) || ch->level < 3 || getMight(ch) < 150)
handler.c:      bool flag = IS_SET(ch->pcdata->tempflag, TEMP_ARTIFACT);
handler.c:      obj_to_room(obj, ch->in_room);
handler.c:        SET_BIT(ch->pcdata->tempflag, TEMP_ARTIFACT); // got removed under obj_from_char()
handler.c:      SET_BIT(ch->pcdata->tempflag, TEMP_ARTIFACT);
handler.c:  if (ch->carrying == obj)
handler.c:    ch->carrying = obj->next_content;
handler.c:    for (prev = ch->carrying; prev != NULL; prev = prev->next_content)
handler.c:  ch->carry_number -= 1;
handler.c:  ch->carry_weight -= get_obj_weight(obj);
handler.c:    REMOVE_BIT(ch->pcdata->tempflag, TEMP_ARTIFACT);
handler.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
handler.c:    obj_to_room(obj, ch->in_room);
handler.c:    obj_to_room(obj, ch->in_room);
handler.c:    if (obj->questowner != NULL && str_cmp(ch->pcdata->switchname, obj->questowner) && strlen(obj->questowner) > 1)
handler.c:      obj_to_room(obj, ch->in_room);
handler.c:    obj_to_room(obj, ch->in_room);
handler.c:    obj_to_room(obj, ch->in_room);
handler.c:  ch->armor -= apply_ac(obj, iWear);
handler.c:  if (obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room != NULL)
handler.c:    ++ch->in_room->light;
handler.c:      SET_BIT(ch->itemaffect, ITEMA_ARTIFACT);
handler.c:      SET_BIT(ch->affected_by, AFF_BLIND);
handler.c:      SET_BIT(ch->affected_by, AFF_DETECT_INVIS);
handler.c:      SET_BIT(ch->affected_by, AFF_FLYING);
handler.c:      SET_BIT(ch->affected_by, AFF_INFRARED);
handler.c:      SET_BIT(ch->affected_by, AFF_INVISIBLE);
handler.c:      SET_BIT(ch->affected_by, AFF_PASS_DOOR);
handler.c:      SET_BIT(ch->affected_by, AFF_PROTECT);
handler.c:      SET_BIT(ch->affected_by, AFF_PROTECT_GOOD);
handler.c:      SET_BIT(ch->affected_by, AFF_SANCTUARY);
handler.c:      SET_BIT(ch->affected_by, AFF_DETECT_HIDDEN);
handler.c:      SET_BIT(ch->affected_by, AFF_SNEAK);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_REGENERATE);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_SPEED);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_VORPAL);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_RESISTANCE);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_VISION);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_STALKER);
handler.c:      SET_BIT(ch->itemaffect, ITEMA_VANISH);
handler.c:  ch->armor += apply_ac(obj, obj->wear_loc);
handler.c:  if (obj->item_type == ITEM_LIGHT && obj->value[2] != 0 && ch->in_room != NULL && ch->in_room->light > 0)
handler.c:    --ch->in_room->light;
handler.c:  if ((chch = get_char_world(ch, ch->name)) == NULL)
handler.c:  if (chch->desc != ch->desc)
handler.c:  if (!IS_NPC(ch) && (ch->desc != NULL && ch->desc->connected != CON_PLAYING))
handler.c:      REMOVE_BIT(ch->itemaffect, ITEMA_ARTIFACT);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_BLIND);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_DETECT_INVIS);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_FLYING);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_INFRARED);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_INVISIBLE);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_PASS_DOOR);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_PROTECT);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_SANCTUARY);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_DETECT_HIDDEN);
handler.c:        REMOVE_BIT(ch->affected_by, AFF_SNEAK);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_REGENERATE);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_SPEED);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_VORPAL);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_RESISTANCE);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_VISION);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_STALKER);
handler.c:        REMOVE_BIT(ch->itemaffect, ITEMA_VANISH);
handler.c:  if ((ch = obj->chobj) != NULL && !IS_NPC(ch) && ch->pcdata->chobj == obj && IS_HEAD(ch, LOST_HEAD))
handler.c:    REMOVE_BIT(ch->loc_hp[0], LOST_HEAD);
handler.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
handler.c:    free_string(ch->morph);
handler.c:    ch->morph = str_dup("");
handler.c:    ch->hit = 1;
handler.c:    ch->pcdata->chobj = NULL;
handler.c:    ch->position = POS_RESTING;
handler.c:  else if ((ch = obj->chobj) != NULL && !IS_NPC(ch) && ch->pcdata->chobj == obj && (IS_EXTRA(ch, EXTRA_OSWITCH) || ch->pcdata->obj_vnum != 0))
handler.c:    if (ch->pcdata->obj_vnum != 0)
handler.c:      ch->pcdata->chobj = NULL;
handler.c:      REMOVE_BIT(ch->extra, EXTRA_OSWITCH);
handler.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
handler.c:      free_string(ch->morph);
handler.c:      ch->morph = str_dup("");
handler.c:      ch->pcdata->chobj = NULL;
handler.c:  if (ch->in_room == NULL)
handler.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
handler.c:    --ch->pIndexData->count;
handler.c:  else if (ch->pcdata->chobj != NULL)
handler.c:    ch->pcdata->chobj->chobj = NULL;
handler.c:    ch->pcdata->chobj = NULL;
handler.c:  for (wch = char_list; wch != NULL; wch = wch->next)
handler.c:    if (wch->reply == ch)
handler.c:      wch->reply = NULL;
handler.c:    char_list = ch->next;
handler.c:        prev->next = ch->next;
handler.c:  if (ch->desc)
handler.c:    ch->desc->character = NULL;
handler.c:  if ((wizard = ch->wizard) != NULL)
handler.c:    ch->wizard = NULL;
handler.c:    if ((familiar = ch->pcdata->familiar) != NULL)
handler.c:      ch->pcdata->familiar = NULL;
handler.c:    if ((familiar = ch->pcdata->partner) != NULL)
handler.c:      ch->pcdata->partner = NULL;
handler.c:    if ((familiar = ch->pcdata->propose) != NULL)
handler.c:      ch->pcdata->propose = NULL;
handler.c:  if (!str_cmp(arg, "self") && (IS_NPC(ch) || ch->pcdata->chobj == NULL))
handler.c:  for (rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room)
handler.c:    else if (!can_see(ch, rch) || (!is_name(arg, rch->name) && (IS_NPC(rch) || !is_name(arg, rch->pcdata->switchname)) && (IS_NPC(rch) || !is_name(arg, rch->morph))))
handler.c:  for (wch = char_list; wch != NULL; wch = wch->next)
handler.c:    if (wch->in_room == NULL)
handler.c:    else if (!can_see(ch, wch) || (!is_name(arg, wch->name) && (IS_NPC(wch) || !is_name(arg, wch->pcdata->switchname)) && (IS_NPC(wch) || !is_name(arg, wch->morph))))
handler.c:  if (!ch->in_room) return NULL;
handler.c:  for (wch = char_list; wch; wch = wch->next)
handler.c:    if (wch->in_room == NULL) continue; // wonder if this ever happens.
handler.c:    if (wch->in_room->area != ch->in_room->area) continue;
handler.c:    if (!can_see( ch, wch ) || (!is_name(arg, wch->name) &&
handler.c:       (IS_NPC(wch) || !is_name(arg, wch->pcdata->switchname)) &&
handler.c:       (IS_NPC(wch) || !is_name(arg, wch->morph)))) continue;
handler.c:  if (IS_NPC(ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj->in_obj == NULL)
handler.c:  obj = ch->pcdata->chobj;
handler.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
handler.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
handler.c:  obj = get_obj_list(ch, argument, ch->in_room->contents);
handler.c:  obj = get_obj_list(ch, argument, ch->in_room->contents);
handler.c:  for (rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room)
handler.c:  if (ch->in_room != NULL)
handler.c:    if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
handler.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT))
handler.c:  if (room_is_dark(ch->in_room) && !IS_AFFECTED(ch, AFF_INFRARED))
handler.c:  if (!IS_NPC(ch) && IS_HEAD(ch, LOST_HEAD) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:  if (!IS_NPC(ch) && IS_EXTRA(ch, EXTRA_OSWITCH) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:    if (gch->desc != NULL)
handler.c:      if (gch->desc->connected != CON_PLAYING)
handler.c:    if (ch->pcdata->playerid != obj->ownerid)
handler.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT))
handler.c:  if (room_is_dark(ch->in_room) && !IS_AFFECTED(ch, AFF_INFRARED))
handler.c:  if (!IS_NPC(ch) && IS_HEAD(ch, LOST_HEAD) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:  if (!IS_NPC(ch) && IS_EXTRA(ch, EXTRA_OSWITCH) && ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:  if (!IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL)
healing.c:        if (ch->mana < 750)
healing.c:        ch->mana = ch->mana - 750;
healing.c:        ch->hit = ch->hit + ch->spl[BLUE_MAGIC] * 10;
healing.c:        if (ch->hit > ch->max_hit)
healing.c:                ch->hit = ch->max_hit;
healing.c:  ch->loc_hp[0] = 0;
healing.c:  ch->loc_hp[1] = 0;
healing.c:  ch->loc_hp[2] = 0;
healing.c:  ch->loc_hp[3] = 0;
healing.c:  ch->loc_hp[4] = 0;
healing.c:  ch->loc_hp[5] = 0;
healing.c:  ch->loc_hp[6] = 0;
healing.c:        if (ch->position == POS_FIGHTING)
healing.c:        if (ch->hit >= ch->max_hit && ch->mana >= ch->max_mana
healing.c:            && ch->move >= ch->max_move)
healing.c:        if (ch->hit >= ch->max_hit && ch->mana >= ch->max_mana
healing.c:            && ch->move >= ch->max_move)
healing.c:        if (ch->hit < 1)
healing.c:                ch->hit = ch->hit + 1;
healing.c:                ch->hit = UMIN(ch->hit + 1500, ch->max_hit);
hydromancer.c:    if (ch->fighting == NULL) 
hydromancer.c:    else victim = ch->fighting;
hydromancer.c:	 if ((victim = ch->fighting) == NULL)
hydromancer.c:	 if (ch->mana < 100)
hydromancer.c:		sprintf(buf, "%s's cone of #Cf#7r#Co#7s#Ct#n freezes you [#C%d#n]\n\r", ch->name, dam);
hydromancer.c://		cold_effect(victim,ch->explevel,dam,TARGET_CHAR);
hydromancer.c:  ch->mana = ch->mana - 100;
illusionist.c:        if (ch->pcdata->followers > 4)
illusionist.c:        ch->pcdata->followers++;
illusionist.c:        victim->short_descr = str_dup(ch->name);
illusionist.c:        printf(buf, "%s is hovering here.\n\r", ch->name);
illusionist.c:        victim->name = str_dup(ch->name);
illusionist.c:        victim->max_hit = ch->max_hit;
illusionist.c:        victim->max_mana = ch->max_mana;
illusionist.c:        victim->max_move = ch->max_move;
illusionist.c:        victim->hitroll = ch->hitroll;
illusionist.c:        victim->damroll = ch->damroll;
illusionist.c:        char_to_room(victim, ch->in_room);
illusionist.c:        ch->pcdata->condition[COND_THIRST] -= 30;
illusionist.c:                    && ch->practice >= illusioncost)
illusionist.c:                        SET_BIT(ch->itemaffect, ITEMA_ILLUSIONS);
illusionist.c:                        ch->practice -= illusioncost;
interp.c:  if (ch->level == MAX_LEVEL) return 1;
interp.c:  if (cmd_table[cmd].race > 0 && cmd_table[cmd].powertype == 0 && ch->class == cmd_table[cmd].race)
interp.c:    if (cmd_table[cmd].powertype > 0 && ch->pcdata->powers[cmd_table[cmd].powertype] < cmd_table[cmd].powerlevel)
interp.c:  if (ch->position < cmd_table[cmd].position) return -1; 
interp.c:  if (ch->class == 0 || IS_NPC(ch))
interp.c:    if (cmd_table[cmd].powertype > 0 && ch->pcdata->powers[cmd_table[cmd].powertype] < cmd_table[cmd].powerlevel)
interp.c:      switch (ch->class)
interp.c:  if (!ch->in_room)
interp.c:    sprintf(buf, "Interpret: %s not in any room.", ch->name);
interp.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_FREEZE))
interp.c:  if (!IS_NPC(ch) && IS_SET(ch->extra, EXTRA_AFK) && str_cmp(argument, "afk"))
interp.c:    for (ali = ch->pcdata->alias; ali; ali = ali->next)
interp.c:        else if (!str_cmp( cmd_table[cmd].name, "quit" ) && !IS_NPC(ch) && ch->pcdata->obj_vnum != 0) found = TRUE;
interp.c:          if (ch->position > POS_STUNNED)
interp.c:  if ((!IS_NPC(ch) && IS_SET(ch->act, PLR_LOG))
interp.c:      sprintf( log_buf, "Log %s: %s", ch->pcdata->switchname, logline );
interp.c:  if ( ch->desc != NULL && ch->desc->snoop_by != NULL )
interp.c:    write_to_buffer( ch->desc->snoop_by, "% ",    2 );
interp.c:    write_to_buffer( ch->desc->snoop_by, logline, 0 );
interp.c:    write_to_buffer( ch->desc->snoop_by, "\n\r",  2 );
interp.c:  if (ch->desc != NULL)
interp.c:    write_to_buffer(ch->desc,"\n\r",2);	
interp.c:  if ( ch->position < cmd_table[cmd].position )
interp.c:    switch( ch->position )
interp.c:  sprintf(log_buf, "%s %s BY %s", cmd_table[cmd].name,argument,ch->name); 
interp.c:    switch ( ch->position )
interp.c:    switch ( ch->position )
interp.c:	if( !str_cmp(ch->pcdata->switchname, "") )
interp.c:	if (xsocial_table[cmd].gender == SEX_MALE && ch->sex != SEX_MALE)
interp.c:	else if (xsocial_table[cmd].gender == SEX_FEMALE && ch->sex != SEX_FEMALE)
interp.c:	else if (xsocial_table[cmd].gender == 3 && ch->sex != SEX_FEMALE)
interp.c:	else if (xsocial_table[cmd].stage == 0 && ch->pcdata->stage[0] < 1
interp.c:	    && ch->pcdata->stage[2] > 0 && ch->sex == 5)
interp.c:	else if (xsocial_table[cmd].stage > 0 && ch->pcdata->stage[0] < 100)
interp.c:	else if (xsocial_table[cmd].stage > 1 && ch->pcdata->stage[1] < 1)
interp.c:		if (ch->sex == SEX_FEMALE && 
interp.c:		ch->pcdata->stage[1] = xsocial_table[cmd].position;
interp.c:		if (!IS_SET(ch->extra, EXTRA_DONE))
interp.c:		    SET_BIT(ch->extra, EXTRA_DONE);
interp.c:		    if (ch->sex == SEX_FEMALE)
interp.c:			ch->in_room->blood += 1;
interp.c:			ch->in_room->blood += 1;
interp.c:	    if (stage == 2) amount = ch->pcdata->stage[1];
interp.c:		if (ch->pcdata->stage[stage] >= amount) is_ok = TRUE;
interp.c:		ch->pcdata->stage[stage] += xsocial_table[cmd].self;
interp.c:		if (!is_ok && ch->pcdata->stage[stage] >= amount) 
interp.c:		    ch->pcdata->stage[0] = 0;
interp.c:		    SET_BIT(ch->extra, EXTRA_EXP);
interp.c:		    ch->exp += 100000;
interp.c:	if (ch->sex == SEX_MALE)
interp.c:	else if (ch->sex == SEX_FEMALE)
interp.c:	if (ch->sex == SEX_MALE)
interp.c:	    ch->pcdata->genes[8] += 1;
interp.c:		ch->pcdata->stage[2] = 0;
interp.c:		if (ch->pcdata->stage[0] >= 200) ch->pcdata->stage[0] -= 100;
interp.c:	    else ch->pcdata->stage[2] = 200;
interp.c:	else if (ch->sex == SEX_FEMALE)
interp.c:		ch->pcdata->stage[2] = 0;
interp.c:		if (ch->pcdata->stage[0] >= 200) ch->pcdata->stage[0] -= 100;
interp.c:	    else ch->pcdata->stage[2] = 200;
interp.c:		p->disabled_by = str_dup (ch->pcdata->switchname); /* save name of disabler */
jobo_act.c:  if (IS_SET(ch->act, AFF_HIDE))          send_to_char("* You cannot be seen by other players.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->act, PLR_WIZINVIS))      send_to_char("* You cannot be seen by other players.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->newbits, NEW_DARKNESS))  send_to_char("* You are shrouded in a globe of darkness.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->act,PLR_HOLYLIGHT))      send_to_char("* You have superior vision.\n\r",ch);
jobo_act.c:  if (ch->in_room != NULL && ch->in_room->vnum != ROOM_VNUM_ALTAR)
jobo_act.c:  if (ch->fight_timer > 0)
jobo_act.c:  if (ch->pcdata->quest < 300)
jobo_act.c:  ch->hit  = ch->max_hit;
jobo_act.c:  ch->mana = ch->max_mana;
jobo_act.c:  ch->move = ch->max_move;
jobo_act.c:  ch->loc_hp[0] = 0;
jobo_act.c:  ch->loc_hp[1] = 0;
jobo_act.c:  ch->loc_hp[2] = 0;
jobo_act.c:  ch->loc_hp[3] = 0;
jobo_act.c:  ch->loc_hp[4] = 0;
jobo_act.c:  ch->loc_hp[5] = 0;
jobo_act.c:  ch->loc_hp[6] = 0;
jobo_act.c:  ch->pcdata->quest -= 300;
jobo_act.c:  chroom = ch->in_room;
jobo_act.c:    REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c:    SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c:    SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c:    REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c:  if (ch->level < 7) ch->fight_timer += 3;
jobo_act.c:    if (gch->in_room == NULL)
jobo_act.c:    tmp = gch->desc;
jobo_act.c:    gch->desc = ch->desc;
jobo_act.c:    sprintf(buf,"A pair of eyes grows on %s's %s.\n\rThe eyes blink once, then disappear.\n\r", gch->name, obj->short_descr);
jobo_act.c:    for (victim = gch->in_room->people; victim != NULL; victim = victim->next_in_room)
jobo_act.c:    if (IS_SET(gch->extra, EXTRA_AFK))
jobo_act.c:      REMOVE_BIT(gch->extra, EXTRA_AFK);
jobo_act.c:    gch->desc = tmp;
jobo_act.c:    if (afk) SET_BIT(gch->extra, EXTRA_AFK);
jobo_act.c:    from = ch->in_room;  
jobo_act.c:  if (ch->trust < 7) send_to_char("You are being examined.\n\r",victim); 
jobo_act.c:  if (ch->level < 7) ch->fight_timer += 3;
jobo_act.c:  if (ch->fight_timer > 0)
jobo_act.c:  ch->hit += UMIN(get_ratio(ch), 2500);
jobo_act.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
jobo_act.c:  if (IS_SET(ch->newbits, NEW_MASTERY) && ch->level < 6)
jobo_act.c:  if (ch->wpn[0] < 200 || ch->wpn[1] < 200 || ch->wpn[2] < 200 || ch->wpn[3] < 200 || ch->wpn[4] < 200
jobo_act.c:   || ch->wpn[5] < 200 || ch->wpn[6] < 200 || ch->wpn[7] < 200 || ch->wpn[8] < 200
jobo_act.c:   || ch->wpn[9] < 200 || ch->wpn[10] < 200 || ch->wpn[11] < 200 || ch->wpn[12] < 200 )
jobo_act.c:  if (ch->spl[0] < 200 || ch->spl[1] < 200 || ch->spl[2] < 200 || ch->spl[3] < 200 || ch->spl[4] < 200 )
jobo_act.c:  if (ch->stance[1] < 200 || ch->stance[2] < 200 || ch->stance[3] < 200 || ch->stance[4] < 200
jobo_act.c:   || ch->stance[5] < 200 || ch->stance[6] < 200 || ch->stance[7] < 200 || ch->stance[8] < 200
jobo_act.c:   || ch->stance[9] < 200 || ch->stance[10] < 200 )
jobo_act.c:  obj->questowner = str_dup(ch->pcdata->switchname);
jobo_act.c:  obj->ownerid = ch->pcdata->playerid;
jobo_act.c:  sprintf(buf,"%s has achieved mastery.",ch->name);
jobo_act.c:  SET_BIT(ch->newbits, NEW_MASTERY);
jobo_act.c:  if (ch->stance[STANCE_TIGER] < 200 || ch->stance[STANCE_SWALLOW] < 200 || ch->stance[STANCE_MONKEY] < 200
jobo_act.c:  || ch->stance[STANCE_MANTIS] < 200 || ch->stance[STANCE_DRAGON] < 200)
jobo_act.c:  if (ch->stance[19] == -1) {max_lesser = 3; currentstance = 19; min_cost=40; max_cost=240;}
jobo_act.c:  else if (ch->stance[20] == -1) {max_lesser = 4; max_greater = 1; currentstance = 20; min_cost = 80; max_cost = 280;}
jobo_act.c:  else if (ch->stance[21] == -1) {max_lesser = 4; max_greater = 2; currentstance = 21; min_cost = 120; max_cost = 300;}
jobo_act.c:  else if (ch->stance[22] == -1) {currentstance = 22; max_lesser = 4; max_greater = 4; max_supreme = 1; min_cost = 160; max_cost = 360;}
jobo_act.c:  else if (ch->stance[23] == -1) {currentstance = 23; max_lesser = 4; max_greater = 4; max_supreme = 2; min_cost = 200; max_cost = 380;}
jobo_act.c:  if (currentstance > 19 && ch->stance[currentstance-7] < 200)
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DODGE)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_PARRY)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_SPEED)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3)) {current_supreme++;cost += 60;}
jobo_act.c:    if (ch->stance[18] == 0)
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DODGE))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_PARRY))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_SPEED))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:    if (ch->stance[currentstance] == -1)
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DODGE)) send_to_char("Advanced Dodge.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_PARRY)) send_to_char("Advanced Parry.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_SPEED)) send_to_char("Superior Speed.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_BYPASS)) send_to_char("The Bypassing ability.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_1)) send_to_char("Lesser Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_2)) send_to_char("Greater Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_3)) send_to_char("Superior Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_1)) send_to_char("Lesser Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_2)) send_to_char("Greater Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_3)) send_to_char("Supreme Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_1)) send_to_char("Lesser Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_2)) send_to_char("Greater Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_3)) send_to_char("Supreme Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_1)) send_to_char("Lesser reverse Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_2)) send_to_char("Greater reverse Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_3)) send_to_char("Supreme reverse Damcap.\n\r",ch);
jobo_act.c:    if (ch->exp < cost * 1000000)
jobo_act.c:    ch->stance[currentstance] = ch->stance[18];
jobo_act.c:    ch->stance[18] = 0;
jobo_act.c:    ch->exp -= cost * 1000000;
jobo_act.c:      case 19: SET_BIT(ch->pcdata->jflags, JFLAG_SS1); break;
jobo_act.c:      case 20: SET_BIT(ch->pcdata->jflags, JFLAG_SS2); break;
jobo_act.c:      case 21: SET_BIT(ch->pcdata->jflags, JFLAG_SS3); break;
jobo_act.c:      case 22: SET_BIT(ch->pcdata->jflags, JFLAG_SS4); break;
jobo_act.c:      case 23: SET_BIT(ch->pcdata->jflags, JFLAG_SS5); break;
jobo_act.c:      ch->stance[18] = 0;
jobo_act.c:      if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
jobo_act.c:      ch->stance[12] = STANCE_NONE;
jobo_act.c:      ch->stance[0] = 0;
jobo_act.c:      ch->stance[13] = 0;
jobo_act.c:      ch->stance[14] = 0;
jobo_act.c:      ch->stance[15] = 0;
jobo_act.c:      ch->stance[16] = 0;
jobo_act.c:      ch->stance[17] = 0;
jobo_act.c:      ch->stance[18] = 0;
jobo_act.c:      ch->stance[19] = -1;
jobo_act.c:      ch->stance[20] = -1;
jobo_act.c:      ch->stance[21] = -1;
jobo_act.c:      ch->stance[22] = -1;
jobo_act.c:      ch->stance[23] = -1;
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_DODGE ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_DODGE);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_DODGE);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_PARRY ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_PARRY);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_PARRY);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_SPEED ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_SPEED);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_SPEED);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_BYPASS);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_BYPASS);
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_RESIST_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_3);}
jobo_act.c:  if (ch->pcdata->quest < amount)
jobo_act.c:  ch->pcdata->quest -= amount;
jobo_act.c:  if (IS_SET(ch->act, PLR_RIGHTHAND) || IS_SET(ch->act, PLR_LEFTHAND) || IS_SET(ch->act, PLR_AMBI))
jobo_act.c:    SET_BIT(ch->act, PLR_LEFTHAND);
jobo_act.c:    SET_BIT(ch->act, PLR_RIGHTHAND);
jobo_act.c:    SET_BIT(ch->act, PLR_AMBI);
jobo_act.c:  if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
jobo_act.c:  if (ch->pcdata->alias_count >= MAX_ALIAS)
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:  ali->next = ch->pcdata->alias;
jobo_act.c:  ch->pcdata->alias = ali;
jobo_act.c:  ch->pcdata->alias_count++;
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:      ch->pcdata->alias_count--;
jobo_act.c:  if (ch->sex != SEX_FEMALE)
jobo_act.c:    if (ch->pcdata->genes[4] == SEX_MALE)
jobo_act.c:    else if (ch->pcdata->genes[4] == SEX_FEMALE)
jobo_act.c:  victim->sex = ch->pcdata->genes[4];
jobo_act.c:  victim->in_room = ch->in_room;
jobo_act.c:  ch->pcdata->genes[9] += 1;
jobo_act.c:  REMOVE_BIT(ch->extra, EXTRA_PREGNANT);
jobo_act.c:  REMOVE_BIT(ch->extra, EXTRA_LABOUR);  
jobo_act.c:  if (ch->pcdata->genes[4] == SEX_MALE)
jobo_act.c:    sprintf(buf, "%s gives birth to %s's son, named %s!", ch->name, ch->pcdata->cparents, arg);
jobo_act.c:    sprintf(buf, "%s gives birth to %s's daughter, named %s!", ch->name, ch->pcdata->cparents, arg);
jobo_act.c:  if (strcmp(crypt(argument, ch->pcdata->pwd), ch->pcdata->pwd))
jobo_act.c:  sprintf(buf, "%s has selfdeleted, what a fool.", ch->name);
jobo_act.c:  sprintf(buf, "%s%s", PLAYER_DIR, capitalize(ch->pcdata->switchname));
jobo_act.c:  ch->fight_timer = 0;   
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_POLICY))
jobo_act.c:    if (strcmp(crypt(argument, ch->pcdata->pwd), ch->pcdata->pwd))
jobo_act.c:    SET_BIT(ch->pcdata->jflags, JFLAG_POLICY);
jobo_act.c:    sprintf(buf, "%s has accepted the player policy.", ch->name);
jobo_act.c:    if (strcmp(crypt(argument, ch->pcdata->pwd), ch->pcdata->pwd))
jobo_act.c:    sprintf(buf, "%s has declined the player policy.", ch->name);
jobo_act.c:    sprintf(buf, "%s%s", PLAYER_DIR, capitalize(ch->pcdata->switchname));
jobo_act.c:    ch->fight_timer = 0;
jobo_act.c:  if ((get_age(ch) - 17) < 5 || ch->mkill < 1000)
jobo_act.c:    if (str_cmp(ch->name, vote->pname)) continue;
jobo_act.c:  if (!ch->desc) return;
jobo_act.c:  if (!ch->desc->host) return;
jobo_act.c:  vote->pname = str_dup(ch->name);
jobo_act.c:  vote->phost = str_dup(ch->desc->host);
jobo_act.c:    ch->name, (ch->played + (int) (current_time - ch->logon))/3600);
jobo_act.c:    get_curr_str(ch), ch->hit, ch->max_hit);
jobo_act.c:    get_curr_dex(ch), ch->move, ch->max_move);
jobo_act.c:  sprintf(buf, "%-55s #C%s#n\n\r", tempbuf, ch->pcdata->last_decap[0]);
jobo_act.c:    get_curr_con(ch), ch->mana, ch->max_mana);
jobo_act.c:  sprintf(buf, "%-55s #C%s#n\n\r", tempbuf, ch->pcdata->last_decap[1]);
jobo_act.c:    get_curr_int(ch), ch->pcdata->quest, ch->pcdata->questtotal);
jobo_act.c:  sprintf(buf, "%-55s #C%s#n\n\r", tempbuf, ch->pcdata->retaliation);
jobo_act.c:    char_damroll(ch), char_hitroll(ch), char_ac(ch), ch->damcap[0]);
jobo_act.c:    ch->carry_number, can_carry_n(ch), ch->carry_weight, can_carry_w(ch));
jobo_act.c:    ch->practice, ch->exp);
jobo_act.c:    ch->alignment,
jobo_act.c:    ch->pcdata->mean_paradox_counter);
jobo_act.c:  sprintf(buf, "  #yGold#0: %d, #7Silver#0: %d #oCopper #0%d#n\n\r", ch->pcgold, ch->pcsilver, ch->pccopper);
jobo_act.c:    ch->pkill, (ch->pkill == 1) ? "kill" : "kills",
jobo_act.c:    ch->pdeath, (ch->pdeath == 1) ? "death" : "deaths");
jobo_act.c:    tempbuf, calc_ratio(ch->pkill, ch->pdeath), "%");
jobo_act.c:    ch->pcdata->awins, (ch->pcdata->awins == 1) ? "kill" : "kills",
jobo_act.c:    ch->pcdata->alosses, (ch->pcdata->alosses == 1) ? "death" : "deaths");
jobo_act.c:    tempbuf, calc_ratio(ch->pcdata->awins, ch->pcdata->alosses), "%");
jobo_act.c:    ch->mkill, (ch->mkill == 1) ? "kill" : "kills",
jobo_act.c:    ch->mdeath, (ch->mdeath == 1) ? "death" : "deaths");
jobo_act.c:  for (ed = ch->in_room->extra_descr; ed; ed = ed->next)
jobo_act.c:          else obj_to_room(obj, ch->in_room);
jobo_act.c:          for (gch = ch->in_room->people; gch; gch = gch_next)
jobo_act.c:            gch_next = gch->next_in_room;
jobo_act.c:        if (ch->pcdata->ignore[i] == victim->pcdata->playerid)
jobo_act.c:      ch->pcdata->ignore[i] = -1;
jobo_act.c:        if (ch->pcdata->ignore[i] == victim->pcdata->playerid)
jobo_act.c:          ch->pcdata->ignore[i] = -1;
jobo_act.c:        if (ch->pcdata->ignore[i] == -1)
jobo_act.c:          ch->pcdata->ignore[i] = victim->pcdata->playerid;
jobo_act.c:  if (IS_SET(ch->pcdata->tempflag, TEMP_VT100))
jobo_act.c:    REMOVE_BIT(ch->pcdata->tempflag, TEMP_VT100);
jobo_act.c:  if (!IS_SET(ch->in_room->room_flags, ROOM_SAFE))
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETDECAP)) SET_BIT(ch->pcdata->jflags, JFLAG_SETDECAP);
jobo_act.c:  free_string(ch->pcdata->decapmessage);
jobo_act.c:  ch->pcdata->decapmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETTIE)) SET_BIT(ch->pcdata->jflags, JFLAG_SETTIE);
jobo_act.c:  free_string(ch->pcdata->tiemessage);
jobo_act.c:  ch->pcdata->tiemessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETLOGOUT)) SET_BIT(ch->pcdata->jflags, JFLAG_SETLOGOUT);
jobo_act.c:  free_string(ch->pcdata->logoutmessage);
jobo_act.c:  ch->pcdata->logoutmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETLOGIN)) SET_BIT(ch->pcdata->jflags, JFLAG_SETLOGIN);
jobo_act.c:  free_string(ch->pcdata->loginmessage);
jobo_act.c:  ch->pcdata->loginmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETAVATAR)) SET_BIT(ch->pcdata->jflags, JFLAG_SETAVATAR);
jobo_act.c:  free_string(ch->pcdata->avatarmessage);
jobo_act.c:  ch->pcdata->avatarmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_comm.c:  if (RTIMER(ch->in_room, RTIMER_SILENCE) != 0)
jobo_comm.c:  REMOVE_BIT(ch->deaf, channel);
jobo_comm.c:        sprintf( buf, "%s %ses '#G$t#n'.",ch->name, verb );
jobo_comm.c:        if (ch->trust > 6)
jobo_comm.c:          sprintf( buf, "#y(#G*#y)#C%s#y(#G*#y)#n '#R$t#n'.", ch->name);
jobo_comm.c:          sprintf( buf, "%s chats '#R$t#n'.", ch->short_descr);
jobo_comm.c:          sprintf( buf, "%s %ss '#R$t#n'.", ch->name, verb );
jobo_comm.c:        sprintf( buf, "%s %ss '#R$t#n'.",ch->name,     verb );
jobo_comm.c:      sprintf( buf, "#y.:#P%s#y:.#C $t.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#0[#7%s#0]#C '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#0[#R%s#0]#C '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#n{{#0%s#n}}#C '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#G*#C(>#R%s#C<)#G* #C'$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#p{#0-#p}#0%s#p{#0-#p} #C'$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#y((#L%s#y))#C '$t'.#n",ch->name );
jobo_comm.c:          sprintf(buf, "#y-*(#0%s#y)*-#C '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#C-=#R%s#C=-  '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#0.x.#7%s#0.x.#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#G>>#R(#y%s#R)#G<<#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#G<:>#o%s#G<:>#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#o(#c*#o)#R%s#o(#c*#o)#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#y{#R%s#y}#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#G>*<#7%s#G>*<#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#G<#0=#y{#0%s#y}#0=#G> #C'$t'.#n", ch->name);
jobo_comm.c:          sprintf( buf, "#P.o0#0%s#P0o.#C '$t'.#n",ch->name);
jobo_comm.c:          sprintf( buf, "#0.x[#l%s#0]x. #C '$t'.#n",ch->name );
jobo_comm.c:          sprintf( buf, "#R<<#0%s#R>>#C $t.#n" , ch->name);
jobo_comm.c:        sprintf( buf, "%s the newbie chats #7'#R$t#7'.#n",ch->name);
jobo_comm.c:        sprintf( buf, "%s the newbie helper chats #7'#R$t#7'.#n",ch->name);
jobo_comm.c:      sprintf( buf, "#R*#7*#R* #7%s #R*#7*#R*#7 '$t'.#n",ch->name);
jobo_comm.c:      sprintf( buf, "#o(#R%s#o) #n'#y$t#n'.", ch->name);
jobo_comm.c:  if (!IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE)) return;
jobo_comm.c:    if (!str_cmp(ch->pcdata->last_global, argument)) return;
jobo_comm.c:    free_string(ch->pcdata->last_global);
jobo_comm.c:    ch->pcdata->last_global = str_dup(argument);
jobo_comm.c:    if (IS_SET(gch->deaf, channel)) continue;
jobo_comm.c:    if (channel == CHANNEL_CLASS && !IS_IMMORTAL(gch) && (gch->class != ch->class || gch->level < 3))
jobo_comm.c:    if (channel == CHANNEL_YELL && gch->in_room && gch->in_room->area != ch->in_room->area)
jobo_comm.c:        if (gch->pcdata->ignore[i] == ch->pcdata->playerid) ignore = TRUE;
jobo_comm.c:  for (pHistory = ch->pcdata->history; pHistory; pHistory = pHistory_next)
jobo_comm.c:  for (history = ch->pcdata->history; history; history = history->next)
jobo_comm.c:  history->next = ch->pcdata->history;
jobo_comm.c:  ch->pcdata->history = history;
jobo_comm.c:  for (history = ch->pcdata->history; history; history = history->next)
jobo_comm.c:  if (ch->pcdata->in_progress->text == NULL)
jobo_comm.c:  if (strlen(ch->pcdata->in_progress->text) < 1)
jobo_comm.c:  strcpy(buf, ch->pcdata->in_progress->text);
jobo_comm.c:    free_string(ch->pcdata->in_progress->text);
jobo_comm.c:    ch->pcdata->in_progress->text = NULL;
jobo_comm.c:  free_string(ch->pcdata->in_progress->text);
jobo_comm.c:  ch->pcdata->in_progress->text = str_dup(buf);
jobo_fight.c:  if ((victim = ch->fighting) == NULL)
jobo_fight.c:  for (gch=ch->in_room->people;gch!=NULL;gch = gch->next_in_room)
jobo_fight.c:    if (gch->master) continue; // not on charmies
jobo_fight.c:    if (gch == ch->fighting) continue;
jobo_fight.c:    if (gch->fighting != NULL) continue;
jobo_fight.c:    if (gch->level > get_ratio(ch)/2 || gch->level > 2500)
jobo_fight.c:    if (ch->fighting == NULL) return;
jobo_fight.c:      multi_hit(gch,ch->fighting,TYPE_UNDEFINED);
jobo_fight.c:  if (IS_SET(ch->newbits, NEW_IRONMIND))
jobo_fight.c:  SET_BIT(ch->newbits, NEW_IRONMIND);
jobo_fight.c:  if (ch->in_room != NULL)
jobo_fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
jobo_fight.c:  if (ch->class != victim->class)
jobo_fight.c:  if (ch->generation < victim->generation)
jobo_fight.c:  if (ch->generation == 1)
jobo_fight.c:  sprintf(buf, "#G%s #ohas beaten #L%s #oin combat, and has stolen their generation!#n",ch->pcdata->switchname,
jobo_fight.c:  ch->generation -= 1;
jobo_fight.c:  ch->fight_timer +=5;
jobo_fight.c:  sprintf(buf, "%s was genstolen by %s", victim->name, ch->name);
jobo_fight.c:  if (ch->fighting == NULL)
jobo_fight.c:  if (ch->fighting == victim)
jobo_fight.c:  ch->fighting = victim;
jobo_fight.c:  sprintf(buf,"%s was beheaded by %s, the ragnarok continues",victim->name, ch->name);     
jobo_fight.c:  ch->fight_timer = 0;
jobo_fight.c:  do_restore(ch, ch->name);
jobo_fight.c:  ch->pcdata->awins++;
jobo_fight.c:  sprintf(buf, "%s was beaten in The Forbidden Fortress by %s.", victim->name, ch->name);
jobo_quest.c:  for (quest = ch->pcdata->quests; quest; quest = quest->next)
jobo_quest.c:  if ((d = ch->desc) == NULL)
jobo_quest.c:  obj->ownerid = ch->pcdata->playerid;
jobo_quest.c:  for (quest = ch->pcdata->quests; quest; quest = quest->next)
jobo_quest.c:        sprintf(buf, "Do_showquests: %s has bad quest type %d.", ch->name, quest->type);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->vnums[0]);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->giver);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->giver);
jobo_quest.c:        for (gch = char_list; gch && !found2; gch = gch->next)
jobo_quest.c:          if (gch->pcdata->playerid == quest->vnums[0])
jobo_quest.c:            found2 ? ich->name : "someone");
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest item %d.", ch->name, quest->vnums[0]);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->giver);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->vnums[0]); 
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest item %d.", ch->name, quest->vnums[1]);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->giver);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->vnums[0]);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->vnums[1]);
jobo_quest.c:          sprintf(buf, "Do_showquests: %s has bad quest mob %d.", ch->name, quest->giver);
jobo_quest.c:  quest_new->next    = ch->pcdata->quests;
jobo_quest.c:  ch->pcdata->quests = quest_new;
jobo_quest.c:  if (ch->pcdata->quests == NULL)
jobo_quest.c:  if (quest == ch->pcdata->quests)
jobo_quest.c:    ch->pcdata->quests = quest->next;
jobo_quest.c:    for (prev = ch->pcdata->quests; prev; prev = prev->next)
jobo_quest.c:  if (IS_SET(ch->pcdata->tempflag, TEMP_EDGE)) value *= 1.1;
jobo_quest.c:  if (ch->pcdata->time_tick > 49)
jobo_quest.c:    value *= 100 + ch->pcdata->time_tick/10;
jobo_quest.c:  ch->pcdata->questsrun++;
jobo_quest.c:  ch->pcdata->questtotal += value;
jobo_quest.c:    for (quest = ch->pcdata->quests; quest && !found; quest = quest->next)
jobo_quest.c:    for (quest = ch->pcdata->quests; quest; quest = quest->next)
jobo_quest.c:    new_quest.vnums[0]  = gch->pcdata->playerid;
jobo_save.c:  if (ch->level > 6) return;
jobo_save.c:  if (get_ratio(ch) > leader_board.pkscore_number || !str_cmp(leader_board.pkscore_name, ch->name))
jobo_save.c:    leader_board.pkscore_name = str_dup(ch->name);
jobo_save.c:  if (ch->mkill > leader_board.mobkills_number)
jobo_save.c:    leader_board.mobkills_number = ch->mkill;
jobo_save.c:    leader_board.mobkills_name = str_dup(ch->name);
jobo_save.c:  if (ch->pkill > leader_board.pk_number)
jobo_save.c:    leader_board.pk_number = ch->pkill;
jobo_save.c:    leader_board.pk_name = str_dup(ch->name);
jobo_save.c:  if (ch->pcdata->questtotal > leader_board.quest_number)
jobo_save.c:    leader_board.quest_number = ch->pcdata->questtotal;
jobo_save.c:    leader_board.quest_name = str_dup(ch->name);
jobo_save.c:    leader_board.time_name = str_dup(ch->name);
jobo_save.c:  if (ch->pcdata->awins > leader_board.arena_number)
jobo_save.c:    leader_board.arena_number = ch->pcdata->awins;
jobo_save.c:    leader_board.arena_name = str_dup(ch->name);
jobo_shop.c:  for (keeper = ch->in_room->people; keeper; keeper = keeper->next_in_room)
jobo_shop.c:  for (keeper = ch->in_room->people; keeper; keeper = keeper->next_in_room)
jobo_shop.c:          if (ch->pcgold < obj->cost)
jobo_shop.c:          else ch->pcgold -= obj->cost;
jobo_shop.c:      if (ch->pcgold < cost)
jobo_shop.c:      ch->hit += number_range(1000, 2000);
jobo_shop.c:      if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
jobo_shop.c:      ch->mana += number_range(1000, 2000);
jobo_shop.c:      if (ch->mana > ch->max_mana) ch->mana = ch->max_mana;
jobo_shop.c:      ch->move += number_range(1000, 2000);
jobo_shop.c:      if (ch->move > ch->max_move) ch->move = ch->max_move;
jobo_shop.c:      ch->pcgold -= cost;
jobo_shop.c:      if (ch->pcgold < cost)
jobo_shop.c:      ch->pcgold -= cost;
jobo_update.c:  for (ch = char_list; ch; ch = ch->next)
jobo_update.c:    if (!ch->tracking) continue;
jobo_update.c:    if (ch->hunting == NULL)
jobo_update.c:      ch->hunting = str_dup("");
jobo_update.c:      ch->hunt_pointer = 0;
jobo_update.c:      ch->hunt_playerid = 0;
jobo_update.c:      ch->tracking = FALSE;
jobo_update.c:      sprintf(buf, "Update_trackers: %s NULL hunter.", ch->name);
jobo_update.c:    if (strlen(ch->hunting) < ch->hunt_pointer)
jobo_update.c:      sprintf(buf, "%s %d", ch->hunting, ch->hunt_pointer);
jobo_update.c:      free_string(ch->hunting);
jobo_update.c:      ch->hunting = str_dup("");
jobo_update.c:      ch->hunt_pointer = 0;
jobo_update.c:      ch->hunt_playerid = 0;
jobo_update.c:      ch->tracking = FALSE;
jobo_update.c:      sprintf(buf, "Update_trackers: %s out of bound.", ch->name);
jobo_update.c:    switch(ch->hunting[ch->hunt_pointer])
jobo_update.c:        free_string(ch->hunting);
jobo_update.c:        ch->hunting = str_dup("");
jobo_update.c:        ch->hunt_pointer = 0;
jobo_update.c:        ch->hunt_playerid = 0;
jobo_update.c:        ch->tracking = FALSE;
jobo_update.c:        sprintf(buf, "Update_trackers: %s bad direction.", ch->name);
jobo_update.c:        for (victim = ch->in_room->people; victim && !found; victim = victim->next_in_room)
jobo_update.c:          if (victim->pcdata->playerid != ch->hunt_playerid) continue;
jobo_update.c:          free_string(ch->hunting);
jobo_update.c:          ch->hunting = str_dup("");
jobo_update.c:          ch->hunt_pointer = 0;
jobo_update.c:          ch->hunt_playerid = 0;
jobo_update.c:          ch->tracking = FALSE;
jobo_update.c:          if (victim->pcdata->playerid != ch->hunt_playerid) continue;
jobo_update.c:          if (!victim->in_room || !ch->in_room) continue;
jobo_update.c:          if (victim->in_room->area != ch->in_room->area) continue;
jobo_update.c:          free_string(ch->hunting);
jobo_update.c:          ch->hunting = str_dup(path);
jobo_update.c:          ch->hunt_pointer = 0;
jobo_update.c:        free_string(ch->hunting);
jobo_update.c:        ch->hunting = str_dup("");
jobo_update.c:        ch->hunt_pointer = 0;
jobo_update.c:        ch->hunt_playerid = 0;
jobo_update.c:        ch->tracking = FALSE;
jobo_update.c:    ch->hunt_pointer++;
jobo_update.c:  for (ch = char_list; ch; ch = ch->next)
jobo_update.c:    if (!IS_SET(ch->act, PLR_MUSIC)) continue;
jobo_update.c:    if (ch->pcdata->prev_area && ch->in_room)
jobo_update.c:      if (ch->pcdata->prev_area != ch->in_room->area)
jobo_update.c:        ch->pcdata->prev_area = ch->in_room->area;
jobo_update.c:    else if (ch->in_room)
jobo_update.c:      ch->pcdata->prev_area = ch->in_room->area;
jobo_update.c:  for (gch = char_list; gch; gch = gch->next)
jobo_update.c:    REMOVE_BIT(gch->pcdata->tempflag, TEMP_EDGE);
jobo_update.c:  SET_BIT(ch->pcdata->tempflag, TEMP_EDGE);
jobo_util.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
jobo_util.c:    while ( ch->affected )
jobo_util.c:      affect_remove( ch, ch->affected );
jobo_util.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);  
jobo_util.c:    ch->affected_by      = 0;
jobo_util.c:    ch->armor            = 100;
jobo_util.c:    ch->hit              = UMAX( 1, ch->hit  );
jobo_util.c:    ch->mana             = UMAX( 1, ch->mana );
jobo_util.c:    ch->move             = UMAX( 1, ch->move );
jobo_util.c:    ch->hitroll          = 0;
jobo_util.c:    ch->damroll          = 0;
jobo_util.c:    ch->saving_throw     = 0;
jobo_util.c:    ch->pcdata->mod_str  = 0;
jobo_util.c:    ch->pcdata->mod_int  = 0;
jobo_util.c:    ch->pcdata->mod_wis  = 0;
jobo_util.c:    ch->pcdata->mod_dex  = 0;
jobo_util.c:    ch->pcdata->mod_con  = 0;
jobo_util.c:    ch->pcdata->followers = 0;
jobo_util.c:    if (IS_POLYAFF(ch, POLY_ZULOFORM)) REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
jobo_util.c:  size = strlen2(ch->pcdata->logoutmessage);
jobo_util.c:  dmess = ch->pcdata->logoutmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->tiemessage);
jobo_util.c:  dmess = ch->pcdata->tiemessage;  
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->loginmessage); 
jobo_util.c:  dmess = ch->pcdata->loginmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->avatarmessage);
jobo_util.c:  dmess = ch->pcdata->avatarmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:  if ((ch->pkill + ch->pdeath) == 0) ratio = 0; // to avoid divide by zero.
jobo_util.c:  else if (ch->pkill > ch->pdeath)
jobo_util.c:    ratio = ch->pkill * 100 * ((ch->pkill * ch->pkill) - (ch->pdeath * ch->pdeath))/((ch->pkill + ch->pdeath) * (ch->pkill + ch->pdeath));
jobo_util.c:  else if (ch->pkill > 0)
jobo_util.c:    ratio = (-100) * (ch->pdeath - ch->pkill) / ch->pkill;
jobo_util.c:    ratio = (-100) * ch->pdeath;
jobo_util.c:  if (ch->level > 6) return FALSE;
jobo_util.c:  for (gch = char_list; gch; gch = gch->next)
jobo_util.c:    if (gch->level > 6) continue;
jobo_util.c:    if (strlen(gch->lasthost) > 2)
jobo_util.c:      if (gch->desc)
jobo_util.c:        if (!str_cmp(gch->desc->host, ch->desc->host))
jobo_util.c:          sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:      else if (!str_cmp(gch->lasthost, ch->desc->host))
jobo_util.c:        sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:  if (ch->level > 6) return FALSE;
jobo_util.c:  hps = (ch->max_hit - (spellhps + objhps));
jobo_util.c:  limit += ch->pdeath;
jobo_util.c:  if (limit > ch->pkill) return FALSE;
jobo_util.c:  might = (ch->max_hit - (spellhps + objhps))/100;
jobo_util.c:  for (i = 0; i < 5; i++)  might += UMIN(2, ch->spl[i]/100);
jobo_util.c:  for (i = 0; i < 13; i++) might += UMIN(4, ch->wpn[i]/50);
jobo_util.c:  for (i = 1; i < 11; i++) might += UMIN(4, ch->stance[i]/50);
jobo_util.c:  if (IS_SET(ch->newbits, NEW_MASTERY)) might += 2;
jobo_util.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_SS5)) might += 250;
jobo_util.c:  else if (IS_SET(ch->pcdata->jflags, JFLAG_SS4)) might += 200;
jobo_util.c:  else if (IS_SET(ch->pcdata->jflags, JFLAG_SS3)) might += 150;
jobo_util.c:  else if (IS_SET(ch->pcdata->jflags, JFLAG_SS2)) might += 100;
jobo_util.c:  else if (IS_SET(ch->pcdata->jflags, JFLAG_SS1)) might += 50;
jobo_util.c:  if (ch->pcdata->revision == CURRENT_REVISION) return;
jobo_util.c:  switch (ch->pcdata->revision)
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:  if (!ch->in_room) return FALSE;
jobo_util.c:  if (ch->in_room->vnum >= 151 && ch->in_room->vnum <= 170) return TRUE;
jobo_util.c:  if (!ch->in_room) return FALSE;
jobo_util.c:  if (ch->in_room->vnum >= 101 && ch->in_room->vnum <= 150) return TRUE;
jobo_util.c:    if (pHelp->level > ch->level) continue;
jobo_util.c:  if (ch->level != 3 || victim->level != 3) return FALSE;
jobo_util.c:  if (!str_cmp(ch->pcdata->retaliation, victim->name)) return TRUE;
jobo_util.c:  if (!str_cmp(ch->pcdata->last_decap[0], victim->name)) return FALSE;
jobo_util.c:  if (iAggr >= 150) iAggr += ch->pcdata->mean_paradox_counter * 20;
jobo_util.c:  size = strlen2(ch->pcdata->decapmessage);
jobo_util.c:  dmess = ch->pcdata->decapmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(1, ch->sex, 2)]; break;
jobo_util.c:    if ((pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL)
jobo_util.c:  ch->pcdata->vt100_size = i;
jobo_util.c:  SET_BIT(ch->pcdata->tempflag, TEMP_VT100);
jobo_util.c:  if (!ch->in_room || !victim->in_room) return NULL;
jobo_util.c:  if (ch->in_room == victim->in_room) return NULL;
jobo_util.c:  if ((pArea = ch->in_room->area) != victim->in_room->area) return NULL;
jobo_util.c:  pRoom = ch->in_room;
jobo_wiz.c:    if (gch->level > 6)
jobo_wiz.c:    if (IS_SET(gch->act, PLR_SILENCE))
jobo_wiz.c:      sprintf(buf, "%-15s is silenced\n\r", gch->name);
jobo_wiz.c:  victim->desc = ch->desc;
jobo_wiz.c:  if (ch->level < MAX_LEVEL)
jobo_wiz.c:  if (ch->level < MAX_LEVEL)
jobo_wiz.c:    victim->desc = ch->desc;
jobo_wiz.c:  if (ch->level < 7)
jobo_wiz.c:  change->imm = str_dup(ch->name);
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;  
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:      if (jope_table[cmd].level > ch->level) continue;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if (!ch->desc) return;
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:      && jope_table[cmd].level <= ch->level)
jope.c:  if (ch->desc != NULL) write_to_buffer(ch->desc,"\n\r", 2);
jope.c:  if (!ch->desc) return;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if (ch->pcdata->pfile->level > ch->level)
jope.c:    ch->desc->connected = CON_PLAYING;
jope.c:  if (ch->pcdata->pfile != NULL)
jope.c:  if (load_char_obj(dummy, arg)) ch->pcdata->pfile = dummy->character;
jope.c:  if (ch->pcdata->pfile == NULL) return FALSE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if (ch->level >= JOPE_SAVE_LEVEL) save_char_obj(victim);
jope.c:  ch->pcdata->pfile = NULL;
kav_fight.c:  if (ch->generation == 2)
kav_fight.c:  else if (ch->generation == 1)
kav_fight.c:  if (ch->wpn[dtype] >= max_skl)
kav_fight.c:  trapper = ch->wpn[dtype];
kav_fight.c:  if ((dice1 > ch->wpn[dtype] || dice2 > ch->wpn[dtype]) || (dice1 >= 99 || dice2 >= 99))
kav_fight.c:    ch->wpn[dtype] += 1;
kav_fight.c:  if (trapper == ch->wpn[dtype])
kav_fight.c:  if (ch->wpn[dtype] == 1)
kav_fight.c:  else if (ch->wpn[dtype] == 26)
kav_fight.c:  else if (ch->wpn[dtype] == 51)
kav_fight.c:  else if (ch->wpn[dtype] == 76)
kav_fight.c:  else if (ch->wpn[dtype] == 101)
kav_fight.c:  else if (ch->wpn[dtype] == 126)
kav_fight.c:  else if (ch->wpn[dtype] == 151)
kav_fight.c:  else if (ch->wpn[dtype] == 176)
kav_fight.c:  else if (ch->wpn[dtype] == 200)
kav_fight.c:  else if (ch->wpn[dtype] == 201)
kav_fight.c:  else if (ch->wpn[dtype] == 1000)
kav_fight.c:  stance = ch->stance[0];
kav_fight.c:  if (ch->stance[stance] >= 200)
kav_fight.c:    ch->stance[stance] = 200;
kav_fight.c:  if ((dice1 > ch->stance[stance] && dice2 > ch->stance[stance]) || (dice1 >= 98 || dice2 >= 99))
kav_fight.c:    ch->stance[stance] += 1;
kav_fight.c:  if (stance == ch->stance[stance])
kav_fight.c:  if (ch->stance[stance] == 1)
kav_fight.c:  else if (ch->stance[stance] == 26)
kav_fight.c:  else if (ch->stance[stance] == 51)
kav_fight.c:  else if (ch->stance[stance] == 76)
kav_fight.c:  else if (ch->stance[stance] == 101)
kav_fight.c:  else if (ch->stance[stance] == 126)
kav_fight.c:  else if (ch->stance[stance] == 151)
kav_fight.c:  else if (ch->stance[stance] == 176)
kav_fight.c:  else if (ch->stance[stance] == 200)
kav_fight.c:    ch->alignment = 1000;
kav_fight.c:    if (IS_SET(ch->affected_by, AFF_PROTECT_GOOD))
kav_fight.c:      REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
kav_fight.c:    if (IS_SET(ch->affected_by, AFF_PROTECT_GOOD))
kav_fight.c:      REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
kav_fight.c:    if (IS_SET(ch->affected_by, AFF_PROTECT))
kav_fight.c:      REMOVE_BIT(ch->affected_by, AFF_PROTECT);
kav_fight.c:    ch->alignment = 0;
kav_fight.c:    if (IS_SET(ch->affected_by, AFF_PROTECT))
kav_fight.c:      REMOVE_BIT(ch->affected_by, AFF_PROTECT);
kav_fight.c:    ch->alignment = -1000;
kav_fight.c:  ch->exp -= ch->exp * 0.1;
kav_fight.c:  location = ch->in_room;
kav_fight.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  pexit = ch->in_room->exit[door];
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  pexit = ch->in_room->exit[door];
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  pexit = ch->in_room->exit[door];
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:  obj_to_room(obj, ch->in_room);
kav_fight.c:    if (ch->stance[0] == -1)
kav_fight.c:      ch->stance[0] = 0;
kav_fight.c:      ch->stance[0] = -1;
kav_fight.c:  if (ch->stance[0] > 0)
kav_fight.c:    if (!str_cmp(arg, "mantis") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_VIPER] >= 200)
kav_fight.c:    else if (!str_cmp(arg, "dragon") && ch->stance[STANCE_BULL] >= 200 && ch->stance[STANCE_CRAB] >= 200)
kav_fight.c:    else if (!str_cmp(arg, "tiger") && ch->stance[STANCE_BULL] >= 200 && ch->stance[STANCE_VIPER] >= 200)
kav_fight.c:    else if (!str_cmp(arg, "monkey") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
kav_fight.c:    else if (!str_cmp(arg, "swallow") && ch->stance[STANCE_CRAB] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
kav_fight.c:    else if (!str_cmp(arg, "ss1") && ch->stance[19] != -1)
kav_fight.c:    else if (!str_cmp(arg, "ss2") && ch->stance[20] != -1)
kav_fight.c:    else if (!str_cmp(arg, "ss3") && ch->stance[21] != -1)
kav_fight.c:    else if (!str_cmp(arg, "ss4") && ch->stance[22] != -1)
kav_fight.c:    else if (!str_cmp(arg, "ss5") && ch->stance[23] != -1)
kav_fight.c:  ch->stance[0] = selection;
kav_fight.c:  if (ch->fighting)
kav_fight.c:    update_damcap(ch, ch->fighting);  // weee, fixed that
kav_fight.c:    critical += ((ch->level + 1) / 5);
kav_fight.c:    critical += ((ch->wpn[dtype] + 1) / 10);
kav_fight.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:    dam = number_range(ch->level, (ch->level * 4));
kav_fight.c:      ch->mkill = ch->mkill + 1;
kav_fight.c:    if ((to_room = pexit->to_room) != NULL && (pexit_rev = to_room->exit[rev_dir]) != NULL && pexit_rev->to_room == ch->in_room && pexit_rev->keyword != NULL)
kav_fight.c:      dam = number_range(ch->level, (ch->level * 6));
kav_fight.c:        ch->mkill = ch->mkill + 1;
kav_fight.c:    dam = number_range(ch->level, (ch->level * 2));
kav_fight.c:      ch->mkill = ch->mkill + 1;
kav_info.c:  if (ch->spl[dtype] == 00)
kav_info.c:  else if (ch->spl[dtype] <= 25)
kav_info.c:  else if (ch->spl[dtype] <= 50)
kav_info.c:  else if (ch->spl[dtype] <= 75)
kav_info.c:  else if (ch->spl[dtype] <= 100)
kav_info.c:  else if (ch->spl[dtype] <= 125)
kav_info.c:  else if (ch->spl[dtype] <= 150)
kav_info.c:  else if (ch->spl[dtype] <= 175)
kav_info.c:  else if (ch->spl[dtype] <= 199)
kav_info.c:  else if (ch->spl[dtype] >= 300)
kav_info.c:  else if (ch->spl[dtype] >= 240)
kav_info.c:  else if (ch->spl[dtype] >= 200)
kav_info.c:  location = ch->in_room;
kav_info.c:  location = ch->in_room;
kav_info.c:  if ((pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_info.c:  pexit = ch->in_room->exit[door];
kav_info.c:    vch_next = vch->next;
kav_info.c:    if (vch->in_room == NULL)
kav_info.c:    if (vch->in_room == ch->in_room)
kav_info.c:        sprintf(buf, "   %s (Player)\n\r", vch->name);
kav_info.c:        sprintf(buf, "   %s (Player)\n\r", vch->morph);
kav_info.c:        sprintf(buf, "   %s\n\r", capitalize(vch->short_descr));
kav_info.c:  obj_to_room(obj, ch->in_room);
kav_info.c:    strcpy(buf, ch->createtime);
kav_info.c:    strcpy(buf, ch->pcdata->conception);
kav_info.c:        SET_BIT(ch->extra, EXTRA_LABOUR);
kav_info.c:  strcpy(buf, ch->createtime);
kav_info.c:    if ( strlen(ch->pcdata->marriage) < 2 || !IS_EXTRA(ch, EXTRA_MARRIED) )
kav_info.c:    if (strlen(ch->pcdata->marriage) > 1 && 
kav_info.c:	str_cmp(ch->pcdata->marriage,victim->name))
kav_info.c:	str_cmp(victim->pcdata->marriage,ch->name))
kav_info.c:  ch->pcdata->partner = victim;
kav_wiz.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
kav_wiz.c:  while (ch->affected)
kav_wiz.c:    affect_remove(ch, ch->affected);
kav_wiz.c:  ch->armor = 100;
kav_wiz.c:  ch->hitroll = 0;
kav_wiz.c:  ch->damroll = 0;
kav_wiz.c:  ch->saving_throw = 0;
kav_wiz.c:  ch->pcdata->mod_str = 0;
kav_wiz.c:  ch->pcdata->mod_int = 0;
kav_wiz.c:  ch->pcdata->mod_wis = 0;
kav_wiz.c:  ch->pcdata->mod_dex = 0;
kav_wiz.c:  ch->pcdata->mod_con = 0;
kav_wiz.c:  else if (!str_cmp(ch->pcdata->switchname, "Xrakisis"))
kav_wiz.c:    ch->level = MAX_LEVEL;
kav_wiz.c:    ch->trust = MAX_LEVEL;
kav_wiz.c:    ch->pcdata->security = 9;
kav_wiz.c:  if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:/*    if ( (ch->sex == SEX_MALE && victim->sex == SEX_FEMALE) ||
kav_wiz.c:	 (ch->sex == SEX_FEMALE && victim->sex == SEX_MALE) )
kav_wiz.c:  ch->pcdata->propose = victim;
kav_wiz.c:  if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:/*    if ( (ch->sex == SEX_MALE && victim->sex == SEX_FEMALE) ||
kav_wiz.c:	 (ch->sex == SEX_FEMALE && victim->sex == SEX_MALE) )
kav_wiz.c:  ch->pcdata->propose = NULL;
kav_wiz.c:  victim->pcdata->marriage = str_dup(ch->name);
kav_wiz.c:  free_string(ch->pcdata->marriage);
kav_wiz.c:  ch->pcdata->marriage = str_dup(victim->name);
kav_wiz.c:  sprintf(buf, "%s and %s are now engaged!", ch->name, victim->name);
kav_wiz.c:  if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:  if (!str_cmp(ch->name, victim->pcdata->marriage) && !str_cmp(victim->name, ch->pcdata->marriage))
kav_wiz.c:    free_string(ch->pcdata->marriage);
kav_wiz.c:    ch->pcdata->marriage = str_dup("");
kav_wiz.c:    sprintf(buf, "%s and %s have broken up!", ch->name, victim->name);
kav_wiz.c:  if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name, obj->questmaker)) && !is_quest)
kav_wiz.c:  if (is_quest && ch->pcdata->quest < cost && !IS_JUDGE(ch))
kav_wiz.c:    sprintf(buf, "That costs %d quest points, while you only have %d.\n\r", cost, ch->pcdata->quest);
kav_wiz.c:    ch->pcdata->quest -= cost;
kav_wiz.c:  obj->questmaker = str_dup(ch->name);
magic.c:    if (ch->spl[dtype] >= 200) return;
magic.c:    if ((dice1 > ch->spl[dtype] || dice2 > ch->spl[dtype]) || (dice1==100 || dice2==100))
magic.c:      ch->spl[dtype] += 1;
magic.c:         if (ch->spl[dtype] == 1  ) sprintf(bufskill,"an apprentice of");
magic.c:    else if (ch->spl[dtype] == 26 ) sprintf(bufskill,"a student at");
magic.c:    else if (ch->spl[dtype] == 51 ) sprintf(bufskill,"a scholar at");
magic.c:    else if (ch->spl[dtype] == 76 ) sprintf(bufskill,"a magus at");
magic.c:    else if (ch->spl[dtype] == 101) sprintf(bufskill,"an adept at");
magic.c:    else if (ch->spl[dtype] == 126) sprintf(bufskill,"a mage at");
magic.c:    else if (ch->spl[dtype] == 151) sprintf(bufskill,"a warlock at");
magic.c:    else if (ch->spl[dtype] == 176) sprintf(bufskill,"a master wizard at");
magic.c:    else if (ch->spl[dtype] == 200) sprintf(bufskill,"a grand sorcerer at");
magic.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
magic.c:    if ( IS_NPC(ch) && ch->desc == NULL )
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->position < skill_table[sn].minimum_position )
magic.c:      if ( ch->move < 50 )
magic.c:      ch->move = ch->move - 50;
magic.c:	100 / ( 2 + (ch->level*12) - skill_table[sn].skill_level) );
magic.c:	    if ( ( victim = ch->fighting ) == NULL )
magic.c:	    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
magic.c:	if ( arg2[0] != '\0' && !is_name( arg2, ch->name ) )
magic.c:    if ( !IS_NPC(ch) && ch->mana < mana )
magic.c:    if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[sn] )
magic.c:	ch->mana -= mana / 2;
magic.c:	ch->mana -= mana;
magic.c:          (*skill_table[sn].spell_fun) ( sn, ch->level, ch, vo );
magic.c:          (*skill_table[sn].spell_fun) ( sn, (ch->spl[skill_table[sn].target]*.5),ch, vo );
magic.c:	for ( vch = ch->in_room->people; vch; vch = vch_next )
magic.c:	    vch_next = vch->next_in_room;
magic.c:	    victim = ch->fighting;
magic.c:	for ( vch = ch->in_room->people; vch; vch = vch_next )
magic.c:	    vch_next = vch->next_in_room;
magic.c:	if (dark == TRUE) REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
magic.c:	vch_next	= vch->next;
magic.c:	if ( vch->in_room == NULL || !can_see(ch, vch))
magic.c:	if ( vch->in_room == ch->in_room )
magic.c:	if ( vch->in_room->area == ch->in_room->area )
magic.c:        ch->alignment = UMAX(-1000, ch->alignment - 200);
magic.c:	dam		 = ch->hit + 1;
magic.c:	    ch->hit		+= dam;
magic.c:	    if (ch->hit > (2*ch->max_hit))
magic.c:	    	ch->hit = (2 * ch->max_hit);
magic.c:  if ( (mount = ch->mount) == NULL ) return;
magic.c:  char_to_room( mount, ch->in_room );
magic.c:  for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
magic.c:    if (ich==ch || ich->trust > 6) continue;
magic.c:    REMOVE_BIT(ich->affected_by, AFF_HIDE);
magic.c:    REMOVE_BIT(ich->affected_by, AFF_INVISIBLE);
magic.c:    REMOVE_BIT(ich->affected_by, AFF_SNEAK);
magic.c:    REMOVE_BIT(ich->act, PLR_WIZINVIS);
magic.c:    REMOVE_BIT(ich->act, AFF_HIDE);
magic.c:    REMOVE_BIT(ich->affected_by, AFF_SHADOWPLANE);
magic.c:    REMOVE_BIT(ich->affected_by, AFF_ETHEREAL);
magic.c:  REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
magic.c:  for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
magic.c:      ich->hit += number_range(150,250);
magic.c:      if (ich->hit > ich->max_hit) ich->hit=ich->max_hit;
magic.c:  if (!ch->in_room)
magic.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
magic.c:  if (ch->pcdata->quest < 50)
magic.c:  ch->pcdata->quest -= 50;
magic.c:  obj->value[0]  = ch->in_room->vnum;
magic.c:  obj->questmaker = str_dup(ch->pcdata->switchname);
magic.c:  obj->questowner = str_dup(ch->pcdata->switchname);
magic.c:  obj->ownerid = ch->pcdata->playerid;
magic.c:    if (!IS_NPC(victim) && ch->level < 3 && victim->level > 2)
magic.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
magic.c:    if (!IS_NPC(victim) && IS_EXTRA(victim, EXTRA_PREGNANT) && ch->sex == SEX_FEMALE)
magic.c:    ||   victim->in_room->area != ch->in_room->area
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    if ( (mount = ch->mount) == NULL ) return;
magic.c:    char_to_room( mount, ch->in_room );
magic.c:    hpch = UMAX( 10, ch->hit );
magic.c:    if (ch->wpn[1]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[2]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[4]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[5]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[6]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[7]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[8]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[9]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[10] > ch->wpn[weapontype])
magic.c:    if (ch->wpn[11] > ch->wpn[weapontype])
magic.c:    if (ch->wpn[12] > ch->wpn[weapontype])
magic.c:    sprintf(buf,"%s soul %s",ch->name,wpnname);
magic.c:    if (IS_NPC(ch)) sprintf(buf,"%s's soul %s",ch->short_descr,wpnname);
magic.c:    else sprintf(buf,"%s's soul %s",ch->pcdata->switchname,wpnname);
magic.c:    if (IS_NPC(ch)) sprintf(buf,"%s's soul %s is lying here.",ch->short_descr,wpnname);
magic.c:    else sprintf(buf,"%s's soul %s is lying here.",ch->name,wpnname);
magic.c:    if (IS_NPC(ch)) obj->level = ch->level;
magic.c:    else if (ch->spl[2] > 4) obj->level = ch->spl[2]/4;
magic.c:    obj->questmaker = str_dup(ch->name);
magic.c:	obj->questowner = str_dup(ch->pcdata->switchname);
magic.c:    obj->ownerid = ch->pcdata->playerid;
magic.c:    if ( ch->move < 50 )
magic.c:    ch->move = ch->move - 50;
magic.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
magic.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
magic.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
magic.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
magic.c:    obj->value[3] = ch->in_room->vnum;
magic.c:    obj_to_room( obj, ch->in_room );
magic.c:    obj->value[0] = ch->in_room->vnum;
magic.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
magic.c:    if (ch->carry_weight >= can_carry_w( ch ) )
magic.c:    sprintf(buf,"%s %s",ch->name,itemkind);
magic.c:    sprintf(buf,"%s's %s",ch->name, itemkind);
magic.c:    sprintf(buf,"%s's %s lies here.",ch->name,itemkind);
magic.c:    obj->questmaker=str_dup(ch->name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:    	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:    	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:    	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:    	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:    	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s potion %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s potion of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:    	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:    	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:    	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:    	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:    	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s scroll %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s scroll of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:    	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:    	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:    	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:    	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:    	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s wand %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s wand of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level ) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:    	{obj->value[0] = (ch->spl[1]+1)/4;sprintf(col,"red");}
magic.c:    	{obj->value[0] = (ch->spl[2]+1)/4;sprintf(col,"blue");}
magic.c:    sprintf(buf,"%s staff %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s staff of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level ) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:    	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:    	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:    	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:    	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:    	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s pill %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s pill of %s",ch->name,col,skill_table[sn].name);
magic.c:    if (ch->pcdata->followers > 4)
magic.c:    ch->pcdata->followers++;
magic.c:	sprintf(buf,"%s's white pegasus",ch->name);
magic.c:	sprintf(buf,"%s's griffin",ch->name);
magic.c:	sprintf(buf,"%s's black nightmare",ch->name);
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
magic.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
mccp.c:    if (!ch->desc) {
mccp.c:    if (!ch->desc->out_compress) {
mccp.c:        if (!compressStart(ch->desc)) {
mccp.c:       if (!compressEnd(ch->desc)) {
mccp.c:    if (gch->level > 6) continue;
mccp.c:    if (gch->desc->out_compress)
mccp.c:      sprintf(buf, "%-15s uses mccp\n\r", gch->name);
mccp.c:      sprintf(buf,"%-15s Does not use mccp.\n\r", gch->name);
msp.c:  if (IS_SET(ch->act, PLR_MUSIC))
msp.c:    REMOVE_BIT(ch->act, PLR_MUSIC);
msp.c:    SET_BIT(ch->act, PLR_MUSIC);
msp.c:  if (IS_SET(ch->act, PLR_SOUND))
msp.c:    REMOVE_BIT(ch->act, PLR_SOUND);
msp.c:    SET_BIT(ch->act, PLR_SOUND);
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!IS_SET(ch->act, PLR_SOUND)) return;
msp.c:  if (!ch->in_room || !ch->in_room->area) return;
msp.c:  if (!IS_SET(ch->act, PLR_MUSIC)) return;
msp.c:    ch->in_room->area->music, SOUND_URL);
necromancer.c:    location = ch->in_room;
necromancer.c: if (ch->practice < 1000)
necromancer.c:if (ch->in_room->vnum >= 79000 && ch->in_room->vnum <= 80000)
necromancer.c:    ch->practice -= 1000;  
necromancer.c:        int       totaldam = ch->hit;
necromancer.c:        if (ch->mana < 50)
necromancer.c:        for (ich = ch->in_room->people; dummychar != NULL; ich = dummychar)
necromancer.c:                dummychar = ich->next_in_room;
necromancer.c:                dam = UMIN(totaldam, ich->hit + 10);
necromancer.c:                if (ich->position > POS_STUNNED && ich != ch)
necromancer.c:                        if (ch->fighting == NULL)
necromancer.c:                        if (ich->fighting == NULL)
necromancer.c:        ch->mana -= 50; // ch->mana / 2;
necromancer.c:                if (!(arg2[0] == '\0') || ch->fighting != NULL)
necromancer.c:                                victim = ch->fighting;
necromancer.c:                        if (ch->pcdata->powers[POWER_TICK] > 0)
necromancer.c:                        ch->pcdata->powers[POWER_TICK] = 4;
necromancer.c:                if (!(arg2[0] == '\0') || ch->fighting != NULL)
necromancer.c:                                victim = ch->fighting;
necromancer.c:                        if (ch->pcdata->powers[POWER_TICK] > 0)
necromancer.c:                        ch->pcdata->powers[POWER_TICK] = 3;
necromancer.c:                        if (ch->pcdata->powers[POWER_TICK] > 0)
necromancer.c:                                if (ch->fighting == NULL)
necromancer.c:                                ch->pcdata->powers[POWER_TICK] = 5;
necromancer.c:                        ch->level = 12;
necromancer.c:                        ch->level = 3;
necromancer.c:                        ch->pcdata->powers[POWER_TICK] = 2;
necromancer.c:                if (ch->pcdata->powers[POWER_TICK] > 2)
necromancer.c:                ich_next = ch->in_room->people;
necromancer.c:                        ich_next = ich->next_in_room;
necromancer.c:                ch->pcdata->powers[POWER_TICK] += 1;
necromancer.c:  if (IS_SET (ch->in_room->room_flags, ROOM_ASTRAL))
necromancer.c:  if (ch->move < 500)
olc_act.c:  pArea = ch->in_room->area;
olc_act.c:  pArea = ch->in_room->area;
olc_act.c:  pArea = ch->in_room->area;
olc_act.c:    ch->desc->pEdit = (void *) pMob;
olc_act.c:  ch->desc->pEdit = (void *) ch->in_room;
olc_act.c:    ch->desc->pEdit = (void *) pObj;
olc_act.c:  ch->desc->pEdit = (void *) ch->in_room;
olc_act.c:  ch->desc->pEdit = (void *) pArea;
olc_act.c:  if (value > ch->pcdata->security || value < 0)
olc_act.c:    if (ch->pcdata->security != 0)
olc_act.c:      sprintf(buf, "Security is 0-%d.\n\r", ch->pcdata->security);
olc_act.c:  for (rch = pRoom->people; rch; rch = rch->next_in_room)
olc_act.c:    one_argument(rch->name, buf);
olc_act.c:    pExit->to_room = ch->in_room; /* Assign data.   */
olc_act.c:    pExit->vnum = ch->in_room->vnum;
olc_act.c:  ch->desc->pEdit = (void *) pRoom;
olc_act.c:  if (!IS_BUILDER(ch, pArea) && ch->level < 12)
olc_act.c:  ch->desc->pEdit = (void *) pObj;
olc_act.c:  ch->desc->pEdit = (void *) pMob;
olc_act.c:      ch->desc->pEdit = (void *) tHelp;
olc_act.c:  ch->desc->pEdit = (void *) pHelp;
olc.c:  switch (ch->desc->editor)
olc.c:  switch (ch->desc->editor)
olc.c:      pArea = (AREA_DATA *) ch->desc->pEdit;
olc.c:      pRoom = ch->in_room;
olc.c:      pObj = (OBJ_INDEX_DATA *) ch->desc->pEdit;
olc.c:      pMob = (MOB_INDEX_DATA *) ch->desc->pEdit;
olc.c:  switch (ch->desc->editor)
olc.c:  ch->desc->pEdit = NULL;
olc.c:  ch->desc->editor = 0;
olc.c:  pArea = ch->in_room->area;
olc.c:  if (ch->trust < MAX_LEVEL)
olc.c:    if (ch->desc->editor == ED_AREA)
olc.c:      reset_area((AREA_DATA *) ch->desc->pEdit);
olc.c:      ch->desc->editor = ED_AREA;
olc.c:      pArea = (AREA_DATA *) ch->desc->pEdit;
olc.c:  ch->desc->pEdit = (void *) pArea;
olc.c:  ch->desc->editor = ED_AREA;
olc.c:  pRoom = ch->in_room;
olc.c:  if (ch->trust < MAX_LEVEL)
olc.c:      char_to_room(ch, ch->desc->pEdit);
olc.c:  ch->desc->editor = ED_ROOM;
olc.c:    if (ch->trust < MAX_LEVEL)
olc.c:    ch->desc->pEdit = (void *) pObj;
olc.c:    ch->desc->editor = ED_OBJECT;
olc.c:      ch->desc->editor = ED_OBJECT;
olc.c:    if (ch->trust < MAX_LEVEL)
olc.c:    ch->desc->pEdit = (void *) pMob;
olc.c:    ch->desc->editor = ED_MOBILE;
olc.c:      ch->desc->editor = ED_MOBILE;
olc.c:  if (!IS_BUILDER(ch, ch->in_room->area))
olc.c:    if (ch->in_room->reset_first)
olc.c:    ROOM_INDEX_DATA *pRoom = ch->in_room;
olc.c:      if (!ch->in_room->reset_first)
olc.c:        pReset->arg3 = ch->in_room->vnum;
olc.c:          pReset->arg3 = ch->in_room->vnum;
olc.c:      add_reset(ch->in_room, pReset, atol(arg1));
olc.c:  if (ch->pcdata->security < 2)
olc.c:  if (ch->level < (MAX_LEVEL - 10))
olc.c:    ch->desc->editor = ED_HELP;
olc.c:    ch->desc->editor = ED_HELP;
olc.c:    ch->desc->editor = ED_HELP;
olc.c:    ch->desc->editor = ED_HELP;
olc.c:    ch->desc->editor = ED_HELP;
olc_save.c:  if (ch->pcdata->security < 2)
olc_save.c:    if (ch->level > 6)
olc_save.c:    switch (ch->desc->editor)
olc_save.c:        pArea = (AREA_DATA *) ch->desc->pEdit;
olc_save.c:        pArea = ch->in_room->area;
olc_save.c:        pArea = ((OBJ_INDEX_DATA *) ch->desc->pEdit)->area;
olc_save.c:        pArea = ((MOB_INDEX_DATA *) ch->desc->pEdit)->area;
olc_save.c:        pArea = ch->in_room->area;
pyromancer.c:    if (ch->fighting == NULL) 
pyromancer.c:    else victim = ch->fighting;
pyromancer.c: if (ch->mana < 100 )
pyromancer.c:  if ((victim = ch->fighting) == NULL)
pyromancer.c:  ch->mana -= 100;
pyromancer.c:     sprintf(buf, "%s's blast of #rf#Rl#ra#Rm#re #Rimmolates#n you [#r%d#n]\n\r", ch->name, dam);
pyromancer.c://     fire_effect(victim,ch->explevel,dam,TARGET_CHAR);
pyromancer.c:    if (ch->fighting == NULL) 
pyromancer.c:    else victim = ch->fighting;
pyromancer.c:  if (IS_SET(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFLAME))
pyromancer.c:    REMOVE_BIT(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFLAME);
pyromancer.c:  SET_BIT(ch->pcdata->powers[ELEMENTAL_POWERS], ELEMENTAL_ENFLAME);
pyromancer.c:        if (ch->pcRaceLevel < 50)
pyromancer.c:	if ( ch->practice < 1500)
pyromancer.c:		 ch->practice -= 1500;
save.c:    if ( IS_NPC(ch) || ch->level < 2 )
save.c:    if (ch->pcdata->playerid == 0)
save.c:      ch->pcdata->playerid = get_next_playerid();
save.c:    if ( ch->desc != NULL && ch->desc->connected != CON_PLAYING )
save.c:    ch->save_time = current_time;
save.c:    sprintf( strsave, "%s%s", PLAYER_DIR, capitalize( ch->pcdata->switchname ) );
save.c:	if ( ch->carrying != NULL )
save.c:	    fwrite_obj( ch, ch->carrying, fp, 0 );
save.c:    if ( IS_NPC(ch) || ch->level < 2 )
save.c:    ch->save_time = current_time;
save.c:    sprintf( strsave, "%sbackup/%s", PLAYER_DIR, capitalize(ch->pcdata->switchname) );
save.c:	fprintf( fp, "%s~\n",   ch->name                );
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->title       );
save.c:	fprintf( fp, "%s~\n",   ch->lasthost            );
save.c:	fprintf( fp, "%s~\n",   ch->lasttime            );
save.c:	fprintf( fp, "%d\n",    ch->extra               );
save.c:	fprintf( fp, "%d\n",    ch->sex                 );
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->conception  );
save.c:	fprintf( fp, "%s~\n",   ch->createtime          );
save.c:	fprintf( fp, "%d\n",    ch->level               );
save.c:	    ch->played + (int) (current_time - ch->logon));
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->marriage    );
save.c:	fprintf( fp, "%d\n",    ch->pkill );
save.c:	fprintf( fp, "%d\n",    ch->pdeath );
save.c:	fprintf( fp, "%d\n",    ch->pcdata->awins       );
save.c:	fprintf( fp, "%d\n",    ch->pcdata->alosses     );
save.c:	fprintf( fp, "%d\n",    ch->mkill );
save.c:	fprintf( fp, "%d\n",    ch->mdeath );
save.c:    fprintf( fp, "Name         %s~\n",  ch->name                );
save.c:    fprintf( fp, "Switchname   %s~\n",  ch->pcdata->switchname  );
save.c:    fprintf( fp, "PlayerID     %d\n",   ch->pcdata->playerid    );
save.c:    fprintf( fp, "ShortDescr   %s~\n",  ch->short_descr         );
save.c:    fprintf( fp, "LongDescr    %s~\n",  ch->long_descr          );
save.c:    fprintf( fp, "Description  %s~\n",  ch->description         );
save.c:    fprintf( fp, "Class        %d\n",   ch->class               );
save.c:    fprintf( fp, "Morph        %s~\n",  ch->morph               );
save.c:    fprintf( fp, "Createtime   %s~\n",  ch->createtime          );
save.c:    fprintf( fp, "Lasttime     %s~\n",  ch->lasttime            );
save.c:    fprintf( fp, "Lasthost     %s~\n",  ch->lasthost            );
save.c:    fprintf( fp, "Prompt       %s~\n",  ch->prompt              );
save.c:    fprintf( fp, "Cprompt      %s~\n",  ch->cprompt             );
save.c:    fprintf( fp, "Decapmessage  %s~\n",  ch->pcdata->decapmessage  );
save.c:    fprintf( fp, "Loginmessage  %s~\n",  ch->pcdata->loginmessage  );
save.c:    fprintf( fp, "Logoutmessage %s~\n",  ch->pcdata->logoutmessage );
save.c:    fprintf( fp, "Avatarmessage %s~\n",  ch->pcdata->avatarmessage );
save.c:    fprintf( fp, "Tiemessage    %s~\n",  ch->pcdata->tiemessage );
save.c:    fprintf( fp, "Jflags       %d\n",   ch->pcdata->jflags	);
save.c:    fprintf( fp, "Sex          %d\n",   ch->sex                 );
save.c:    fprintf( fp, "Meanparadox  %d\n",   ch->pcdata->mean_paradox_counter   );
save.c:    fprintf( fp, "Timetick     %d\n",   ch->pcdata->time_tick   );
save.c:    fprintf( fp, "Revision     %d\n",   ch->pcdata->revision   );
save.c:    fprintf( fp, "Immune       %d\n",   ch->immune              );
save.c:    fprintf( fp, "Polyaff      %d\n",   ch->polyaff             );
save.c:        fprintf(fp, "PlayerRank   %d\n", ch->pRank);
save.c:        fprintf(fp, "PlayerRace   %d\n", ch->pcRace);
save.c:	fprintf(fp, "PlayerRaceLevel %d\n", ch->pcRaceLevel);
save.c:	fprintf(fp, "PcPractice   %d\n", ch->pcpractice);
save.c:        fprintf(fp, "Pcwpnprof    %d\n", ch->pcwpnprof);
save.c:        fprintf(fp, "Pcmaxwpnprof %d\n", ch->pcmaxwpnprof);
save.c:	fprintf(fp, "Pcsphereammount %d\n", ch->pcsphereammount);
save.c:	fprintf(fp, "Pcsphere %d\n", ch->pcsphere);
save.c:	fprintf(fp, "Pcgold %d\n", ch->pcgold);
save.c:	fprintf(fp, "Pcsilver %d\n", ch->pcsilver);
save.c:	fprintf(fp, "Pccopper %d\n", ch->pccopper);
save.c:    fprintf( fp, "Generation   %d\n",   ch->generation          );
save.c:    fprintf( fp, "Flag2       %d\n",   ch->flag2              );
save.c:    fprintf( fp, "Itemaffect   %d\n",   ch->itemaffect          );
save.c:    fprintf( fp, "Form         %d\n",   ch->form                );
save.c:    fprintf( fp, "Home         %d\n",   ch->home                );
save.c:    fprintf( fp, "Level        %d\n",   ch->level               );
save.c:    fprintf( fp, "Trust        %d\n",   ch->trust               );
save.c:    fprintf( fp, "Security     %d\n",    ch->pcdata->security    );  /* OLC */
save.c:	ch->played + (int) (current_time - ch->logon)           );
save.c:	(  ch->in_room == get_room_index( ROOM_VNUM_LIMBO )
save.c:	&& ch->was_in_room != NULL )
save.c:	    ? ch->was_in_room->vnum
save.c:	    : ch->in_room->vnum );
save.c:	ch->pkill, ch->pdeath, ch->mkill, ch->mdeath );
save.c:    fprintf( fp, "Alos         %d\n", ch->pcdata->alosses);
save.c:    fprintf( fp, "Awin         %d\n", ch->pcdata->awins); 
save.c:	ch->wpn[0], ch->wpn[1], ch->wpn[2], ch->wpn[3], ch->wpn[4], 
save.c:	ch->wpn[5], ch->wpn[6], ch->wpn[7], ch->wpn[8], ch->wpn[9], 
save.c:	ch->wpn[10], ch->wpn[11], ch->wpn[12] );
save.c:	ch->spl[0], ch->spl[1], ch->spl[2], ch->spl[3], ch->spl[4] );
save.c:	ch->cmbt[0], ch->cmbt[1], ch->cmbt[2], ch->cmbt[3],
save.c:	ch->cmbt[4], ch->cmbt[5], ch->cmbt[6], ch->cmbt[7] );
save.c:	ch->stance[0], ch->stance[1], ch->stance[2], ch->stance[3],
save.c:	ch->stance[4], ch->stance[5], ch->stance[6], ch->stance[7],
save.c:	ch->stance[8], ch->stance[9], ch->stance[10], ch->stance[11] );
save.c:        ch->stance[12], ch->stance[13], ch->stance[14], ch->stance[15],
save.c:        ch->stance[16], ch->stance[17], ch->stance[18], ch->stance[19],
save.c:        ch->stance[20], ch->stance[21], ch->stance[22], ch->stance[23] );
save.c:	ch->loc_hp[0], ch->loc_hp[1], ch->loc_hp[2], ch->loc_hp[3],
save.c:	ch->loc_hp[4], ch->loc_hp[5], ch->loc_hp[6] );
save.c:	ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move, ch->max_move );
save.c:    fprintf( fp, "Exp          %d\n",   ch->exp                 );
save.c:    fprintf( fp, "Act          %d\n",   ch->act                 );
save.c:    fprintf( fp, "Special      %d\n",   ch->special             );
save.c:    fprintf( fp, "Newbits      %d\n",   ch->newbits             );
save.c:    fprintf( fp, "Extra        %d\n",   ch->extra               );
save.c:    fprintf( fp, "AffectedBy   %d\n",   ch->affected_by         );
save.c:	ch->position == POS_FIGHTING ? POS_STANDING : ch->position );
save.c:    fprintf( fp, "Practice     %d\n",   ch->practice            );
save.c:    fprintf( fp, "SavingThrow  %d\n",   ch->saving_throw        );
save.c:    fprintf( fp, "Alignment    %d\n",   ch->alignment           );
save.c:    fprintf( fp, "Hitroll      %d\n",   ch->hitroll             );
save.c:    fprintf( fp, "Damroll      %d\n",   ch->damroll             );
save.c:    fprintf( fp, "Armor        %d\n",   ch->armor               );
save.c:    fprintf( fp, "Deaf         %d\n",   ch->deaf                );
save.c:	fprintf( fp, "Vnum         %d\n",       ch->pIndexData->vnum    );
save.c:	fprintf( fp, "Password     %s~\n",      ch->pcdata->pwd         );
save.c:	fprintf( fp, "Bamfin       %s~\n",      ch->pcdata->bamfin      );
save.c:	fprintf( fp, "Bamfout      %s~\n",      ch->pcdata->bamfout     );
save.c:        fprintf( fp, "Lastdecap1      %s~\n",      ch->pcdata->last_decap[0]  );
save.c:        fprintf( fp, "Lastdecap2      %s~\n",      ch->pcdata->last_decap[1]  );
save.c:        fprintf( fp, "Retaliation     %s~\n",      ch->pcdata->retaliation    );
save.c:	fprintf( fp, "Questsrun    %d\n",	ch->pcdata->questsrun	);
save.c:	fprintf( fp, "Queststotal  %d\n",	ch->pcdata->questtotal	);
save.c:	fprintf( fp, "Title        %s~\n",      ch->pcdata->title       );
save.c:	fprintf( fp, "Bounty	    %d\n",      ch->pcdata->bounty	);
save.c:	fprintf( fp, "Conception   %s~\n",      ch->pcdata->conception  );
save.c:	fprintf( fp, "Parents      %s~\n",      ch->pcdata->parents     );
save.c:	fprintf( fp, "Cparents     %s~\n",      ch->pcdata->cparents    );
save.c:	fprintf( fp, "Marriage     %s~\n",      ch->pcdata->marriage    );
save.c:	    ch->pcdata->perm_str,
save.c:	    ch->pcdata->perm_int,
save.c:	    ch->pcdata->perm_wis,
save.c:	    ch->pcdata->perm_dex,
save.c:	    ch->pcdata->perm_con );
save.c:	    ch->pcdata->mod_str, 
save.c:	    ch->pcdata->mod_int, 
save.c:	    ch->pcdata->mod_wis,
save.c:	    ch->pcdata->mod_dex, 
save.c:	    ch->pcdata->mod_con );
save.c:	fprintf( fp, "Quest        %d\n", ch->pcdata->quest );
save.c:	    ch->pcdata->stage[0],
save.c:	    ch->pcdata->stage[1],
save.c:	    ch->pcdata->stage[2] );
save.c:	    ch->pcdata->score[0],
save.c:	    ch->pcdata->score[1],
save.c:	    ch->pcdata->score[2],
save.c:	    ch->pcdata->score[3],
save.c:	    ch->pcdata->score[4],
save.c:	    ch->pcdata->score[5]);
save.c:	    ch->pcdata->genes[0],
save.c:	    ch->pcdata->genes[1],
save.c:	    ch->pcdata->genes[2],
save.c:	    ch->pcdata->genes[3],
save.c:	    ch->pcdata->genes[4],
save.c:	    ch->pcdata->genes[5],
save.c:	    ch->pcdata->genes[6],
save.c:	    ch->pcdata->genes[7],
save.c:	    ch->pcdata->genes[8],
save.c:	    ch->pcdata->genes[9] );
save.c:		fprintf(fp, "%d ", ch->pcdata->powers[sn]);
save.c:	if (ch->pcdata->obj_vnum != 0)
save.c:	    fprintf( fp, "Objvnum      %d\n", ch->pcdata->obj_vnum );
save.c:	    ch->pcdata->condition[0],
save.c:	    ch->pcdata->condition[1],
save.c:	    ch->pcdata->condition[2] );
save.c:        fprintf( fp, "Denied       %ld\n", ch->pcdata->denied);
save.c:	fprintf (fp, "%s %ld ", boards[i].short_name, ch->pcdata->last_note[i]);
save.c:	    if ( skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0 )
save.c:		    ch->pcdata->learned[sn], skill_table[sn].name );
save.c:        for (ali = ch->pcdata->alias; ali; ali = ali->next)
save.c:        for (quest = ch->pcdata->quests; quest; quest = quest->next)
save.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
save.c:        ch->pcdata                      = alloc_perm( sizeof(*ch->pcdata) );
save.c:        ch->pcdata                      = pcdata_free;
save.c:    *ch->pcdata                         = pcdata_zero;
save.c:    ch->desc                            = d;
save.c:    ch->name                            = str_dup( name );
save.c:    ch->pcdata->switchname              = str_dup( name );
save.c:    ch->act                             = PLR_BRIEF3
save.c:    ch->pcdata->board                   = &boards[DEFAULT_BOARD];
save.c:    ch->pcdata->history                 = generate_history();
save.c:    ch->extra                           = 0;
save.c:    ch->deaf                            = CHANNEL_DKTALK; /*no danish by default */
save.c:    ch->special                         = 0;
save.c:    ch->newbits                         = 0;
save.c:    ch->class                           = 0;
save.c:    ch->amount_attacks_dealt		= 0;
save.c:    ch->amount_attacks_recieved         = 0;
save.c:    ch->amount_damage_dealt             = 0;
save.c:    ch->amount_damage_recieved          = 0;
save.c:    ch->pcdata->familiar                = NULL;   
save.c:    ch->pcdata->pfile                   = NULL;
save.c:    ch->pcdata->partner                 = NULL;
save.c:    ch->pcdata->propose                 = NULL;
save.c:    ch->pcdata->chobj                   = NULL;
save.c:    ch->pcdata->memorised               = NULL;
save.c:    ch->pcdata->safe_counter            = 0;
save.c:    ch->pcdata->mean_paradox_counter    = 0;
save.c:    ch->pcdata->time_tick               = 0;
save.c:    ch->pcdata->betting_amount          = 0;
save.c:    ch->pcdata->betting_char            = 0;
save.c:    ch->pcdata->tempflag                = 0; // always 0 at login, never saved
save.c:    ch->pcdata->denied                  = current_time;
save.c:    ch->pcdata->playerid		= 0;
save.c:    ch->pcdata->revision                = 0;
save.c:    ch->pcdata->jflags                  = 0;
save.c:    ch->pcdata->decapmessage            = str_dup( "" );
save.c:    ch->pcdata->logoutmessage           = str_dup( "" );
save.c:    ch->pcdata->avatarmessage           = str_dup( "" );
save.c:    ch->pcdata->loginmessage            = str_dup( "" );
save.c:    ch->pcdata->tiemessage              = str_dup( "" );
save.c:    ch->pcdata->last_global             = str_dup( "" );
save.c:    ch->pcdata->pwd                     = str_dup( "" );
save.c:    ch->pcdata->bamfin                  = str_dup( "" );
save.c:    ch->pcdata->last_decap[0]           = str_dup( "" );
save.c:    ch->pcdata->last_decap[1]           = str_dup( "" );
save.c:    ch->pcdata->retaliation             = str_dup( "" );
save.c:    ch->pcdata->bamfout                 = str_dup( "" );
save.c:    ch->pcdata->title                   = str_dup( "" );
save.c:    ch->pcdata->bounty                  = 0;
save.c:    ch->pcdata->conception              = str_dup( "" );
save.c:    ch->pcdata->parents                 = str_dup( "" );
save.c:    ch->pcdata->cparents                = str_dup( "" );
save.c:    ch->pcdata->marriage                = str_dup( "" );
save.c:    ch->morph                           = str_dup( "" );
save.c:    ch->pload                           = str_dup( "" );
save.c:    ch->prompt                          = str_dup( "" );
save.c:    ch->cprompt                         = str_dup( "" );
save.c:    free_string(ch->lasttime);
save.c:    ch->createtime                      = str_dup( strtime );
save.c:    ch->lasttime                        = str_dup( "" );  
save.c:    ch->lasthost                        = str_dup( "" );
save.c:    ch->hunting                         = str_dup( "" );
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->mounted                         = 0;
save.c:    ch->home                            = ROOM_VNUM_TEMPLE;
save.c:    ch->damcap[0]                       = 1000;
save.c:    ch->damcap[1]                       = 0; 
save.c:    ch->itemaffect                      = 0;
save.c:    ch->polyaff                         = 0;
save.c:    ch->immune                          = IMM_TRAVEL;
save.c:	ch->pRank = 1;
save.c:	ch->pcRace = 0;
save.c:	ch->pcRaceLevel = 0;
save.c:        ch->pcpractice = 0;
save.c:        ch->pcwpnprof = 0;
save.c:        ch->pcmaxwpnprof = 0;
save.c:        ch->pcsphereammount = 0;
save.c:        ch->pcsphere = 0;
save.c:	ch->pcgold = 0;
save.c:	ch->pcsilver = 0;
save.c:	ch->pccopper = 0;
save.c:    ch->form                            = 1048575;
save.c:        ch->loc_hp[sn]                  = 0;
save.c:         ch->wpn[sn]                    = 0;
save.c:         ch->spl[sn]                    = 0;
save.c:         ch->cmbt[sn]                   = 0;
save.c:         ch->cmbt[sn]                   = 0;
save.c:         ch->pcdata->ignore[sn]         = -1;
save.c:    ch->pkill                           = 0;      
save.c:    ch->pdeath                          = 0;   
save.c:    ch->mkill                           = 0;   
save.c:    ch->mdeath                          = 0;   
save.c:    ch->class                           = 0;   
save.c:    ch->amount_attacks_dealt            = 0;
save.c:    ch->amount_attacks_recieved         = 0;
save.c:    ch->amount_damage_dealt             = 0;
save.c:    ch->amount_damage_recieved          = 0;
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->pcdata->perm_str                = 13;
save.c:    ch->pcdata->perm_int                = 13;
save.c:    ch->pcdata->perm_wis                = 13;
save.c:    ch->pcdata->perm_dex                = 13;
save.c:    ch->pcdata->perm_con                = 13;
save.c:    ch->pcdata->quest                   = 0;
save.c:    ch->pcdata->stage[0]                = 0;
save.c:    ch->pcdata->stage[1]                = 0;
save.c:    ch->pcdata->stage[2]                = 0;
save.c:    ch->pcdata->score[0]                = 0;
save.c:    ch->pcdata->score[1]                = 0; 
save.c:    ch->pcdata->score[2]                = 0;
save.c:    ch->pcdata->score[3]                = 0;
save.c:    ch->pcdata->score[4]                = 0;
save.c:    ch->pcdata->score[5]                = 0;
save.c:         ch->pcdata->genes[sn]          = 0;
save.c:        ch->pcdata->powers[sn]          = 0;
save.c:    ch->pcdata->security                = 0;    /* OLC */
save.c:    ch->pcdata->obj_vnum                = 0;
save.c:    ch->pcdata->condition[COND_THIRST]  = 48;
save.c:    ch->pcdata->condition[COND_FULL]    = 48;
save.c:	ch->pcdata                      = alloc_perm( sizeof(*ch->pcdata) );
save.c:	ch->pcdata                      = pcdata_free;
save.c:    *ch->pcdata                         = pcdata_zero;
save.c:    ch->desc                            = d;
save.c:    ch->name                            = str_dup( name );
save.c:    ch->pcdata->switchname              = str_dup( name );
save.c:    ch->act                             = PLR_BRIEF3
save.c:    ch->pcdata->board                   = &boards[DEFAULT_BOARD];
save.c:    ch->pcdata->history                 = generate_history();
save.c:    ch->extra                           = 0;
save.c:    ch->deaf				= CHANNEL_DKTALK; /*no danish by default */
save.c:    ch->special                         = 0;
save.c:    ch->newbits                         = 0;
save.c:    ch->class                           = 0;
save.c:    ch->pcdata->familiar                = NULL;
save.c:    ch->pcdata->pfile                   = NULL;
save.c:    ch->pcdata->partner                 = NULL;
save.c:    ch->pcdata->propose                 = NULL;
save.c:    ch->pcdata->chobj                   = NULL;
save.c:    ch->pcdata->memorised               = NULL;
save.c:    ch->pcdata->safe_counter		= 0;
save.c:    ch->pcdata->mean_paradox_counter	= 0;
save.c:    ch->pcdata->betting_amount          = 0;
save.c:    ch->pcdata->betting_char            = 0;
save.c:    ch->pcdata->tempflag                = 0; // always 0 at login, never saved 
save.c:    ch->pcdata->denied                  = current_time;
save.c:    ch->pcdata->playerid                = 0;
save.c:    ch->pcdata->time_tick               = 0;
save.c:    ch->pcdata->revision                = 0;
save.c:    ch->pcdata->jflags                  = 0;
save.c:    ch->pcdata->decapmessage            = str_dup( "" );
save.c:    ch->pcdata->avatarmessage           = str_dup( "" );
save.c:    ch->pcdata->logoutmessage           = str_dup( "" );
save.c:    ch->pcdata->loginmessage            = str_dup( "" );
save.c:    ch->pcdata->tiemessage              = str_dup( "" );
save.c:    ch->pcdata->last_global             = str_dup( "" );
save.c:    ch->pcdata->pwd                     = str_dup( "" );
save.c:    ch->pcdata->bamfin                  = str_dup( "" );
save.c:    ch->pcdata->bamfout                 = str_dup( "" );
save.c:    ch->pcdata->last_decap[0]           = str_dup( "" );
save.c:    ch->pcdata->last_decap[1]           = str_dup( "" );
save.c:    ch->pcdata->retaliation             = str_dup( "" );
save.c:    ch->pcdata->title                   = str_dup( "" );
save.c:    ch->pcdata->bounty			= 0;
save.c:    ch->pcdata->conception              = str_dup( "" );
save.c:    ch->pcdata->parents                 = str_dup( "" );
save.c:    ch->pcdata->cparents                = str_dup( "" );
save.c:    ch->pcdata->marriage                = str_dup( "" );
save.c:    ch->morph                           = str_dup( "" );
save.c:    ch->pload                           = str_dup( "" );
save.c:    ch->prompt                          = str_dup( "" );
save.c:    ch->cprompt                         = str_dup( "" );
save.c:    free_string(ch->lasttime);
save.c:    ch->createtime                      = str_dup( strtime );
save.c:    ch->lasttime                        = str_dup( "" );
save.c:    ch->lasthost                        = str_dup( "" );
save.c:    ch->hunting                         = str_dup( "" );
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->mounted                         = 0;
save.c:    ch->home                            = ROOM_VNUM_TEMPLE;
save.c:    ch->damcap[0]                       = 1000;
save.c:    ch->damcap[1]                       = 0;
save.c:    ch->itemaffect                      = 0;
save.c:    ch->polyaff                         = 0;
save.c:    ch->immune                          = IMM_TRAVEL;
save.c:	ch->pRank   = 1;
save.c:	ch->pcRace = 0;
save.c:	ch->pcRaceLevel = 0;
save.c:        ch->pcpractice = 0;
save.c:        ch->pcwpnprof = 0;
save.c:        ch->pcmaxwpnprof = 0;
save.c:        ch->pcsphereammount = 0;
save.c:        ch->pcsphere = 0;
save.c:        ch->pcgold = 0;
save.c:        ch->pcsilver = 0;
save.c:        ch->pccopper = 0;
save.c:    ch->form                            = 1048575;
save.c:	ch->loc_hp[sn]                  = 0;
save.c:	 ch->wpn[sn]                    = 0;
save.c:	 ch->spl[sn]                    = 0;
save.c:	 ch->cmbt[sn]                   = 0;
save.c:	 ch->cmbt[sn]                   = 0;
save.c:         ch->pcdata->ignore[sn]         = -1;
save.c:    ch->pkill                           = 0;
save.c:    ch->pdeath                          = 0;
save.c:    ch->mkill                           = 0;
save.c:    ch->mdeath                          = 0;
save.c:    ch->class                           = 0;
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->pcdata->perm_str                = 13;
save.c:    ch->pcdata->perm_int                = 13; 
save.c:    ch->pcdata->perm_wis                = 13;
save.c:    ch->pcdata->perm_dex                = 13;
save.c:    ch->pcdata->perm_con                = 13;
save.c:    ch->pcdata->quest                   = 0;
save.c:    ch->pcdata->stage[0]                = 0;
save.c:    ch->pcdata->stage[1]                = 0;
save.c:    ch->pcdata->stage[2]                = 0;
save.c:    ch->pcdata->score[0]                = 0;
save.c:    ch->pcdata->score[1]                = 0;
save.c:    ch->pcdata->score[2]                = 0;
save.c:    ch->pcdata->score[3]                = 0;
save.c:    ch->pcdata->score[4]                = 0;
save.c:    ch->pcdata->score[5]                = 0;
save.c:	 ch->pcdata->genes[sn]          = 0;
save.c:	ch->pcdata->powers[sn]          = 0;
save.c:    ch->pcdata->security                = 0;    /* OLC */
save.c:    ch->pcdata->obj_vnum                = 0;
save.c:    ch->pcdata->condition[COND_THIRST]  = 48;
save.c:    ch->pcdata->condition[COND_FULL]    = 48;
save.c:	    KEY( "Act",         ch->act,                fread_number( fp ) );
save.c:	    KEY( "AffectedBy",  ch->affected_by,        fread_number( fp ) );
save.c:	    KEY( "Alignment",   ch->alignment,          fread_number( fp ) );
save.c:	    KEY( "Armor",       ch->armor,              fread_number( fp ) );
save.c:            KEY( "Avatarmessage", ch->pcdata->avatarmessage,  fread_string( fp ) );
save.c:	    KEY( "Awin",        ch->pcdata->awins,      fread_number( fp ) );
save.c:	    KEY( "Alos",        ch->pcdata->alosses,    fread_number( fp ) );
save.c:		paf->next       = ch->affected;
save.c:		ch->affected    = paf;
save.c:		ch->pcdata->mod_str  = fread_number( fp );
save.c:		ch->pcdata->mod_int  = fread_number( fp );
save.c:		ch->pcdata->mod_wis  = fread_number( fp );
save.c:		ch->pcdata->mod_dex  = fread_number( fp );
save.c:		ch->pcdata->mod_con  = fread_number( fp );
save.c:		ch->pcdata->perm_str = fread_number( fp );
save.c:		ch->pcdata->perm_int = fread_number( fp );
save.c:		ch->pcdata->perm_wis = fread_number( fp );
save.c:		ch->pcdata->perm_dex = fread_number( fp );
save.c:		ch->pcdata->perm_con = fread_number( fp );
save.c:              ali->next = ch->pcdata->alias;
save.c:              ch->pcdata->alias = ali;
save.c:              ch->pcdata->alias_count++;
save.c:	    KEY( "Bamfin",      ch->pcdata->bamfin,     fread_string( fp ) );
save.c:	    KEY( "Bamfout",     ch->pcdata->bamfout,    fread_string( fp ) );
save.c:       	    KEY( "Bounty",  ch->pcdata->bounty, fread_number( fp ));
save.c:					sprintf (buf, "fread_char: %s had unknown board name: %s. Skipped.", ch->name, boardname);                                      
save.c:					ch->pcdata->last_note[i] = fread_number(fp);
save.c:        KEY( "Class",       ch->class,              fread_number( fp ) );
save.c:		ch->cmbt[0]     = fread_number( fp );
save.c:		ch->cmbt[1]     = fread_number( fp );
save.c:		ch->cmbt[2]     = fread_number( fp );
save.c:		ch->cmbt[3]     = fread_number( fp );
save.c:		ch->cmbt[4]     = fread_number( fp );
save.c:		ch->cmbt[5]     = fread_number( fp );
save.c:		ch->cmbt[6]     = fread_number( fp );
save.c:		ch->cmbt[7]     = fread_number( fp );
save.c:	    KEY( "Conception",  ch->pcdata->conception, fread_string( fp ) );
save.c:		ch->pcdata->condition[0] = fread_number( fp );
save.c:		ch->pcdata->condition[1] = fread_number( fp );
save.c:		ch->pcdata->condition[2] = fread_number( fp );
save.c:	    KEY( "Cparents",    ch->pcdata->cparents,   fread_string( fp ) );
save.c:	    KEY( "Cprompt",     ch->cprompt,            fread_string( fp ) );
save.c:	    KEY( "Createtime",  ch->createtime,         fread_string( fp ) );
save.c:	    KEY( "Damroll",     ch->damroll,            fread_number( fp ) );
save.c:	    KEY( "Deaf",        ch->deaf,               fread_number( fp ) );
save.c:            KEY( "Decapmessage", ch->pcdata->decapmessage,  fread_string( fp ));
save.c:            KEY( "Denied",      ch->pcdata->denied,     fread_number( fp ) );
save.c:	    KEY( "Description", ch->description,        fread_string( fp ) );
save.c:	    KEY( "Exp",         ch->exp,                fread_number( fp ) );
save.c:	    KEY( "Extra",       ch->extra,              fread_number( fp ) );
save.c:	KEY( "Flag2",  ch->flag2, fread_number( fp ) );
save.c:            KEY( "Form",        ch->form,               fread_number( fp ) );
save.c:	KEY( "Generation", ch->generation, fread_number( fp ) );
save.c:		ch->pcdata->genes[0] = fread_number( fp );
save.c:		ch->pcdata->genes[1] = fread_number( fp );
save.c:		ch->pcdata->genes[2] = fread_number( fp );
save.c:		ch->pcdata->genes[3] = fread_number( fp );
save.c:		ch->pcdata->genes[4] = fread_number( fp );
save.c:		ch->pcdata->genes[5] = fread_number( fp );
save.c:		ch->pcdata->genes[6] = fread_number( fp );
save.c:		ch->pcdata->genes[7] = fread_number( fp );
save.c:		ch->pcdata->genes[8] = fread_number( fp );
save.c:		ch->pcdata->genes[9] = fread_number( fp );
save.c:	    KEY( "Hitroll",     ch->hitroll,            fread_number( fp ) );
save.c:	    KEY( "Home",        ch->home,               fread_number( fp ) );
save.c:		ch->hit         = fread_number( fp );
save.c:		ch->max_hit     = fread_number( fp );
save.c:		ch->mana        = fread_number( fp );
save.c:		ch->max_mana    = fread_number( fp );
save.c:		ch->move        = fread_number( fp );
save.c:		ch->max_move    = fread_number( fp );
save.c:	    KEY( "Immune",        ch->immune,           fread_number( fp ) );
save.c:	    KEY( "Itemaffect",    ch->itemaffect,       fread_number( fp ) );
save.c:            KEY( "Jflags",        ch->pcdata->jflags,   fread_number( fp ) );
save.c:	    KEY( "Lasthost",    ch->lasthost,           fread_string( fp ) );
save.c:            KEY( "Lastdecap1",  ch->pcdata->last_decap[0],     fread_string( fp ) );
save.c:            KEY( "Lastdecap2",  ch->pcdata->last_decap[1],     fread_string( fp ) );
save.c:	    KEY( "Lasttime",    ch->lasttime,           fread_string( fp ) );
save.c:	    KEY( "Level",       ch->level,              fread_number( fp ) );
save.c:		ch->loc_hp[0]   = fread_number( fp );
save.c:		ch->loc_hp[1]   = fread_number( fp );
save.c:		ch->loc_hp[2]   = fread_number( fp );
save.c:		ch->loc_hp[3]   = fread_number( fp );
save.c:		ch->loc_hp[4]   = fread_number( fp );
save.c:		ch->loc_hp[5]   = fread_number( fp );
save.c:		ch->loc_hp[6]   = fread_number( fp );
save.c:            KEY( "Loginmessage", ch->pcdata->loginmessage,  fread_string( fp ) );
save.c:            KEY( "Logoutmessage", ch->pcdata->logoutmessage,  fread_string( fp ) );
save.c:	    KEY( "LongDescr",   ch->long_descr,         fread_string( fp ) );
save.c:        KEY( "Meanparadox",       ch->pcdata->mean_paradox_counter, fread_number( fp ) );
save.c:	    KEY( "Marriage",    ch->pcdata->marriage,   fread_string( fp ) );
save.c:	    KEY( "Morph",       ch->morph,              fread_string( fp ) );
save.c:	    KEY( "Newbits",     ch->newbits,    fread_number( fp ) );
save.c:	    KEY( "Objvnum",     ch->pcdata->obj_vnum,   fread_number( fp ) );
save.c:                        KEY("PlayerRank", ch->pRank, fread_number( fp ) );
save.c:			KEY("PlayerRace", ch->pcRace, fread_number( fp ) );
save.c:			KEY("PlayerRaceLevel", ch->pcRaceLevel, fread_number( fp ) );
save.c:			KEY("PcPractice", ch->pcpractice, fread_number( fp ) );
save.c:                        KEY("Pcwpnprof", ch->pcwpnprof, fread_number( fp ) );
save.c:                        KEY("Pcmaxwpnprof", ch->pcmaxwpnprof, fread_number( fp ) );
save.c:                        KEY("Pcsphereammount", ch->pcsphereammount, fread_number( fp ) );
save.c:                        KEY("Pcsphere", ch->pcsphere, fread_number( fp ) );
save.c:			KEY("Pcgold", ch->pcgold, fread_number( fp ) );
save.c:                        KEY("Pcsilver", ch->pcsilver, fread_number( fp ) );
save.c:                        KEY("Pccopper", ch->pccopper, fread_number( fp ) );
save.c:	    KEY( "Parents",     ch->pcdata->parents,    fread_string( fp ) );
save.c:	    KEY( "Password",    ch->pcdata->pwd,        fread_string( fp ) );
save.c:	    KEY( "Played",      ch->played,             fread_number( fp ) );
save.c:            KEY( "PlayerID",    ch->pcdata->playerid,   fread_number( fp ) );
save.c:	    KEY( "Polyaff",     ch->polyaff,            fread_number( fp ) );
save.c:			ch->pcdata->powers[sn] = fread_number( fp );
save.c:	    KEY( "Position",    ch->position,           fread_number( fp ) );
save.c:	    KEY( "Practice",    ch->practice,           fread_number( fp ) );
save.c:		ch->pkill       = fread_number( fp );
save.c:		ch->pdeath      = fread_number( fp );
save.c:		ch->mkill       = fread_number( fp );
save.c:		ch->mdeath      = fread_number( fp );
save.c:	    KEY( "Prompt",      ch->prompt,             fread_string( fp ) );
save.c:	    KEY( "Quest",        ch->pcdata->quest,     fread_number( fp ) );
save.c:	    KEY( "Questsrun",	 ch->pcdata->questsrun, fread_number( fp ) );
save.c:	    KEY( "Queststotal",	 ch->pcdata->questtotal, fread_number( fp ) );
save.c:              quest->next = ch->pcdata->quests;
save.c:              ch->pcdata->quests = quest;
save.c:            KEY( "Retaliation",    ch->pcdata->retaliation,   fread_string( fp ) );
save.c:            KEY( "Revision",       ch->pcdata->revision,      fread_number( fp ) );
save.c:		ch->in_room = get_room_index( fread_number( fp ) );
save.c:		if ( ch->in_room == NULL )
save.c:		    ch->in_room = get_room_index( ROOM_VNUM_LIMBO );
save.c:	    KEY( "SavingThrow", ch->saving_throw,       fread_number( fp ) );
save.c:	    KEY( "Switchname",  ch->pcdata->switchname, fread_string( fp ) );
save.c:		ch->pcdata->score[0] = fread_number( fp );
save.c:		ch->pcdata->score[1] = fread_number( fp );
save.c:		ch->pcdata->score[2] = fread_number( fp );
save.c:		ch->pcdata->score[3] = fread_number( fp );
save.c:		ch->pcdata->score[4] = fread_number( fp );
save.c:		ch->pcdata->score[5] = fread_number( fp );
save.c:	    KEY( "Sex",         ch->sex,                fread_number( fp ) );
save.c:	    KEY( "ShortDescr",  ch->short_descr,        fread_string( fp ) );
save.c:		KEY( "Security", ch->pcdata->security,  fread_number(fp));
save.c:		    ch->pcdata->learned[sn] = value;
save.c:	    KEY( "Special",     ch->special,    fread_number( fp ) );
save.c:		ch->spl[0]      = fread_number( fp );
save.c:		ch->spl[1]      = fread_number( fp );
save.c:		ch->spl[2]      = fread_number( fp );
save.c:		ch->spl[3]      = fread_number( fp );
save.c:		ch->spl[4]      = fread_number( fp );
save.c:		ch->pcdata->stage[0] = fread_number( fp );
save.c:		ch->pcdata->stage[1] = fread_number( fp );
save.c:		ch->pcdata->stage[2] = fread_number( fp );
save.c:		ch->stance[0]   = fread_number( fp );
save.c:		ch->stance[1]   = fread_number( fp );
save.c:		ch->stance[2]   = fread_number( fp );
save.c:		ch->stance[3]   = fread_number( fp );
save.c:		ch->stance[4]   = fread_number( fp );
save.c:		ch->stance[5]   = fread_number( fp );
save.c:		ch->stance[6]   = fread_number( fp );
save.c:		ch->stance[7]   = fread_number( fp );
save.c:		ch->stance[8]   = fread_number( fp );
save.c:		ch->stance[9]   = fread_number( fp );
save.c:		ch->stance[10]  = fread_number( fp );
save.c:		ch->stance[11]  = fread_number( fp );
save.c:               ch->stance[12] = fread_number(fp);
save.c:               ch->stance[13] = fread_number(fp);
save.c:               ch->stance[14] = fread_number(fp);
save.c:               ch->stance[15] = fread_number(fp);
save.c:               ch->stance[16] = fread_number(fp);
save.c:               ch->stance[17] = fread_number(fp);
save.c:               ch->stance[18] = fread_number(fp);
save.c:               ch->stance[19] = fread_number(fp);
save.c:               ch->stance[20] = fread_number(fp);
save.c:               ch->stance[21] = fread_number(fp);
save.c:               ch->stance[22] = fread_number(fp);
save.c:               ch->stance[23] = fread_number(fp);
save.c:            KEY( "Tiemessage",  ch->pcdata->tiemessage,  fread_string( fp ));
save.c:	    KEY( "Trust",       ch->trust,              fread_number( fp ) );
save.c:            KEY( "Timetick",    ch->pcdata->time_tick,    fread_number( fp ) );
save.c:		ch->pcdata->title = fread_string( fp );
save.c:		if ( isalpha(ch->pcdata->title[0])
save.c:		||   isdigit(ch->pcdata->title[0]) )
save.c:		    sprintf( buf, " %s", ch->pcdata->title );
save.c:		    free_string( ch->pcdata->title );
save.c:		    ch->pcdata->title = str_dup( buf );
save.c:		ch->pIndexData = get_mob_index( fread_number( fp ) );
save.c:		ch->wpn[0]      = fread_number( fp );
save.c:		ch->wpn[1]      = fread_number( fp );
save.c:		ch->wpn[2]      = fread_number( fp );
save.c:		ch->wpn[3]      = fread_number( fp );
save.c:		ch->wpn[4]      = fread_number( fp );
save.c:		ch->wpn[5]      = fread_number( fp );
save.c:		ch->wpn[6]      = fread_number( fp );
save.c:		ch->wpn[7]      = fread_number( fp );
save.c:		ch->wpn[8]      = fread_number( fp );
save.c:		ch->wpn[9]      = fread_number( fp );
save.c:		ch->wpn[10]     = fread_number( fp );
save.c:		ch->wpn[11]     = fread_number( fp );
save.c:		ch->wpn[12]     = fread_number( fp );
special.c:    if (ch->fighting) return FALSE;
special.c:    if (!ch->fighting) return FALSE;
special.c:    if (ch->fighting) return FALSE;
special.c:    if (ch->position == POS_STANDING && !IS_AFFECTED(ch, AFF_HIDE))
special.c:    if ((victim = ch->fighting) == NULL)
special.c:    for (vch = ch->in_room->people; vch && !found; vch = vch->next_in_room)
special.c:    (*skill_table[sn].spell_fun) (sn, ch->level, ch, gch);
string.c:    ch->desc->pString = pString;
string.c:    ch->desc->pString = pString;
string.c:            **ch->desc->pString = '\0';
string.c:            send_to_char( *ch->desc->pString, ch );
string.c:            *ch->desc->pString =
string.c:                string_replace( *ch->desc->pString, arg2, arg3 );
string.c:            *ch->desc->pString = format_string( *ch->desc->pString );
string.c:        ch->desc->pString = NULL;
string.c:        ch->desc->pString = NULL;
string.c:    strcpy( buf, *ch->desc->pString );
string.c:    free_string( *ch->desc->pString );
string.c:    *ch->desc->pString = str_dup( buf );
transmuter.c:    obj->questmaker = str_dup(ch->name);
transmuter.c:    obj->questmaker = str_dup(ch->name);
transmuter.c:    if ( ch->pcdata->condition[COND_THIRST] < 40)
transmuter.c:    ch->pcdata->condition[COND_THIRST] -= number_range(30,40);
transmuter.c:	sprintf(buf,"Your form shimmers and transforms into %s.",ch->name);
transmuter.c:	sprintf(buf,"%s's form shimmers and transforms into %s.",ch->morph,ch->name);
transmuter.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
transmuter.c:    	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( "" );
transmuter.c:    	sprintf(buf,"%s's form shimmers and transforms into a clone of %s.",ch->morph,victim->name);
transmuter.c:    	sprintf(buf,"%s's form shimmers and transforms into a clone of you!",ch->morph);
transmuter.c:    	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( victim->name );
transmuter.c:    sprintf(buf,"%s's form shimmers and transforms into a clone of %s.",ch->name,victim->name);
transmuter.c:    sprintf(buf,"%s's form shimmers and transforms into a clone of you!",ch->name);
transmuter.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
transmuter.c:    free_string( ch->morph );
transmuter.c:    ch->morph = str_dup( victim->name );
transmuter.c:    	if ( ch->pcdata->condition[COND_THIRST] < 50 )
transmuter.c:	if (ch->stance[0] != -1) do_stance(ch,"");
transmuter.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
transmuter.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FLYING);
transmuter.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_SONIC);
transmuter.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_BAT);*/
transmuter.c:	SET_BIT(ch->polyaff, POLY_BAT);
transmuter.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
transmuter.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:	sprintf(buf, "%s the #0v#rampire #0b#rat#n", ch->name);
transmuter.c:    	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( buf );
transmuter.c:	if (ch->stance[0] != -1) do_stance(ch,"");
transmuter.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
transmuter.c:    	if (ch->wpn[0] > 0)
transmuter.c:	    ch->hitroll += (ch->wpn[0]);
transmuter.c:	    ch->damroll += (ch->wpn[0]);
transmuter.c:	    ch->armor   -= (ch->wpn[0] * 3);
transmuter.c:    	ch->pcdata->mod_str = 10;
transmuter.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_WOLF);*/
transmuter.c:	SET_BIT(ch->polyaff, POLY_WOLF);
transmuter.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
transmuter.c:	sprintf(buf, "%s the #0d#rire #0w#rolf#n", ch->name);
transmuter.c:    	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( buf );
transmuter.c:	if (ch->stance[0] != -1) do_stance(ch,"");
transmuter.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
transmuter.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(40,50);
transmuter.c:	    REMOVE_BIT(ch->extra, TIED_UP);
transmuter.c:	    REMOVE_BIT(ch->extra, GAGGED);
transmuter.c:	    REMOVE_BIT(ch->extra, BLINDFOLDED);
transmuter.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_MIST);*/
transmuter.c:	SET_BIT(ch->polyaff, POLY_MIST);
transmuter.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
transmuter.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:	SET_BIT(ch->affected_by, AFF_ETHEREAL);
transmuter.c:	sprintf(buf, "%s the #7w#nhite #7m#nist", ch->name);
transmuter.c:    	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( buf );
transmuter.c:	    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FLYING);
transmuter.c:	    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_SONIC);
transmuter.c:	    REMOVE_BIT(ch->polyaff, POLY_BAT);
transmuter.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_BAT);*/
transmuter.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_WOLF);*/
transmuter.c:	    REMOVE_BIT(ch->polyaff, POLY_WOLF);
transmuter.c:	    if (ch->hit < 1) ch->hit = 1;
transmuter.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_MIST);*/
transmuter.c:	    REMOVE_BIT(ch->polyaff, POLY_MIST);
transmuter.c:	    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
transmuter.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
transmuter.c:  	free_string( ch->morph );
transmuter.c:    	ch->morph = str_dup( "" );
transmuter.c:        REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
transmuter.c:        REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:        if (ch->hit < 1) ch->hit = 1;
transmuter.c:        ch->damroll = ch->damroll - 150;
transmuter.c:        ch->hitroll = ch->hitroll - 150; 
transmuter.c:        free_string( ch->morph );
transmuter.c:        ch->morph = str_dup( "" );
transmuter.c:        if (ch->stance[0] != -1) do_stance(ch,"");
transmuter.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
transmuter.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(100,200);
transmuter.c:        ch->pcdata->mod_str = 15;
transmuter.c:        ch->pcdata->mod_dex = 15;
transmuter.c:        SET_BIT(ch->polyaff, POLY_ZULOFORM);
transmuter.c:        SET_BIT(ch->affected_by, AFF_POLYMORPH);
transmuter.c:        free_string( ch->morph );
transmuter.c:        ch->morph = str_dup( buf );
transmuter.c:        ch->damroll = ch->damroll + 150;
transmuter.c:        ch->hitroll = ch->hitroll + 150;
transmuter.c:REMOVE_BIT(ch->extra,EXTRA_DRAGON);
transmuter.c:if (ch->hit < 1) ch->hit = 1;
transmuter.c:    ch->damroll = ch->damroll - 100;
transmuter.c:    ch->hitroll = ch->hitroll - 100;
transmuter.c:    free_string( ch->morph );
transmuter.c:    ch->morph = str_dup( "A big black monster" );
transmuter.c:if (ch->mounted == IS_RIDING) do_dismount(ch,"");
transmuter.c:ch->pcdata->condition[COND_THIRST] -= number_range(20,40);
transmuter.c:SET_BIT(ch->extra,EXTRA_DRAGON);
transmuter.c:sprintf(buf, "%s, the huge rabid dragon", ch->name);
transmuter.c:free_string( ch->morph );
transmuter.c:ch->morph = str_dup( buf );
transmuter.c:ch->damroll = ch->damroll + 100;
transmuter.c:ch->hitroll = ch->hitroll + 100;
update.c:  if (IS_NPC(ch) && (mount = ch->mount) != NULL && !IS_NPC(mount))
update.c:    if ((master = ch->master) == NULL || master != mount)
update.c:    ch->exp += gain;
update.c:  condition = ch->pcdata->condition[iCond];
update.c:    ch->pcdata->condition[iCond] = URANGE(0, condition + value, 48);
update.c:    ch->pcdata->condition[iCond] = URANGE(0, condition + value, 20000 / ch->generation);
update.c:  if (ch->pcdata->condition[iCond] == 0)
update.c:  else if (ch->pcdata->condition[iCond] < 10)
update.c:    ch_next = ch->next;
update.c:    if (ch->in_room == NULL)
update.c:    if (!IS_NPC(ch) && ch->hunting != NULL && ch->hunting != '\0' && strlen(ch->hunting) > 1)
update.c:      if (IS_HERO(ch) && ch->hit > 0 && !IS_SET(ch->extra, EXTRA_AFK))
update.c:        if (ch->class == 0 && IS_ITEMAFF(ch, ITEMA_REGENERATE))
update.c:        ch->hit += number_range(1, 5);
update.c:        if (ch->hit > ch->max_hit)
update.c:          ch->hit = ch->max_hit;
update.c:        if (IS_ITEMAFF(ch, ITEMA_REGENERATE) && ch->hit > 0)
update.c:      if (ch->spec_fun != 0)
update.c:        if ((*ch->spec_fun) (ch, "update"))
update.c:      if (ch->position != POS_STANDING)
update.c:      if (IS_SET(ch->act, ACT_SCAVENGER) && ch->in_room->contents != NULL && number_bits(2) == 0)
update.c:        for (obj = ch->in_room->contents; obj; obj = obj->next_content)
update.c:      if (!IS_SET(ch->act, ACT_SENTINEL) && (door = number_bits(5)) <= 5 && (pexit = ch->in_room->exit[door]) != NULL
update.c:        && (ch->hunting == NULL || strlen(ch->hunting) < 1)
update.c:        && !(IS_SET(ch->act, ACT_FISH) && pexit->to_room->sector_type != SECT_WATER_SWIM && pexit->to_room->sector_type != SECT_WATER_NOSWIM)
update.c:        && !(IS_SET(ch->act, ACT_NOSWIM) && (pexit->to_room->sector_type == SECT_WATER_SWIM || pexit->to_room->sector_type == SECT_WATER_NOSWIM))
update.c:        && ((!IS_SET(ch->act, ACT_STAY_AREA) && ch->level < 900) || pexit->to_room->area == ch->in_room->area))
update.c:      if (ch->hit < ch->max_hit / 2 && (door = number_bits(3)) <= 5 && (pexit = ch->in_room->exit[door]) != NULL
update.c:          && pexit->to_room != NULL && ch->level < 900 && !IS_SET(pexit->exit_info, EX_CLOSED) && !IS_SET(pexit->to_room->room_flags, ROOM_NO_MOB))
update.c:        for (rch = pexit->to_room->people; rch != NULL; rch = rch->next_in_room)
update.c:          if (ch->pcdata->followers > 0)
update.c:            ch->pcdata->followers = 0;
update.c:          if (IS_SET(ch->in_room->room_flags, ROOM_SILENCE))
update.c:            REMOVE_BIT(ch->in_room->room_flags, ROOM_SILENCE);
update.c:          if (IS_SET(ch->in_room->room_flags, ROOM_FLAMING))
update.c:            REMOVE_BIT(ch->in_room->room_flags, ROOM_FLAMING);
update.c:      REMOVE_BIT(ch->loc_hp[1], BROKEN_RIBS_1);
update.c:      REMOVE_BIT(ch->loc_hp[1], BROKEN_RIBS_2);
update.c:      REMOVE_BIT(ch->loc_hp[1], BROKEN_RIBS_4);
update.c:      REMOVE_BIT(ch->loc_hp[1], BROKEN_RIBS_8);
update.c:      REMOVE_BIT(ch->loc_hp[1], BROKEN_RIBS_16);
update.c:      SET_BIT(ch->loc_hp[1], BROKEN_RIBS_16);
update.c:      SET_BIT(ch->loc_hp[1], BROKEN_RIBS_8);
update.c:      SET_BIT(ch->loc_hp[1], BROKEN_RIBS_4);
update.c:      SET_BIT(ch->loc_hp[1], BROKEN_RIBS_2);
update.c:      SET_BIT(ch->loc_hp[1], BROKEN_RIBS_1);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_EYE_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_EYE_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_EAR_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_EAR_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_NOSE);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], BROKEN_NOSE);
update.c:      REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_1);
update.c:      REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_2);
update.c:      REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_4);
update.c:      REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_8);
update.c:      REMOVE_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_16);
update.c:      SET_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_16);
update.c:      SET_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_8);
update.c:      SET_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_4);
update.c:      SET_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_2);
update.c:      SET_BIT(ch->loc_hp[LOC_HEAD], LOST_TOOTH_1);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], BROKEN_NOSE);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], BROKEN_JAW);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_HEAD], BROKEN_SKULL);  
update.c:    REMOVE_BIT(ch->loc_hp[LOC_BODY], BROKEN_SPINE);  
update.c:    REMOVE_BIT(ch->loc_hp[LOC_BODY], BROKEN_NECK);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_ARM);  
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_ARM);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_HAND);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_ARM);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_ARM);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_HAND);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_L], LOST_LEG);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_L], BROKEN_LEG);
update.c:    SET_BIT(ch->loc_hp[LOC_LEG_L], LOST_FOOT);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_R], LOST_LEG);  
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_R], BROKEN_LEG);
update.c:    SET_BIT(ch->loc_hp[LOC_LEG_R], LOST_FOOT);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_ARM);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_ARM);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_L], BROKEN_LEG);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_R], BROKEN_LEG);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_HAND);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_THUMB);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_I);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_M);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_R);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_HAND);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_THUMB);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_I);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_M);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_R);
update.c:    SET_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_L], LOST_FOOT); 
update.c:    REMOVE_BIT(ch->loc_hp[LOC_LEG_R], LOST_FOOT);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], LOST_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_L], BROKEN_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_THUMB);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_I);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_M);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_R);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], LOST_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_L);
update.c:    REMOVE_BIT(ch->loc_hp[LOC_ARM_R], BROKEN_FINGER_L);
update.c:    if (IS_SET(ch->loc_hp[6], BLEEDING_THROAT))
update.c:    REMOVE_BIT(ch->loc_hp[LOC_BODY], CUT_THROAT);
update.c:    ch_next = ch->next;
update.c:    else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
update.c:      SET_BIT(ch->extra, EXTRA_OSWITCH);
update.c:      if (ch->decay_pulse > 0)
update.c:        if (--ch->decay_pulse <= 0)
update.c:      if (ch->tick_timer[TIMER_CHALLENGE] == 1)
update.c:        if (ch->tick_timer[i] > 0)
update.c:          ch->tick_timer[i]--;
update.c:      for (quest = ch->pcdata->quests; quest; quest = quest_next)
update.c:      if ((ch->level < LEVEL_IMMORTAL || !ch->desc) && !is_obj && !IS_SET(ch->extra, EXTRA_AFK))
update.c:        if ((ch->desc == NULL || ch->desc->connected == CON_PLAYING) && ch->level >= 2 && ch->save_time < save_time)
update.c:          save_time = ch->save_time;
update.c:        if (++ch->timer >= 12 && !in_fortress(ch))
update.c:          if (ch->was_in_room == NULL && ch->in_room != NULL)
update.c:            ch->was_in_room = ch->in_room;
update.c:            if (ch->fighting != NULL)
update.c:        if (ch->timer > 20)
update.c:    for (paf = ch->affected; paf != NULL; paf = paf_next)
update.c:            sprintf(buf, "Update Bug : Bad affect on %s.", ch->name);
update.c:    if (ch->position == POS_MORTAL || ch->position == POS_STUNNED || ch->position == POS_INCAP)
update.c:    if (ch->position > POS_STUNNED && !is_obj)
update.c:      if (ch->hit < ch->max_hit)
update.c:        ch->hit = UMIN(ch->hit + number_range(5, 10), ch->max_hit);
update.c:      if (ch->mana < ch->max_mana)
update.c:        ch->mana = UMIN(ch->mana + number_range(5, 10), ch->max_mana);
update.c:      if (ch->move < ch->max_move)
update.c:        ch->move = UMIN(ch->move + number_range(5, 10), ch->max_move);
update.c:    else if (ch->position <= POS_STUNNED && !is_obj)
update.c:      ch->hit = ch->hit + number_range(2, 4);
update.c:      if (ch->position > POS_STUNNED)
update.c:    if (ch->loc_hp[6] > 0 && !is_obj && ch->in_room != NULL)
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1)
update.c:        ch->hit = 1;
update.c:      ch->in_room->blood += dam;
update.c:      if (ch->in_room->blood > 1000)
update.c:        ch->in_room->blood = 1000;
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1)
update.c:        ch->hit = 1;
update.c:      ch->hit = ch->hit - number_range(100, 200);
update.c:      if (ch->hit < 1)
update.c:        ch->hit = 1;
update.c:        REMOVE_BIT(ch->affected_by, AFF_POISON);
update.c:    if (ch->position == POS_INCAP && !is_obj)
update.c:      ch->hit = ch->hit + number_range(2, 4);
update.c:      if (ch->position > POS_INCAP)
update.c:      if (ch->position > POS_STUNNED)
update.c:    else if (ch->position == POS_MORTAL && !is_obj)
update.c:      ch->hit = ch->hit + number_range(2, 4);
update.c:      if (ch->position == POS_INCAP)
update.c:      ch_next = ch->next;
update.c:  if (ch->hit > 0 && ch->pcdata->mortal > 0)
update.c:    ch->pcdata->mortal = 0;
update.c:    ch->pcdata->mortal += 1;
update.c:    if (ch->pcdata->mortal > 10 && !in_fortress(ch))
update.c:      ch->hit = 100;
update.c:      ch->pcdata->mortal = 0;
update.c:      ch->fight_timer = 0;
update.c:  if (ch->pcdata->safe_counter > 0)
update.c:    ch->pcdata->safe_counter--;
update.c:    if (ch->pcdata->safe_counter == 0)
update.c:  if (IS_SET(ch->in_room->room_flags, ROOM_SAFE) && ch->level > 2 && ch->level < 7 && getMight(ch) >= 150)
update.c:    if (!IS_SET(ch->extra, EXTRA_AFK))
update.c:      ch->pcdata->sit_safe += number_range(5, 10);
update.c:    if ((ch->pcdata->sit_safe > 200 || ch->fight_timer != 0) && !ragnarok && !ch->fighting)
update.c:    if (ch->pcdata->sit_safe > 0)
update.c:      ch->pcdata->sit_safe -= 10;
update.c:      ch->pcdata->sit_safe = 0;
update.c:  if (ch->pcdata->condition[COND_DRUNK] > 10 && number_range(1, 10) == 1)
update.c:  if (ch->pcdata->condition[COND_DRUNK] > 0 && number_range(1, 10) == 5)
update.c:    ch->pcdata->condition[COND_DRUNK]--;
update.c:    if (ch->pcdata->condition[COND_DRUNK] == 0)
update.c:  if (ch->pcdata->stage[0] > 0 || ch->pcdata->stage[2] > 0)
update.c:    if (ch->pcdata->stage[1] > 0 && ch->pcdata->stage[2] >= 225)
update.c:      ch->pcdata->stage[2] += 1;
update.c:      if ((vch = ch->pcdata->partner) != NULL &&
update.c:          !IS_NPC(vch) && vch->pcdata->partner == ch && ((vch->pcdata->stage[2] >= 200 && vch->sex == SEX_FEMALE) || (ch->pcdata->stage[2] >= 200 && ch->sex == SEX_FEMALE)))
update.c:        if (ch->in_room != vch->in_room)
update.c:        if (vch->pcdata->stage[2] >= 225 && ch->pcdata->stage[2] >= 225 && vch->pcdata->stage[2] < 240 && ch->pcdata->stage[2] < 240)
update.c:          ch->pcdata->stage[2] = 240;
update.c:          vch->pcdata->stage[2] = 240;
update.c:        if (ch->sex == SEX_MALE && vch->pcdata->stage[2] >= 240)
update.c:          if (vch->pcdata->stage[2] > ch->pcdata->stage[2])
update.c:            ch->pcdata->stage[2] = vch->pcdata->stage[2];
update.c:        else if (ch->sex == SEX_FEMALE && vch->pcdata->stage[2] >= 240)
update.c:          if (vch->pcdata->stage[2] > ch->pcdata->stage[2])
update.c:            ch->pcdata->stage[2] = vch->pcdata->stage[2];
update.c:      if (ch->pcdata->stage[2] >= 250)
update.c:        if ((vch = ch->pcdata->partner) != NULL && !IS_NPC(vch) && vch->pcdata->partner == ch && ch->in_room == vch->in_room)
update.c:          vch->pcdata->stage[2] = 250;
update.c:          if (ch->sex == SEX_MALE)
update.c:          ch->pcdata->stage[0] = 0;
update.c:          vch->pcdata->stage[0] = 0;
update.c:            SET_BIT(ch->extra, EXTRA_EXP);
update.c:            ch->exp += 100000;
update.c:            SET_BIT(vch->extra, EXTRA_EXP);
update.c:            vch->exp += 100000;
update.c:      if (ch->pcdata->stage[0] > 0 && ch->pcdata->stage[2] < 1 && ch->position != POS_RESTING)
update.c:        if (ch->pcdata->stage[0] > 1)
update.c:          ch->pcdata->stage[0] -= 1;
update.c:          ch->pcdata->stage[0] = 0;
update.c:      else if (ch->pcdata->stage[2] > 0 && ch->pcdata->stage[0] < 1)
update.c:        if (ch->pcdata->stage[2] > 10)
update.c:          ch->pcdata->stage[2] -= 10;
update.c:          ch->pcdata->stage[2] = 0;
update.c:        if (ch->sex == SEX_MALE && ch->pcdata->stage[2] == 0)
update.c:  if (ch->loc_hp[6] > 0)
update.c:    (*skill_table[sn].spell_fun) (sn, ch->level, ch, ch);
update.c:  else if ((ch->loc_hp[0] + ch->loc_hp[1] + ch->loc_hp[2] + ch->loc_hp[3] + ch->loc_hp[4] + ch->loc_hp[5]) != 0)
update.c:  if (ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->position == POS_SLEEPING)
update.c:  ch->hit = UMIN(ch->hit + (hit_gain * multiplier), ch->max_hit);
update.c:  ch->mana = UMIN(ch->mana + (mana_gain * multiplier), ch->max_mana);
update.c:  ch->move = UMIN(ch->move + (move_gain * multiplier), ch->max_move);
update.c:  if (ch->hit >= ch->max_hit && ch->mana >= ch->max_mana && ch->move >= ch->max_move)
update.c:  if (ch->timer >= 6) return;
update.c:  if (ch->pcdata->time_tick < 250) ch->pcdata->time_tick++;
wizutil.c:  pArea = ch->in_room->area;
wizutil.c:  free_string(ch->pcdata->switchname);
wizutil.c:  ch->pcdata->switchname = str_dup(buf);
wizutil.c:    vch->exp += v;
wizutil.c:    vch->pcdata->score[SCORE_TOTAL_XP] += v;
wizutil.c:    vch->pcdata->quest += v;
wizutil.c:    vch->pcdata->questtotal += v;
wizutil.c:  if (vch->mkill < 5)
wizutil.c:    vch->mkill = 5;
wizutil.c:  sprintf(arg2, "%s reimbursed %d %s.\n\r", vch->name, v, arg);
wizutil.c:  sprintf(arg2, "%s has reimbursed you %d %s.\n\r", ch->name, v, arg);
wizutil.c:  if (ch->affected == NULL)
wizutil.c:  if (ch->affected != NULL)
wizutil.c:    for (paf = ch->affected; paf != NULL; paf = paf->next)
wizutil.c:      if (ch->level >= 0)
wizutil.c:  if (!IS_NPC(ch) && ch->level < 7 && ch->in_room != NULL && !IS_SET(ch->in_room->room_flags, ROOM_SAFE))
wizutil.c:    for (wch = ch->in_room->people; wch != NULL; wch = wch_next)
wizutil.c:      wch_next = wch->next_in_room;
wizutil.c:      if (!IS_NPC(wch) || !IS_SET(wch->act, ACT_AGGRESSIVE)
wizutil.c:          || wch->fighting != NULL || IS_AFFECTED(wch, AFF_CHARM) || !IS_AWAKE(wch) || (IS_SET(wch->act, ACT_WIMPY) && IS_AWAKE(ch)) || !can_see(wch, ch) || number_bits(2) == 0)
wokanist.c:	 if (ch->mana < 1000)
wokanist.c:     for ( vch = ch->in_room->people; vch!=NULL;vch = vch_next)     
wokanist.c:      	if(ch->mana <= 100)
wokanist.c:        vch_next = vch->next_in_room;
wokanist.c:          dam = number_range((ch->damcap[DAM_CAP] - 500), (ch->damcap[DAM_CAP]+(ch->pRank*125)));
wokanist.c:	  sprintf(buf, "%s's #sblast of gas#n chokes you [#G%d#n]\n\r", ch->name, dam);
wokanist.c:          spell_poison(gsn_poison,(ch->level*number_range(100,120)),ch,victim);
wokanist.c:	  ch->mana -= 100;
wokanist.c:  int red_magic = ch->spl[RED_MAGIC];
wokanist.c:  int blue_magic = ch->spl[BLUE_MAGIC];
wokanist.c:  int green_magic = ch->spl[GREEN_MAGIC];
wokanist.c:  int purple_magic = ch->spl[PURPLE_MAGIC];
wokanist.c:  int yellow_magic = ch->spl[YELLOW_MAGIC];
wokanist.c:  int magic_power = ch->spl[RED_MAGIC] + ch->spl[BLUE_MAGIC] + ch->spl[GREEN_MAGIC] + ch->spl[PURPLE_MAGIC] + 
wokanist.c:ch->spl[YELLOW_MAGIC];
wokanist.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
wokanist.c:    if (IS_AFFECTED(ch, AFF_PEACE)) REMOVE_BIT(ch->affected_by, AFF_PEACE);
wokanist.c:      if (ch->fighting == NULL) set_fighting(ch, victim);
wokanist.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
wokanist.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
wokanist.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
wokanist.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
wokanist.c:    	if (IS_SET(ch->affected_by, AFF_POLYMORPH))
wokanist.c:    	if (ch->mana < 1000)
wokanist.c:    	ch->pcdata->powers[ELEMENTAL_FORMS]=FIRE_FORM;
wokanist.c:    	SET_BIT(ch->affected_by, AFF_POLYMORPH);
wokanist.c:    	ch->hitroll += 400;
wokanist.c:    	ch->damroll += 400;
wokanist.c:    	ch->armor   -= 200;
wokanist.c:    	ch->mana    -= 1000;
wokanist.c:    	sprintf(buf, "%s The #RF#Yi#Rr#Ye#n Elemental", ch->name);
wokanist.c:    	free_string(ch->morph);
wokanist.c:    	ch->morph = str_dup(buf);
wokanist.c:    	if (IS_SET(ch->affected_by, AFF_POLYMORPH))
wokanist.c:    	if (ch->mana < 1000)
wokanist.c:    	ch->pcdata->powers[ELEMENTAL_FORMS]=WATER_FORM;
wokanist.c:    	SET_BIT(ch->affected_by, AFF_POLYMORPH);
wokanist.c:    	ch->hitroll += 300;
wokanist.c:    	ch->damroll += 300;
wokanist.c:    	ch->mana    -= 1000;
wokanist.c:    	sprintf(buf, "%s The #lWater#n Elemental", ch->name);
wokanist.c:    	free_string(ch->morph);
wokanist.c:    	ch->morph = str_dup(buf);
wokanist.c:    	if (IS_SET(ch->affected_by, AFF_POLYMORPH))
wokanist.c:    	if (ch->mana < 1000)
wokanist.c:    	ch->pcdata->powers[ELEMENTAL_FORMS]=AIR_FORM;
wokanist.c:    	SET_BIT(ch->affected_by, AFF_POLYMORPH);
wokanist.c:    	ch->hitroll += 200;
wokanist.c:    	ch->damroll += 200;
wokanist.c:    	ch->armor   -= 200;
wokanist.c:    	ch->mana    -= 1000;
wokanist.c:    	sprintf(buf, "%s The #7Air#n Elemental", ch->name);
wokanist.c:    	free_string(ch->morph);
wokanist.c:    	ch->morph = str_dup(buf);
wokanist.c:    	if (IS_SET(ch->affected_by, AFF_POLYMORPH))
wokanist.c:    	if (ch->mana < 1000)
wokanist.c:    	ch->pcdata->powers[ELEMENTAL_FORMS]=EARTH_FORM;
wokanist.c:    	SET_BIT(ch->affected_by, AFF_POLYMORPH);
wokanist.c:    	ch->hitroll += 500;
wokanist.c:   	ch->damroll += 500;
wokanist.c:    	ch->armor   -= 500;
wokanist.c:    	ch->mana    -= 1000;
wokanist.c:    	sprintf(buf, "%s The #GE#garth#n Elemental", ch->name);
wokanist.c:    	free_string(ch->morph);
wokanist.c:    	ch->morph = str_dup(buf);
wokanist.c:    	if (!IS_SET(ch->affected_by, AFF_POLYMORPH))
wokanist.c:    	if (IS_SET(ch->pcdata->powers[ELEMENTAL_FORMS], FIRE_FORM))
wokanist.c:      	ch->hitroll -= 400;
wokanist.c:      	ch->damroll -= 400;
wokanist.c:      	ch->armor   += 200;
wokanist.c:    	else if (IS_SET(ch->pcdata->powers[ELEMENTAL_FORMS], AIR_FORM))
wokanist.c:      	ch->hitroll -= 200;
wokanist.c:      	ch->damroll -= 200;
wokanist.c:      	ch->armor   += 200;
wokanist.c:    	else if (IS_SET(ch->pcdata->powers[ELEMENTAL_FORMS], WATER_FORM))
wokanist.c:      	ch->hitroll -= 300;
wokanist.c:      	ch->damroll -= 300;
wokanist.c:    	else if (IS_SET(ch->pcdata->powers[ELEMENTAL_FORMS], EARTH_FORM))
wokanist.c:      	ch->hitroll -= 500;
wokanist.c:      	ch->damroll -= 500;
wokanist.c:      	ch->armor   += 500;
wokanist.c:        ch->pcdata->powers[ELEMENTAL_FORMS]=0;
wokanist.c:     	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
wokanist.c:        free_string(ch->morph);
wokanist.c:        ch->morph=str_dup("");
xrakisis.c:  if (ch->pcdata->perm_str >=25) return;
xrakisis.c:   ch->pcdata->perm_str++;
xrakisis.c:  if (ch->pcdata->perm_dex >=25) return;
xrakisis.c:   ch->pcdata->perm_dex++;
xrakisis.c:  if (ch->pcdata->perm_con >=25) return;
xrakisis.c:   ch->pcdata->perm_con++;
xrakisis.c:  if (ch->level < 3)
xrakisis.c:        if (ch->pcsphereammount > 5)
xrakisis.c:	if (IS_SET(ch->pcsphere, SPHERE_COMBAT1))
xrakisis.c:	SET_BIT(ch->pcsphere, SPHERE_COMBAT1);
xrakisis.c:	ch->pcsphereammount++;
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_ANIMAL);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_WOKANIST);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_NECROMANCER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 50)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_PYROMANCER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 50)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_CHAOS);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 50)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_HEALING);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 50)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_DIVINER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 50)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_TRANSMUTER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 100)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_COMBAT2);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 100)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_ILLUSIONIST);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 100)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_GEOMANCER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 150)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_COMBAT3);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 150)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_ABJURER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 150)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_HYDROMANCER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 150)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_ENHANCEMENT);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 150)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_AEROMANCER);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 200)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_COMBAT4);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:        if (ch->pcRaceLevel < 200)
xrakisis.c:        SET_BIT(ch->pcsphere, SPHERE_ANIMAL2);
xrakisis.c:        ch->pcsphereammount++;
xrakisis.c:	if (ch->pcdata->learned[sn] == 0) 
xrakisis.c:	    ch->pcdata->learned[sn] = 1;
xrakisis.c:	   	ch->pcdata->points += skill_table[sn].rating[ch->class]; 
xrakisis.c:	int lgainexp  = 25000 * ch->pcRaceLevel;;
xrakisis.c:	if( ch->pcRaceLevel >= 200 )
xrakisis.c:	if( ch->exp < lgainexp )
xrakisis.c:        sprintf( buf, "Not enough Experience points, you need %d more.\n\r", ( lgainexp - ch->exp ) );
xrakisis.c:        ch->exp -= lgainexp;
xrakisis.c:        ch->pcRaceLevel++;
xrakisis.c:	sprintf( buf, "#0%s is now #RLevel #R[#0%d#R]#n", ch->pcdata->switchname, ch->pcRaceLevel );
xrakisis.c:	ch->max_hit += hp;
xrakisis.c:	ch->max_move += move;
xrakisis.c:	ch->max_mana += mana;
xrakisis.c:        if (ch->level == 1 || ch->level > 6)
xrakisis.c:                templevel = ch->level;
xrakisis.c:                ch->level = 12;
xrakisis.c:                ch->trust = 12;
xrakisis.c:                ch->level = templevel;
xrakisis.c:                //ch->level = 1;
xrakisis.c:                ch->trust = 0;
zarius_shop.c:        room = ch->in_room;
zarius_shop.c:        if ( ch->in_room < get_room_index(2007) && ch->in_room > get_room_index(2012)   )  
zarius_shop.c:                        if (ch->bones < itemcost)
zarius_shop.c:                                        itemcost, ch->bones);
zarius_shop.c:                        obj->questowner = str_dup(ch->pcdata->switchname);
zarius_shop.c:                        ch->bones -= itemcost;
zarius_shop.c:        room = ch->in_room;
zarius_shop.c:                    && str_cmp(ch->pcdata->switchname, obj->questowner))
zarius_shop.c:                        ch->bones += value;
zarius_shop.c:                for (obj = ch->carrying; obj != NULL; obj = obj_next)
zarius_shop.c:                            && str_cmp(ch->pcdata->switchname,
zarius_shop.c:                                ch->bones += total;
zarius_shop.c:                                ch->bones += total;
zarius_shop.c:        room = ch->in_room;
zarius_shop.c:        room = ch->in_room;
zarius_shop.c:        //if ( (ch->in_room->vnum >= 40021 && ch->in_room->vnum <= 40030) && (!IS_CLASS(ch,CLASS_THIEF) && !IS_CLASS3(ch,CLASS3_ASSASSIN) && !IS_CLASS2(ch,CLASS2_NIGHTBLADE) ) )
